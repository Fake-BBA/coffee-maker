---- E:\BBA'DATA\美芯电子产品程序\咖啡机\V4.7\main.c ----------------------------------------------------------------------
1:                #include "my_configuration.h"
2:                
3:                volatile unsigned char MainTime;
4:                volatile bit	B_MainLoop;
5:                
6:                unsigned short icount=0;
7:                
8:                bit bool_col;
9:                
10:               void DelayX(unsigned int i)
11:               {
12:               	//unsigned j=0;
13:               	while(i--) {asm("nop");}
  15D2    3001    LDIA	0x1
  15D3    1283    CLRB	0x3,5
  15D4    1303    CLRB	0x3,6
  15D5    02DD    SUBR	0x5D
  15D6    3000    LDIA	0x0
  15D7    1C03    SNZB	0x3,0
  15D8    03DE    DECR	0x5E
  15D9    02DE    SUBR	0x5E
  15DA    0A5D    INCA	0x5D
  15DB    1903    SZB	0x3,2
  15DC    0A5E    INCA	0x5E
  15DD    1903    SZB	0x3,2
  15DE    0008    RET
  15DF    0000    NOP
  15E0    2DD2    JP	0x5D2
14:               }
15:               //系统初始化
16:               void Init_System()
17:               {
  1523    0000    NOP
18:               	asm("nop");
19:               	INTCON = 0;				//禁止中断
  1524    018B    CLR	0xB
20:               	OSCCON = 0X71;			//配置振荡为8M
  1525    3071    LDIA	0x71
  1526    1683    SETB	0x3,5
  1527    1303    CLRB	0x3,6
  1528    008F    LD	0xF,A
21:               	OPTION_REG = 0;
  1529    0181    CLR	0x1
22:               	//延时等待电源电压稳定
23:               	
24:               	//RB1过零检测,RE3,RC6，HC595驱动,RC0-主PTC,RC1-HC595时钟，RE1-NTC,RE2-电磁阀
25:               	TRISE = 0B11110011;
  152A    30F3    LDIA	0xF3
26:               	TRISB = 0B11111111;
27:               	TRISC = 0B10111100;
28:               	//RA0-RA5,RB2-RB7//电容按键,RA6-底部NTC RA7-电机
29:               	TRISA = 0B00111111;		
  152B    25E1    CALL	0x5E1
  152C    160A    SETB	0xA,4
  152D    118A    CLRB	0xA,3
30:               	//PIE2 = 0;
31:               	
32:               	//Bit7 未用，读为0,Bit6 ADIE：A/D转换器（ADC）中断允许位,1=允许ADC中断,0=禁止ADC中断
33:               	//Bit5-4 未用，读为0,Bit3 SSPIE：主同步串行端口（MSSP）中断允许位
34:               	//1=允许MSSP中断,0=禁止MSSP中断,Bit2 CCP1IE：CCP1中断允许位,1=允许CCP1中断
35:               	//0=禁止CCP1中断,Bit1 TMR2IE：TIMER2与PR2匹配中断允许位,1=允许TMR2与PR2匹配中断
36:               	//0=禁止TMR2与PR2匹配中断,Bit0 TMR1IE：TIMER1溢出中断允许位
37:               	//1=允许TIMER1溢出中断,0=禁止TIMER1溢出中断
38:               	PIE1 = 2;				//允许TIME2匹配中断
  152E    3002    LDIA	0x2
  152F    008C    LD	0xC,A
39:               	PR2 = 250;				//8/16M下将TMR2设置为2ms中断
  1530    30FA    LDIA	0xFA
  1531    0092    LD	0x12,A
40:               	T2CON = 6;				//使能定时器2, 16分频
  1532    3006    LDIA	0x6
  1533    1283    CLRB	0x3,5
  1534    0092    LD	0x12,A
41:               	//INTCON = 0XC0;			//使能中断
42:               	
43:               	HOT_BOTTOM_OFF();
  1535    1007    CLRB	0x7,0
44:               	HOT_MAJOR_OFF();
  1536    1305    CLRB	0x5,6
45:               	BEEP_OFF();
  1537    13A5    CLRB	0x25,7
  1538    30FF    LDIA	0xFF
46:               	MOTOR_OFF();
  1539    1385    CLRB	0x5,7
47:               	Temp_595[LED_1_6]=0XFF;
  153A    00A5    LD	0x25,A
48:               	Temp_595[LED_7_12]=0XFF;
  153B    00A6    LD	0x26,A
49:               	Temp_595[2]=0XFF;
  153C    00A7    LD	0x27,A
50:               	HOT_BOTTOM_ON();		//开启ADC检测电流开关
  153D    1407    SETB	0x7,0
51:               	//Set_Disp();
52:               	_74HC595_SET(); 	//执行595缓冲器数据
  153E    25AA    CALL	0x5AA
  153F    160A    SETB	0xA,4
  1540    118A    CLRB	0xA,3
  1541    30E8    LDIA	0xE8
53:               	SOLENOID_OFF();	
  1542    1109    CLRB	0x9,2
54:               	DelayX(1000);
  1543    00DD    LD	0x5D,A
  1544    3003    LDIA	0x3
  1545    00DE    LD	0x5E,A
  1546    25D2    CALL	0x5D2
55:               	
56:               	//睡眠与唤醒相关
57:               	IOCB=0x02;		//允许PB1发生电平变化中断
  1547    3002    LDIA	0x2
  1548    1683    SETB	0x3,5
  1549    0096    LD	0x16,A
58:               	OPTION_REG&=~(1<<7);
  154A    1381    CLRB	0x1,7
59:               	INTCON = 0B11001000;	//开全局中断，开外设中断，允许PB口电平变化中断
  154B    30C8    LDIA	0xC8
  154C    008B    LD	0xB,A
60:               	
61:               	WPUB=0B00000010;	//使能PB1上拉
  154D    3002    LDIA	0x2
  154E    0095    LD	0x15,A
62:               	
63:               	WDTCON=0; 					//软件使能看门狗
  154F    1283    CLRB	0x3,5
  1550    1703    SETB	0x3,6
  1551    0185    CLR	0x5
  1552    0008    RET
64:               }
65:               
66:               
67:               /***********************************************************
68:               键处理函数
69:               ***********************************************************/
70:               void KeyServer()
71:               {
  16F0    27FD    CALL	0x7FD
72:               	static unsigned int KeyOldFlag = 0;
73:               	unsigned int i = (KeyFlag[1]<<8) | KeyFlag[0];
  16F1    0831    LD	A,0x31
  16F2    00DE    LD	0x5E,A
  16F3    0830    LD	A,0x30
  16F4    00DD    LD	0x5D,A
  16F5    3000    LDIA	0x0
74:               	Add=0;
  16F6    01B8    CLR	0x38
  16F7    01D1    CLR	0x51
75:               	Reduce=0;
76:               	if(LED6_On_Times>=ADD_REDUCE_LED_TIME) LED6_State=LED_OFF;
  16F8    1683    SETB	0x3,5
  16F9    0236    SUBA	0x36
  16FA    3050    LDIA	0x50
  16FB    1903    SZB	0x3,2
  16FC    0235    SUBA	0x35
  16FD    1283    CLRB	0x3,5
  16FE    1803    SZB	0x3,0
  16FF    01C9    CLR	0x49
77:               	
78:               	if(LED5_On_Times>=ADD_REDUCE_LED_TIME) LED5_State=LED_OFF;
  1700    3000    LDIA	0x0
  1701    1683    SETB	0x3,5
  1702    0234    SUBA	0x34
  1703    3050    LDIA	0x50
  1704    1903    SZB	0x3,2
  1705    0233    SUBA	0x33
  1706    1283    CLRB	0x3,5
  1707    1803    SZB	0x3,0
  1708    01C8    CLR	0x48
79:               
80:               	
81:               	if(i)
  1709    1283    CLRB	0x3,5
  170A    085E    LD	A,0x5E
  170B    045D    ORA	0x5D
  170C    1903    SZB	0x3,2
  170D    2FEF    JP	0x7EF
82:               	{
83:               		if(i==KEY_ADD)
  170E    085D    LD	A,0x5D
  170F    3A10    XORIA	0x10
  1710    045E    ORA	0x5E
  1711    1D03    SNZB	0x3,2
  1712    2F21    JP	0x721
84:               		{
85:               			if(Key_ON_Times++>KEY_ON_TIMES)
  1713    1683    SETB	0x3,5
  1714    27F7    CALL	0x7F7
  1715    160A    SETB	0xA,4
  1716    118A    CLRB	0xA,3
  1717    1903    SZB	0x3,2
  1718    0231    SUBA	0x31
  1719    1C03    SNZB	0x3,0
  171A    2F33    JP	0x733
86:               			{
87:               				Key_Add_3S_ON=1;
  171B    1571    SETB	0x71,2
88:               				//Rbeep=1;
89:               				Key_ON_Times=KEY_ON_TIMES;
  171C    30EE    LDIA	0xEE
  171D    00B1    LD	0x31,A
  171E    3002    LDIA	0x2
  171F    00B2    LD	0x32,A
  1720    2F33    JP	0x733
90:               			}
91:               		}
92:               		else
93:               		if(i==KEY_REDUCE)
  1721    085D    LD	A,0x5D
  1722    3A20    XORIA	0x20
  1723    045E    ORA	0x5E
  1724    1D03    SNZB	0x3,2
  1725    2F30    JP	0x730
94:               		{
95:               			if(Key_ON_Times++>KEY_ON_TIMES)
  1726    1683    SETB	0x3,5
  1727    27F7    CALL	0x7F7
  1728    160A    SETB	0xA,4
  1729    118A    CLRB	0xA,3
  172A    1903    SZB	0x3,2
  172B    0231    SUBA	0x31
  172C    1C03    SNZB	0x3,0
  172D    2F33    JP	0x733
96:               			{
97:               				Key_Reduce_3S_ON=1;
  172E    17F1    SETB	0x71,7
  172F    2F1C    JP	0x71C
98:               				Key_ON_Times=KEY_ON_TIMES;
99:               				//Rbeep=1;
100:              			}
101:              		}
102:              		else
103:              		Key_ON_Times=0;
  1730    1683    SETB	0x3,5
  1731    01B1    CLR	0x31
  1732    01B2    CLR	0x32
104:              		//else Key_Add_3S_ON=0;
105:              		if(i != KeyOldFlag)
  1733    1703    SETB	0x3,6
  1734    0863    LD	A,0x63
  1735    27FD    CALL	0x7FD
  1736    065E    XORA	0x5E
  1737    1D03    SNZB	0x3,2
  1738    2F3E    JP	0x73E
  1739    1683    SETB	0x3,5
  173A    1703    SETB	0x3,6
  173B    0862    LD	A,0x62
  173C    27FD    CALL	0x7FD
  173D    065D    XORA	0x5D
  173E    1903    SZB	0x3,2
  173F    0008    RET
106:              		{
107:              			KeyOldFlag = i;
  1740    085E    LD	A,0x5E
  1741    1683    SETB	0x3,5
  1742    1703    SETB	0x3,6
  1743    00E3    LD	0x63,A
  1744    27FD    CALL	0x7FD
  1745    085D    LD	A,0x5D
  1746    1683    SETB	0x3,5
  1747    1703    SETB	0x3,6
  1748    00E2    LD	0x62,A
108:              
109:              			switch(i)
  1749    2FAF    JP	0x7AF
110:              			{
111:              				case KEY_REGULAR: 		//KEY_REGULAR
112:              					if(Key_Regular_Lock) break;
  174A    18F2    SZB	0x72,1
  174B    0008    RET
113:              					Regular=1;
  174C    01D2    CLR	0x52
  174D    0AD2    INCR	0x52
114:              					Bold=0;
  174E    01BB    CLR	0x3B
115:              					Iced=0;
  174F    01BF    CLR	0x3F
116:              					Tea=0;
  1750    01D6    CLR	0x56
117:              					
118:              					Rbeep=1;	//蜂鸣器短叫一声
  1751    1283    CLRB	0x3,5
  1752    01D0    CLR	0x50
  1753    0AD0    INCR	0x50
119:              					break;
  1754    0008    RET
120:              					
121:              				case KEY_BOLD:			//KEY_BOLD
122:              					if(Key_Bold_Lock) break;
  1755    1A71    SZB	0x71,4
  1756    0008    RET
123:              					Regular=0;
  1757    01D2    CLR	0x52
124:              					Bold=1;
  1758    01BB    CLR	0x3B
  1759    0ABB    INCR	0x3B
  175A    2F4F    JP	0x74F
125:              					Iced=0;
126:              					Tea=0;
127:              					
128:              					Rbeep=1;	//蜂鸣器短叫一声
129:              					break;
130:              					
131:              				case KEY_ICED:
132:              					if(Key_Iced_Lock) break;
  175B    1AF1    SZB	0x71,5
  175C    0008    RET
133:              					Regular=0;
  175D    01D2    CLR	0x52
134:              					Bold=0;
  175E    01BB    CLR	0x3B
135:              					Iced=1;
  175F    01BF    CLR	0x3F
  1760    0ABF    INCR	0x3F
  1761    2F50    JP	0x750
136:              					Tea=0;
137:              					
138:              					Rbeep=1;	//蜂鸣器短叫一声
139:              					break;
140:              					
141:              				case KEY_TEA:
142:              					if(Key_Tea_Lock) break;
  1762    19F2    SZB	0x72,3
  1763    0008    RET
143:              					Regular=0;
  1764    01D2    CLR	0x52
144:              					Bold=0;
  1765    01BB    CLR	0x3B
145:              					Iced=0;
  1766    01BF    CLR	0x3F
146:              					Tea=1;
  1767    01D6    CLR	0x56
  1768    0AD6    INCR	0x56
  1769    2F51    JP	0x751
147:              					
148:              					Rbeep=1;	//蜂鸣器短叫一声
149:              					break;
150:              					
151:              				case KEY_ADD:
152:              					if(Key_Add_Lock) break;
  176A    19F1    SZB	0x71,3
  176B    0008    RET
  176C    3003    LDIA	0x3
153:              					Add=1;
  176D    01B8    CLR	0x38
  176E    0AB8    INCR	0x38
154:              					LED5_State=LED_ON_TIME;
  176F    00C8    LD	0x48,A
155:              					LED5_On_Times=0;
  1770    1683    SETB	0x3,5
  1771    01B3    CLR	0x33
  1772    01B4    CLR	0x34
156:              					LED6_State=LED_OFF;
  1773    1283    CLRB	0x3,5
  1774    01C9    CLR	0x49
  1775    2F51    JP	0x751
157:              					//LED5_Flash_Times=1;
158:              					Rbeep=1;	//蜂鸣器短叫一声
159:              					break;
160:              					
161:              				case KEY_REDUCE:
162:              					if(Key_Reduce_Lock) break;
  1776    1872    SZB	0x72,0
  1777    0008    RET
  1778    3003    LDIA	0x3
163:              					Reduce=1;
  1779    01D1    CLR	0x51
  177A    0AD1    INCR	0x51
164:              					LED5_State=LED_OFF;
  177B    01C8    CLR	0x48
165:              					LED6_State=LED_ON_TIME;
  177C    00C9    LD	0x49,A
166:              					LED6_On_Times=0;
  177D    1683    SETB	0x3,5
  177E    01B5    CLR	0x35
  177F    01B6    CLR	0x36
  1780    2F51    JP	0x751
167:              					Rbeep=1;	//蜂鸣器短叫一声
168:              					break;
169:              					
170:              				case KEY_80_Z:
171:              					if(Key_80_Z_Lock) break;
  1781    18F1    SZB	0x71,1
  1782    0008    RET
172:              					_80_z=1;
  1783    01DC    CLR	0x5C
  1784    0ADC    INCR	0x5C
173:              					_120_z=0;
  1785    01D9    CLR	0x59
  1786    2F8C    JP	0x78C
174:              					_210_z=0;
175:              					_420_z=0;
176:              					
177:              					
178:              					Rbeep=1;	//蜂鸣器短叫一声
179:              					break;
180:              					
181:              				case KEY_120_Z:
182:              					if(Key_120_Z_Lock) break;
  1787    1B70    SZB	0x70,6
  1788    0008    RET
183:              					_80_z=0;
  1789    01DC    CLR	0x5C
184:              					_120_z=1;
  178A    01D9    CLR	0x59
  178B    0AD9    INCR	0x59
185:              					_210_z=0;
  178C    01DA    CLR	0x5A
  178D    2F94    JP	0x794
186:              					_420_z=0;
187:              					
188:              					Rbeep=1;	//蜂鸣器短叫一声
189:              					break;
190:              					
191:              				case KEY_210_Z:
192:              					if(Key_210_Z_Lock) break;
  178E    1BF0    SZB	0x70,7
  178F    0008    RET
193:              					_80_z=0;
  1790    01DC    CLR	0x5C
194:              					_120_z=0;
  1791    01D9    CLR	0x59
195:              					_210_z=1;
  1792    01DA    CLR	0x5A
  1793    0ADA    INCR	0x5A
196:              					_420_z=0;
  1794    01DB    CLR	0x5B
  1795    2F51    JP	0x751
197:              					
198:              					Rbeep=1;	//蜂鸣器短叫一声
199:              					break;
200:              					
201:              				case KEY_420_Z:
202:              					if(Key_420_Z_Lock) break;
  1796    1871    SZB	0x71,0
  1797    0008    RET
203:              					_80_z=0;
  1798    01DC    CLR	0x5C
204:              					_120_z=0;
  1799    01D9    CLR	0x59
205:              					_210_z=0;
  179A    01DA    CLR	0x5A
206:              					_420_z=1;
  179B    01DB    CLR	0x5B
  179C    0ADB    INCR	0x5B
  179D    2F51    JP	0x751
207:              					
208:              					Rbeep=1;	//蜂鸣器短叫一声
209:              					break;
210:              					
211:              				case KEY_OPTION:
212:              					if(Key_Option_Lock) break;
  179E    1B71    SZB	0x71,6
  179F    0008    RET
  17A0    3004    LDIA	0x4
213:              					Option++;
  17A1    0ACF    INCR	0x4F
214:              					if(Option>=4)	Option=1;
  17A2    024F    SUBA	0x4F
  17A3    1C03    SNZB	0x3,0
  17A4    2F51    JP	0x751
  17A5    01CF    CLR	0x4F
  17A6    0ACF    INCR	0x4F
  17A7    2F51    JP	0x751
215:              					
216:              					Rbeep=1;	//蜂鸣器短叫一声
217:              					break;
218:              					
219:              				case KEY_START:
220:              					if(Key_Start_Lock) break;
  17A8    1972    SZB	0x72,2
  17A9    0008    RET
221:              					
222:              					Start=1;
  17AA    01D5    CLR	0x55
  17AB    0AD5    INCR	0x55
223:              					
224:              					Rbeep=1;	//蜂鸣器短叫一声
  17AC    01D0    CLR	0x50
  17AD    0AD0    INCR	0x50
225:              					break;
  17AE    0008    RET
  17AF    27FD    CALL	0x7FD
  17B0    085E    LD	A,0x5E
  17B1    3A00    XORIA	0x0
  17B2    1903    SZB	0x3,2
  17B3    2FC1    JP	0x7C1
  17B4    3A01    XORIA	0x1
  17B5    1903    SZB	0x3,2
  17B6    2FDB    JP	0x7DB
  17B7    3A03    XORIA	0x3
  17B8    1903    SZB	0x3,2
  17B9    2FE0    JP	0x7E0
  17BA    3A06    XORIA	0x6
  17BB    1903    SZB	0x3,2
  17BC    2FE5    JP	0x7E5
  17BD    3A0C    XORIA	0xC
  17BE    1903    SZB	0x3,2
  17BF    2FEA    JP	0x7EA
  17C0    2FF6    JP	0x7F6
  17C1    085D    LD	A,0x5D
  17C2    3A01    XORIA	0x1
  17C3    1903    SZB	0x3,2
  17C4    2F4A    JP	0x74A
  17C5    3A03    XORIA	0x3
  17C6    1903    SZB	0x3,2
  17C7    2F55    JP	0x755
  17C8    3A06    XORIA	0x6
  17C9    1903    SZB	0x3,2
  17CA    2F5B    JP	0x75B
  17CB    3A0C    XORIA	0xC
  17CC    1903    SZB	0x3,2
  17CD    2F62    JP	0x762
  17CE    3A18    XORIA	0x18
  17CF    1903    SZB	0x3,2
  17D0    2F6A    JP	0x76A
  17D1    3A30    XORIA	0x30
  17D2    1903    SZB	0x3,2
  17D3    2F76    JP	0x776
  17D4    3A60    XORIA	0x60
  17D5    1903    SZB	0x3,2
  17D6    2F81    JP	0x781
  17D7    3AC0    XORIA	0xC0
  17D8    1903    SZB	0x3,2
  17D9    2F87    JP	0x787
  17DA    2FF6    JP	0x7F6
  17DB    085D    LD	A,0x5D
  17DC    3A00    XORIA	0x0
  17DD    1903    SZB	0x3,2
  17DE    2F8E    JP	0x78E
  17DF    2FF6    JP	0x7F6
  17E0    085D    LD	A,0x5D
  17E1    3A00    XORIA	0x0
  17E2    1903    SZB	0x3,2
  17E3    2F96    JP	0x796
  17E4    2FF6    JP	0x7F6
  17E5    085D    LD	A,0x5D
  17E6    3A00    XORIA	0x0
  17E7    1903    SZB	0x3,2
  17E8    2F9E    JP	0x79E
  17E9    2FF6    JP	0x7F6
  17EA    085D    LD	A,0x5D
  17EB    3A00    XORIA	0x0
  17EC    1903    SZB	0x3,2
  17ED    2FA8    JP	0x7A8
  17EE    2FF6    JP	0x7F6
226:              					
227:              			}
228:              		}
229:              	}
230:              	else
231:              	{
232:              		KeyOldFlag = 0;
  17EF    1683    SETB	0x3,5
  17F0    1703    SETB	0x3,6
  17F1    01E2    CLR	0x62
  17F2    01E3    CLR	0x63
233:              		Key_ON_Times=0;
  17F3    1303    CLRB	0x3,6
  17F4    01B1    CLR	0x31
  17F5    01B2    CLR	0x32
  17F6    0008    RET
234:              	}
235:              }
236:              
237:              /***********************************************************
238:              中断服务函数
239:              ***********************************************************/
240:              void interrupt Isr_Timer()
241:              {
  0982    232C    CALL	0x32C
242:              	if(TMR2IF)				//若只使能了一个中断源,可以略去判断
  0983    1C8C    SNZB	0xC,1
  0984    2991    JP	0x191
243:              	{
244:              		TMR2IF = 0;	
  0985    108C    CLRB	0xC,1
245:              		//if(!No_AC)
246:              		{
247:              			Set_Disp();	
  0986    219D    CALL	0x19D
  0987    120A    CLRB	0xA,4
  0988    158A    SETB	0xA,3
248:              		}
249:              			
250:              		if(++MainTime>=2)
  0989    3002    LDIA	0x2
  098A    0ACD    INCR	0x4D
  098B    024D    SUBA	0x4D
  098C    1C03    SNZB	0x3,0
  098D    2992    JP	0x192
251:              		{
252:              			MainTime=0;
  098E    01CD    CLR	0x4D
253:              			B_MainLoop = 1;			
  098F    1470    SETB	0x70,0
  0990    2992    JP	0x192
254:              		}
255:              		
256:              	}
257:              	else
258:              	{
259:              		PIR1 = 0;
  0991    018C    CLR	0xC
260:              	//	PIR2 = 0;
261:              	}
262:              	if(RBIF)
  0992    180B    SZB	0xB,0
263:              	{
264:              		//INTCON = 0B11000000;			//使能中断
265:              		RBIF=0;
  0993    100B    CLRB	0xB,0
  0994    0879    LD	A,0x79
  0995    008A    LD	0xA,A
  0996    0878    LD	A,0x78
  0997    0084    LD	0x4,A
  0998    0E77    SWAPA	0x77
  0999    0083    LD	0x3,A
  099A    0EFE    SWAPR	0x7E
  099B    0E7E    SWAPA	0x7E
  099C    0009    RETI
266:              	}
267:              }
268:              
269:              /***********************************************************
270:              主循环
271:              ***********************************************************/
272:              void main()
273:              {
274:              	Init_System();
  14D2    160A    SETB	0xA,4
  14D3    118A    CLRB	0xA,3
  14D4    2523    CALL	0x523
  14D5    160A    SETB	0xA,4
  14D6    118A    CLRB	0xA,3
275:              	//Cheak_LCD();
276:              	_74HC595_SET(); 	//执行595缓冲器数据
  14D7    160A    SETB	0xA,4
  14D8    118A    CLRB	0xA,3
  14D9    25AA    CALL	0x5AA
  14DA    160A    SETB	0xA,4
  14DB    118A    CLRB	0xA,3
  14DC    30B0    LDIA	0xB0
277:              	No_AC=0;
  14DD    1372    CLRB	0x72,6
278:              	//TRISC &= ~(0x3C);
279:              	//TRISC = 0B00111000;
280:              	//RC2=0;
281:              	//RC3=0;
282:              	//RC4=0;
283:              	//RC5=0;
284:              	
285:              	//COMSEL=
286:              	LCDCON0=0B10110000;
  14DE    1683    SETB	0x3,5
  14DF    1703    SETB	0x3,6
  14E0    0090    LD	0x10,A
287:              	LCDADD =0B01100000;
  14E1    3060    LDIA	0x60
  14E2    0092    LD	0x12,A
288:              	//COMEN  =0B00111000;
289:              	//TRISC |=0B00111100;
290:              	//LCDCON1=0;
291:              	//while(1);
292:              	while(1)
293:              	{	
294:              		if(B_MainLoop)
  14E3    1C70    SNZB	0x70,0
  14E4    2CE3    JP	0x4E3
295:              		{
296:              			B_MainLoop = 0;					
  14E5    1070    CLRB	0x70,0
  14E6    0064    CLRWDT
297:              			CLRWDT();						
298:              			AcTestZero();		//过零检测
  14E7    160A    SETB	0xA,4
  14E8    118A    CLRB	0xA,3
  14E9    23E9    CALL	0x3E9
  14EA    160A    SETB	0xA,4
  14EB    118A    CLRB	0xA,3
299:              			/*if(++icount>=1000)
300:              			{
301:              				No_AC=!No_AC;
302:              				icount=0;
303:              			}*/
304:              			if(No_AC)
  14EC    1F72    SNZB	0x72,6
  14ED    2CF4    JP	0x4F4
305:              			{
306:              				ShutDowm_Device();
  14EE    160A    SETB	0xA,4
  14EF    118A    CLRB	0xA,3
  14F0    2553    CALL	0x553
  14F1    160A    SETB	0xA,4
  14F2    118A    CLRB	0xA,3
307:              				continue;			
  14F3    2CE3    JP	0x4E3
308:              			}
309:              			CheckTouchKey();	//电容按键扫描
  14F4    120A    CLRB	0xA,4
  14F5    158A    SETB	0xA,3
  14F6    2522    CALL	0x522
  14F7    160A    SETB	0xA,4
  14F8    118A    CLRB	0xA,3
310:              			KeyServer();		//按键处理
  14F9    160A    SETB	0xA,4
  14FA    118A    CLRB	0xA,3
  14FB    26F0    CALL	0x6F0
  14FC    160A    SETB	0xA,4
  14FD    118A    CLRB	0xA,3
311:              			Pattern();			//模式控制
  14FE    120A    CLRB	0xA,4
  14FF    118A    CLRB	0xA,3
  1500    2011    CALL	0x11
  1501    160A    SETB	0xA,4
  1502    118A    CLRB	0xA,3
312:              			LCD_FState();		//LCD状态控制
  1503    120A    CLRB	0xA,4
  1504    118A    CLRB	0xA,3
  1505    2787    CALL	0x787
  1506    160A    SETB	0xA,4
  1507    118A    CLRB	0xA,3
313:              			CheckBuzzer();		//蜂鸣器状态
  1508    160A    SETB	0xA,4
  1509    118A    CLRB	0xA,3
  150A    23CC    CALL	0x3CC
  150B    160A    SETB	0xA,4
  150C    118A    CLRB	0xA,3
314:              			LED_State();		//
  150D    120A    CLRB	0xA,4
  150E    158A    SETB	0xA,3
  150F    232F    CALL	0x32F
  1510    160A    SETB	0xA,4
  1511    118A    CLRB	0xA,3
315:              			Solenoid_State_F();
  1512    160A    SETB	0xA,4
  1513    118A    CLRB	0xA,3
  1514    2440    CALL	0x440
  1515    160A    SETB	0xA,4
  1516    118A    CLRB	0xA,3
316:              			HOT_MAJOR_State_F();
  1517    160A    SETB	0xA,4
  1518    118A    CLRB	0xA,3
  1519    2487    CALL	0x487
  151A    160A    SETB	0xA,4
  151B    118A    CLRB	0xA,3
317:              			
318:              			NtcAD_Testing(C_NTC_ADCH);//AD
  151C    3006    LDIA	0x6
  151D    120A    CLRB	0xA,4
  151E    158A    SETB	0xA,3
  151F    2014    CALL	0x14
  1520    160A    SETB	0xA,4
  1521    118A    CLRB	0xA,3
  1522    2CE3    JP	0x4E3
319:              		}
320:              	}
321:              }
---- E:\BBA'DATA\美芯电子产品程序\咖啡机\V4.7\pattern_fuction.c ----------------------------------------------------------------------
1:                #include "pattern_function.h"
2:                
3:                /***********************************************************
4:                函数名称：CheckBuzzer
5:                函数功能：蜂鸣器时间处理程序
6:                入口参数：无
7:                出口参数：无 
8:                备    注：
9:                ***********************************************************/
10:               void CheckBuzzer()
11:               {
12:               	if(Rbeep>0)//(Rbeep&0x1F)   0b00011111;
  13CC    1283    CLRB	0x3,5
  13CD    0850    LD	A,0x50
  13CE    3A80    XORIA	0x80
  13CF    3E7F    ADDIA	0x7F
  13D0    1C03    SNZB	0x3,0
  13D1    2BE7    JP	0x3E7
13:               	{
14:               		if(--BuzzerTime<1)
  13D2    0BED    SZDECR	0x6D
  13D3    0008    RET
15:               		{
16:               			Buzzer_CFlag=!Buzzer_CFlag;
  13D4    3002    LDIA	0x2
  13D5    06F0    XORR	0x70
17:               			if(Buzzer_CFlag)
  13D6    1CF0    SNZB	0x70,1
  13D7    2BE1    JP	0x3E1
18:               			{		
19:               				BEEP_ON();
  13D8    17A5    SETB	0x25,7
20:               				if(Rbeep&0x01)
  13D9    1C50    SNZB	0x50,0
  13DA    2BDE    JP	0x3DE
21:               				{
22:               					BuzzerTime = BEEP_SHORT;
  13DB    3028    LDIA	0x28
  13DC    00ED    LD	0x6D,A
23:               				}
  13DD    0008    RET
24:               				else
25:               				{
26:               					BuzzerTime = BEEP_LONG;
  13DE    3064    LDIA	0x64
  13DF    00ED    LD	0x6D,A
  13E0    0008    RET
27:               				}
28:               			}
29:               			else
30:               			{
31:               				BEEP_OFF();
  13E1    13A5    CLRB	0x25,7
32:               				BuzzerTime = NO_BEEP;		
  13E2    3019    LDIA	0x19
  13E3    00ED    LD	0x6D,A
33:               				Rbeep-=2;
  13E4    30FE    LDIA	0xFE
  13E5    07D0    ADDR	0x50
  13E6    0008    RET
34:               			}
35:               		}
36:               	}
37:               	else
38:               	{
39:               		BEEP_OFF();
  13E7    13A5    CLRB	0x25,7
  13E8    0008    RET
40:               	}
41:               }
42:               
43:               
44:               void Clean_Time()
45:               {
46:               	IntCk=0;		//125us
47:               	ms=0;			//毫秒
48:               	sec=0;			//秒
49:               	min=0;			//分钟
50:               	hours=0;		//小时
51:               }
52:               
53:               void LED_State(void)
54:               {
55:               
56:               	switch(BG_LED_State)
  0B2F    2B59    JP	0x359
57:               	{
58:               		case LED_OFF:
59:               			BG_LED_OFF();
  0B30    1283    CLRB	0x3,5
  0B31    1325    CLRB	0x25,6
60:               			break;
  0B32    2B77    JP	0x377
61:               		case LED_ON: 
62:               			BG_LED_ON();
  0B33    1283    CLRB	0x3,5
  0B34    1725    SETB	0x25,6
63:               			break;
  0B35    2B77    JP	0x377
64:               			
65:               		case LED_Flash: 
66:               			if(LED_Flash_HZ>=LED_FLASH_HZ)
  0B36    307D    LDIA	0x7D
  0B37    027B    SUBA	0x7B
  0B38    1C03    SNZB	0x3,0
  0B39    2B77    JP	0x377
67:               			{
68:               				if(BG_LED_Flash_Times<UINT8_MAX)
  0B3A    1683    SETB	0x3,5
  0B3B    0853    LD	A,0x53
  0B3C    3AFF    XORIA	0xFF
  0B3D    1D03    SNZB	0x3,2
69:               					BG_LED_Flash_Times++;
  0B3E    0AD3    INCR	0x53
70:               								
71:               				if(LED_Flash_Bool)
  0B3F    1AF2    SZB	0x72,5
  0B40    2B30    JP	0x330
  0B41    2B33    JP	0x333
72:               				{
73:               					BG_LED_OFF();
74:               				}
75:               				else
76:               				{
77:               					BG_LED_ON();
78:               				}
79:               			}					
80:               			break;
81:               					
82:               		case LED_ON_TIME:
83:               			BG_LED_ON();
  0B42    1725    SETB	0x25,6
84:               			if(++BG_LED_ON_Times>=LED_ON_TIMES) 
  0B43    1683    SETB	0x3,5
  0B44    0AA7    INCR	0x27
  0B45    1903    SZB	0x3,2
  0B46    0AA8    INCR	0x28
  0B47    3000    LDIA	0x0
  0B48    0228    SUBA	0x28
  0B49    30FA    LDIA	0xFA
  0B4A    1903    SZB	0x3,2
  0B4B    0227    SUBA	0x27
  0B4C    1C03    SNZB	0x3,0
  0B4D    2B77    JP	0x377
85:               			{
86:               				BG_LED_ON_Times=0;
  0B4E    01A7    CLR	0x27
  0B4F    01A8    CLR	0x28
87:               				if(BG_LED_ON_Time<UINT8_MAX)
  0B50    1283    CLRB	0x3,5
  0B51    0839    LD	A,0x39
  0B52    3AFF    XORIA	0xFF
  0B53    1D03    SNZB	0x3,2
88:               				BG_LED_ON_Time++;
  0B54    0AB9    INCR	0x39
89:               				if(BG_LED_ON_Time)
  0B55    0839    LD	A,0x39
  0B56    1903    SZB	0x3,2
  0B57    2B30    JP	0x330
  0B58    2B33    JP	0x333
  0B59    083A    LD	A,0x3A
  0B5A    3A00    XORIA	0x0
  0B5B    1903    SZB	0x3,2
  0B5C    2B30    JP	0x330
  0B5D    3A01    XORIA	0x1
  0B5E    1903    SZB	0x3,2
  0B5F    2B33    JP	0x333
  0B60    3A03    XORIA	0x3
  0B61    1903    SZB	0x3,2
  0B62    2B36    JP	0x336
  0B63    3A01    XORIA	0x1
  0B64    1903    SZB	0x3,2
  0B65    2B42    JP	0x342
  0B66    2B77    JP	0x377
90:               				{
91:               					BG_LED_ON();	
92:               				}
93:               				else
94:               				{
95:               					BG_LED_OFF();
96:               				}
97:               			}
98:               			break;		
99:               	}
100:              	switch(ANNULUS_LIGHT_State)
101:              	{
102:              		case LED_OFF: ANNULUS_LIGHT_OFF();
  0B67    1326    CLRB	0x26,6
103:              			break;
  0B68    2B95    JP	0x395
104:              		case LED_ON: ANNULUS_LIGHT_ON();
  0B69    1726    SETB	0x26,6
105:              			break;
  0B6A    2B95    JP	0x395
106:              		case LED_Flash: 
107:              			if(LED_Flash_HZ>=LED_FLASH_HZ)
  0B6B    307D    LDIA	0x7D
  0B6C    027B    SUBA	0x7B
  0B6D    1C03    SNZB	0x3,0
  0B6E    2B95    JP	0x395
108:              			{
109:              				if(ANNULUS_LIGHT_Flash_Times<UINT8_MAX)
  0B6F    087A    LD	A,0x7A
  0B70    3AFF    XORIA	0xFF
  0B71    1903    SZB	0x3,2
  0B72    2B74    JP	0x374
110:              					ANNULUS_LIGHT_Flash_Times++;
  0B73    0AFA    INCR	0x7A
111:              								
112:              				if(LED_Flash_Bool)
  0B74    1AF2    SZB	0x72,5
  0B75    2B67    JP	0x367
  0B76    2B69    JP	0x369
  0B77    1283    CLRB	0x3,5
  0B78    0837    LD	A,0x37
  0B79    3A00    XORIA	0x0
  0B7A    1903    SZB	0x3,2
  0B7B    2B67    JP	0x367
  0B7C    3A01    XORIA	0x1
  0B7D    1903    SZB	0x3,2
  0B7E    2B69    JP	0x369
  0B7F    3A03    XORIA	0x3
  0B80    1903    SZB	0x3,2
  0B81    2B6B    JP	0x36B
  0B82    2B95    JP	0x395
113:              				{
114:              					ANNULUS_LIGHT_OFF();
115:              				}
116:              				else
117:              				{
118:              					ANNULUS_LIGHT_ON();
119:              				}
120:              			}					
121:              			break;
122:              		
123:              	}
124:              	switch(SHOW_LIGHT_State)
125:              	{
126:              		case LED_OFF: SHOW_LIGHT_OFF();
  0B83    1283    CLRB	0x3,5
  0B84    13A6    CLRB	0x26,7
127:              			break;
  0B85    2BB0    JP	0x3B0
128:              		case LED_ON: SHOW_LIGHT_ON();
  0B86    1283    CLRB	0x3,5
  0B87    17A6    SETB	0x26,7
129:              			break;
  0B88    2BB0    JP	0x3B0
130:              		case LED_Flash: 
131:              			if(LED_Flash_HZ>=LED_FLASH_HZ)
  0B89    307D    LDIA	0x7D
  0B8A    027B    SUBA	0x7B
  0B8B    1C03    SNZB	0x3,0
  0B8C    2BB0    JP	0x3B0
132:              			{
133:              				if(SHOW_LIGHT_Flash_Times<UINT8_MAX)
  0B8D    1683    SETB	0x3,5
  0B8E    086C    LD	A,0x6C
  0B8F    3AFF    XORIA	0xFF
  0B90    1D03    SNZB	0x3,2
134:              					SHOW_LIGHT_Flash_Times++;
  0B91    0AEC    INCR	0x6C
135:              								
136:              				if(LED_Flash_Bool)
  0B92    1AF2    SZB	0x72,5
  0B93    2B83    JP	0x383
  0B94    2B86    JP	0x386
  0B95    0853    LD	A,0x53
  0B96    3A00    XORIA	0x0
  0B97    1903    SZB	0x3,2
  0B98    2B83    JP	0x383
  0B99    3A01    XORIA	0x1
  0B9A    1903    SZB	0x3,2
  0B9B    2B86    JP	0x386
  0B9C    3A03    XORIA	0x3
  0B9D    1903    SZB	0x3,2
  0B9E    2B89    JP	0x389
  0B9F    2BB0    JP	0x3B0
137:              				{
138:              					SHOW_LIGHT_OFF();
139:              				}
140:              				else
141:              				{
142:              					SHOW_LIGHT_ON();
143:              				}
144:              			}					
145:              			break;
146:              		
147:              	}
148:              	switch(LED1_State)
149:              	{
150:              		case LED_OFF: LED1_OFF();
  0BA0    14A5    SETB	0x25,1
151:              			break;
  0BA1    2BCD    JP	0x3CD
152:              		case LED_ON: LED1_ON();
  0BA2    10A5    CLRB	0x25,1
153:              			break;
  0BA3    2BCD    JP	0x3CD
154:              		case LED_Flash: 
155:              			if(LED_Flash_HZ>=LED_FLASH_HZ)
  0BA4    307D    LDIA	0x7D
  0BA5    027B    SUBA	0x7B
  0BA6    1C03    SNZB	0x3,0
  0BA7    2BCD    JP	0x3CD
156:              			{
157:              				if(LED1_Flash_Times<UINT8_MAX)
  0BA8    0843    LD	A,0x43
  0BA9    3AFF    XORIA	0xFF
  0BAA    1903    SZB	0x3,2
  0BAB    2BAD    JP	0x3AD
158:              					LED1_Flash_Times++;
  0BAC    0AC3    INCR	0x43
159:              								
160:              				if(LED_Flash_Bool)
  0BAD    1AF2    SZB	0x72,5
  0BAE    2BA0    JP	0x3A0
  0BAF    2BA2    JP	0x3A2
  0BB0    0844    LD	A,0x44
  0BB1    3A00    XORIA	0x0
  0BB2    1903    SZB	0x3,2
  0BB3    2BA0    JP	0x3A0
  0BB4    3A01    XORIA	0x1
  0BB5    1903    SZB	0x3,2
  0BB6    2BA2    JP	0x3A2
  0BB7    3A03    XORIA	0x3
  0BB8    1903    SZB	0x3,2
  0BB9    2BA4    JP	0x3A4
  0BBA    2BCD    JP	0x3CD
161:              				{
162:              					LED1_OFF();
163:              				}
164:              				else
165:              				{
166:              					LED1_ON();
167:              				}
168:              			}					
169:              			break;
170:              		
171:              	}
172:              	switch(LED2_State)
173:              	{
174:              		case LED_OFF: LED2_OFF();
  0BBB    1283    CLRB	0x3,5
  0BBC    1425    SETB	0x25,0
175:              			break;
  0BBD    2BEA    JP	0x3EA
176:              		case LED_ON: LED2_ON();
  0BBE    1283    CLRB	0x3,5
  0BBF    1025    CLRB	0x25,0
177:              			break;
  0BC0    2BEA    JP	0x3EA
  0BC1    307D    LDIA	0x7D
  0BC2    027B    SUBA	0x7B
  0BC3    1C03    SNZB	0x3,0
  0BC4    2BEA    JP	0x3EA
178:              		case LED_Flash: if(LED_Flash_HZ>=LED_FLASH_HZ)
179:              						{
180:              							if(LED2_Flash_Times<UINT8_MAX)
  0BC5    1683    SETB	0x3,5
  0BC6    0861    LD	A,0x61
  0BC7    3AFF    XORIA	0xFF
  0BC8    1D03    SNZB	0x3,2
181:              								LED2_Flash_Times++;
  0BC9    0AE1    INCR	0x61
182:              								
183:              							if(LED_Flash_Bool)
  0BCA    1AF2    SZB	0x72,5
  0BCB    2BBB    JP	0x3BB
  0BCC    2BBE    JP	0x3BE
  0BCD    0845    LD	A,0x45
  0BCE    3A00    XORIA	0x0
  0BCF    1903    SZB	0x3,2
  0BD0    2BBB    JP	0x3BB
  0BD1    3A01    XORIA	0x1
  0BD2    1903    SZB	0x3,2
  0BD3    2BBE    JP	0x3BE
  0BD4    3A03    XORIA	0x3
  0BD5    1903    SZB	0x3,2
  0BD6    2BC1    JP	0x3C1
  0BD7    2BEA    JP	0x3EA
184:              							{
185:              								LED2_OFF();
186:              							}
187:              							else
188:              							{
189:              								LED2_ON();
190:              							}
191:              						}
192:              			break;
193:              	}
194:              	switch(LED3_State)
195:              	{
196:              		case LED_OFF: LED3_OFF();
  0BD8    1283    CLRB	0x3,5
  0BD9    16A5    SETB	0x25,5
197:              			break;
  0BDA    2C07    JP	0x407
198:              		case LED_ON: LED3_ON();
  0BDB    1283    CLRB	0x3,5
  0BDC    12A5    CLRB	0x25,5
199:              			break;
  0BDD    2C07    JP	0x407
  0BDE    307D    LDIA	0x7D
  0BDF    027B    SUBA	0x7B
  0BE0    1C03    SNZB	0x3,0
  0BE1    2C07    JP	0x407
200:              		case LED_Flash: if(LED_Flash_HZ>=LED_FLASH_HZ)
201:              						{
202:              							if(LED3_Flash_Times<UINT8_MAX)
  0BE2    1683    SETB	0x3,5
  0BE3    0862    LD	A,0x62
  0BE4    3AFF    XORIA	0xFF
  0BE5    1D03    SNZB	0x3,2
203:              								LED3_Flash_Times++;
  0BE6    0AE2    INCR	0x62
204:              								
205:              							if(LED_Flash_Bool)
  0BE7    1AF2    SZB	0x72,5
  0BE8    2BD8    JP	0x3D8
  0BE9    2BDB    JP	0x3DB
  0BEA    0846    LD	A,0x46
  0BEB    3A00    XORIA	0x0
  0BEC    1903    SZB	0x3,2
  0BED    2BD8    JP	0x3D8
  0BEE    3A01    XORIA	0x1
  0BEF    1903    SZB	0x3,2
  0BF0    2BDB    JP	0x3DB
  0BF1    3A03    XORIA	0x3
  0BF2    1903    SZB	0x3,2
  0BF3    2BDE    JP	0x3DE
  0BF4    2C07    JP	0x407
206:              							{
207:              								LED3_OFF();
208:              							}
209:              							else
210:              							{
211:              								LED3_ON();
212:              							}
213:              						}
214:              			break;
215:              	}
216:              	switch(LED4_State)
217:              	{
218:              		case LED_OFF: LED4_OFF();
  0BF5    1283    CLRB	0x3,5
  0BF6    1625    SETB	0x25,4
219:              			break;
  0BF7    2C2F    JP	0x42F
220:              		case LED_ON: LED4_ON();
  0BF8    1283    CLRB	0x3,5
  0BF9    1225    CLRB	0x25,4
221:              			break;
  0BFA    2C2F    JP	0x42F
  0BFB    307D    LDIA	0x7D
  0BFC    027B    SUBA	0x7B
  0BFD    1C03    SNZB	0x3,0
  0BFE    2C2F    JP	0x42F
222:              		case LED_Flash: if(LED_Flash_HZ>=LED_FLASH_HZ)
223:              						{
224:              							if(LED4_Flash_Times<UINT8_MAX)
  0BFF    1683    SETB	0x3,5
  0C00    0863    LD	A,0x63
  0C01    3AFF    XORIA	0xFF
  0C02    1D03    SNZB	0x3,2
225:              								LED4_Flash_Times++;
  0C03    0AE3    INCR	0x63
226:              								
227:              							if(LED_Flash_Bool)
  0C04    1AF2    SZB	0x72,5
  0C05    2BF5    JP	0x3F5
  0C06    2BF8    JP	0x3F8
  0C07    0847    LD	A,0x47
  0C08    3A00    XORIA	0x0
  0C09    1903    SZB	0x3,2
  0C0A    2BF5    JP	0x3F5
  0C0B    3A01    XORIA	0x1
  0C0C    1903    SZB	0x3,2
  0C0D    2BF8    JP	0x3F8
  0C0E    3A03    XORIA	0x3
  0C0F    1903    SZB	0x3,2
  0C10    2BFB    JP	0x3FB
  0C11    2C2F    JP	0x42F
228:              							{
229:              								LED4_OFF();
230:              							}
231:              							else
232:              							{
233:              								LED4_ON();
234:              							}
235:              						}
236:              			break;
237:              	}
238:              	switch(LED5_State)
239:              	{
240:              		case LED_OFF: LED5_OFF();
  0C12    1283    CLRB	0x3,5
  0C13    15A5    SETB	0x25,3
241:              			break;
  0C14    2C5A    JP	0x45A
242:              		case LED_ON: LED5_ON();
  0C15    1283    CLRB	0x3,5
  0C16    11A5    CLRB	0x25,3
243:              			break;
  0C17    2C5A    JP	0x45A
  0C18    307D    LDIA	0x7D
  0C19    027B    SUBA	0x7B
  0C1A    1C03    SNZB	0x3,0
  0C1B    2C5A    JP	0x45A
244:              		case LED_Flash:if(LED_Flash_HZ>=LED_FLASH_HZ)
245:              						{
246:              							if(LED5_Flash_Times<UINT8_MAX)
  0C1C    1683    SETB	0x3,5
  0C1D    0864    LD	A,0x64
  0C1E    3AFF    XORIA	0xFF
  0C1F    1D03    SNZB	0x3,2
247:              								LED5_Flash_Times++;
  0C20    0AE4    INCR	0x64
248:              								
249:              							if(LED_Flash_Bool)
  0C21    1AF2    SZB	0x72,5
  0C22    2C12    JP	0x412
  0C23    2C15    JP	0x415
250:              							{
251:              								LED5_OFF();
252:              							}
253:              							else
254:              							{
255:              								LED5_ON();
256:              							}
257:              						}
258:              			break;
259:              		case LED_ON_TIME:
260:              						LED5_ON();
  0C24    11A5    CLRB	0x25,3
261:              						if(LED5_On_Times<UINT16_MAX) 
  0C25    1683    SETB	0x3,5
  0C26    0A33    INCA	0x33
  0C27    1903    SZB	0x3,2
  0C28    0A34    INCA	0x34
  0C29    1903    SZB	0x3,2
  0C2A    2C5A    JP	0x45A
262:              							LED5_On_Times++;
  0C2B    0AB3    INCR	0x33
  0C2C    1903    SZB	0x3,2
  0C2D    0AB4    INCR	0x34
  0C2E    2C5A    JP	0x45A
  0C2F    0848    LD	A,0x48
  0C30    3A00    XORIA	0x0
  0C31    1903    SZB	0x3,2
  0C32    2C12    JP	0x412
  0C33    3A01    XORIA	0x1
  0C34    1903    SZB	0x3,2
  0C35    2C15    JP	0x415
  0C36    3A03    XORIA	0x3
  0C37    1903    SZB	0x3,2
  0C38    2C18    JP	0x418
  0C39    3A01    XORIA	0x1
  0C3A    1903    SZB	0x3,2
  0C3B    2C24    JP	0x424
  0C3C    2C5A    JP	0x45A
263:              				
264:              			break;
265:              	}
266:              	switch(LED6_State)
267:              	{
268:              		case LED_OFF: LED6_OFF();
  0C3D    1283    CLRB	0x3,5
  0C3E    1525    SETB	0x25,2
269:              			break;
  0C3F    2C7B    JP	0x47B
270:              		case LED_ON: LED6_ON();
  0C40    1283    CLRB	0x3,5
  0C41    1125    CLRB	0x25,2
271:              			break;
  0C42    2C7B    JP	0x47B
  0C43    307D    LDIA	0x7D
  0C44    027B    SUBA	0x7B
  0C45    1C03    SNZB	0x3,0
  0C46    2C7B    JP	0x47B
272:              		case LED_Flash: if(LED_Flash_HZ>=LED_FLASH_HZ)
273:              						{
274:              							if(LED6_Flash_Times<UINT8_MAX)
  0C47    1683    SETB	0x3,5
  0C48    0865    LD	A,0x65
  0C49    3AFF    XORIA	0xFF
  0C4A    1D03    SNZB	0x3,2
275:              								LED6_Flash_Times++;
  0C4B    0AE5    INCR	0x65
276:              								
277:              							if(LED_Flash_Bool)
  0C4C    1AF2    SZB	0x72,5
  0C4D    2C3D    JP	0x43D
  0C4E    2C40    JP	0x440
278:              							{
279:              								LED6_OFF();
280:              							}
281:              							else
282:              							{
283:              								LED6_ON();
284:              							}
285:              						}
286:              			break;
287:              		case LED_ON_TIME:
288:              						LED6_ON();
  0C4F    1125    CLRB	0x25,2
289:              						if(LED6_On_Times<UINT16_MAX) 
  0C50    1683    SETB	0x3,5
  0C51    0A35    INCA	0x35
  0C52    1903    SZB	0x3,2
  0C53    0A36    INCA	0x36
  0C54    1903    SZB	0x3,2
  0C55    2C7B    JP	0x47B
290:              						{
291:              							LED6_On_Times++;
  0C56    0AB5    INCR	0x35
  0C57    1903    SZB	0x3,2
  0C58    0AB6    INCR	0x36
  0C59    2C7B    JP	0x47B
  0C5A    1283    CLRB	0x3,5
  0C5B    0849    LD	A,0x49
  0C5C    3A00    XORIA	0x0
  0C5D    1903    SZB	0x3,2
  0C5E    2C3D    JP	0x43D
  0C5F    3A01    XORIA	0x1
  0C60    1903    SZB	0x3,2
  0C61    2C40    JP	0x440
  0C62    3A03    XORIA	0x3
  0C63    1903    SZB	0x3,2
  0C64    2C43    JP	0x443
  0C65    3A01    XORIA	0x1
  0C66    1903    SZB	0x3,2
  0C67    2C4F    JP	0x44F
  0C68    2C7B    JP	0x47B
292:              				
293:              						}
294:              			break;
295:              	}
296:              	switch(LED7_State)
297:              	{
298:              		case LED_OFF: LED7_OFF();
  0C69    1283    CLRB	0x3,5
  0C6A    16A6    SETB	0x26,5
299:              			break;
  0C6B    2C99    JP	0x499
300:              		case LED_ON: LED7_ON();
  0C6C    1283    CLRB	0x3,5
  0C6D    12A6    CLRB	0x26,5
301:              			break;
  0C6E    2C99    JP	0x499
  0C6F    307D    LDIA	0x7D
  0C70    027B    SUBA	0x7B
  0C71    1C03    SNZB	0x3,0
  0C72    2C99    JP	0x499
302:              		case LED_Flash: if(LED_Flash_HZ>=LED_FLASH_HZ)
303:              						{
304:              							if(LED7_Flash_Times<UINT8_MAX)
  0C73    1683    SETB	0x3,5
  0C74    0866    LD	A,0x66
  0C75    3AFF    XORIA	0xFF
  0C76    1D03    SNZB	0x3,2
305:              								LED7_Flash_Times++;
  0C77    0AE6    INCR	0x66
306:              								
307:              							if(LED_Flash_Bool)
  0C78    1AF2    SZB	0x72,5
  0C79    2C69    JP	0x469
  0C7A    2C6C    JP	0x46C
  0C7B    1283    CLRB	0x3,5
  0C7C    084A    LD	A,0x4A
  0C7D    3A00    XORIA	0x0
  0C7E    1903    SZB	0x3,2
  0C7F    2C69    JP	0x469
  0C80    3A01    XORIA	0x1
  0C81    1903    SZB	0x3,2
  0C82    2C6C    JP	0x46C
  0C83    3A03    XORIA	0x3
  0C84    1903    SZB	0x3,2
  0C85    2C6F    JP	0x46F
  0C86    2C99    JP	0x499
308:              							{
309:              								LED7_OFF();
310:              							}
311:              							else
312:              							{
313:              								LED7_ON();
314:              							}
315:              						}
316:              			break;
317:              	}
318:              	switch(LED8_State)
319:              	{
320:              		case LED_OFF: LED8_OFF();
  0C87    1283    CLRB	0x3,5
  0C88    1626    SETB	0x26,4
321:              			break;
  0C89    2CB6    JP	0x4B6
322:              		case LED_ON: LED8_ON();
  0C8A    1283    CLRB	0x3,5
  0C8B    1226    CLRB	0x26,4
323:              			break;
  0C8C    2CB6    JP	0x4B6
  0C8D    307D    LDIA	0x7D
  0C8E    027B    SUBA	0x7B
  0C8F    1C03    SNZB	0x3,0
  0C90    2CB6    JP	0x4B6
324:              		case LED_Flash: if(LED_Flash_HZ>=LED_FLASH_HZ)
325:              						{
326:              							if(LED8_Flash_Times<UINT8_MAX)
  0C91    1683    SETB	0x3,5
  0C92    0867    LD	A,0x67
  0C93    3AFF    XORIA	0xFF
  0C94    1D03    SNZB	0x3,2
327:              								LED8_Flash_Times++;
  0C95    0AE7    INCR	0x67
328:              								
329:              							if(LED_Flash_Bool)
  0C96    1AF2    SZB	0x72,5
  0C97    2C87    JP	0x487
  0C98    2C8A    JP	0x48A
  0C99    084B    LD	A,0x4B
  0C9A    3A00    XORIA	0x0
  0C9B    1903    SZB	0x3,2
  0C9C    2C87    JP	0x487
  0C9D    3A01    XORIA	0x1
  0C9E    1903    SZB	0x3,2
  0C9F    2C8A    JP	0x48A
  0CA0    3A03    XORIA	0x3
  0CA1    1903    SZB	0x3,2
  0CA2    2C8D    JP	0x48D
  0CA3    2CB6    JP	0x4B6
330:              							{
331:              								LED8_OFF();
332:              							}
333:              							else
334:              							{
335:              								LED8_ON();
336:              							}
337:              						}
338:              			break;
339:              	}
340:              	switch(LED9_State)
341:              	{
342:              		case LED_OFF: LED9_OFF();
  0CA4    1283    CLRB	0x3,5
  0CA5    15A6    SETB	0x26,3
343:              			break;
  0CA6    2CD3    JP	0x4D3
344:              		case LED_ON: LED9_ON();
  0CA7    1283    CLRB	0x3,5
  0CA8    11A6    CLRB	0x26,3
345:              			break;
  0CA9    2CD3    JP	0x4D3
  0CAA    307D    LDIA	0x7D
  0CAB    027B    SUBA	0x7B
  0CAC    1C03    SNZB	0x3,0
  0CAD    2CD3    JP	0x4D3
346:              		case LED_Flash: if(LED_Flash_HZ>=LED_FLASH_HZ)
347:              						{
348:              							if(LED9_Flash_Times<UINT8_MAX)
  0CAE    1683    SETB	0x3,5
  0CAF    0868    LD	A,0x68
  0CB0    3AFF    XORIA	0xFF
  0CB1    1D03    SNZB	0x3,2
349:              								LED9_Flash_Times++;
  0CB2    0AE8    INCR	0x68
350:              								
351:              							if(LED_Flash_Bool)
  0CB3    1AF2    SZB	0x72,5
  0CB4    2CA4    JP	0x4A4
  0CB5    2CA7    JP	0x4A7
  0CB6    084C    LD	A,0x4C
  0CB7    3A00    XORIA	0x0
  0CB8    1903    SZB	0x3,2
  0CB9    2CA4    JP	0x4A4
  0CBA    3A01    XORIA	0x1
  0CBB    1903    SZB	0x3,2
  0CBC    2CA7    JP	0x4A7
  0CBD    3A03    XORIA	0x3
  0CBE    1903    SZB	0x3,2
  0CBF    2CAA    JP	0x4AA
  0CC0    2CD3    JP	0x4D3
352:              							{
353:              								LED9_OFF();
354:              							}
355:              							else
356:              							{
357:              								LED9_ON();
358:              							}
359:              						}
360:              			break;
361:              	}
362:              	switch(LED10_State)
363:              	{
364:              		case LED_OFF: LED10_OFF();
  0CC1    1283    CLRB	0x3,5
  0CC2    1526    SETB	0x26,2
365:              			break;
  0CC3    2CF0    JP	0x4F0
366:              		case LED_ON: LED10_ON();
  0CC4    1283    CLRB	0x3,5
  0CC5    1126    CLRB	0x26,2
367:              			break;
  0CC6    2CF0    JP	0x4F0
  0CC7    307D    LDIA	0x7D
  0CC8    027B    SUBA	0x7B
  0CC9    1C03    SNZB	0x3,0
  0CCA    2CF0    JP	0x4F0
368:              		case LED_Flash: if(LED_Flash_HZ>=LED_FLASH_HZ)
369:              						{
370:              							if(LED10_Flash_Times<UINT8_MAX)
  0CCB    1683    SETB	0x3,5
  0CCC    085D    LD	A,0x5D
  0CCD    3AFF    XORIA	0xFF
  0CCE    1D03    SNZB	0x3,2
371:              								LED10_Flash_Times++;
  0CCF    0ADD    INCR	0x5D
372:              								
373:              							if(LED_Flash_Bool)
  0CD0    1AF2    SZB	0x72,5
  0CD1    2CC1    JP	0x4C1
  0CD2    2CC4    JP	0x4C4
  0CD3    0841    LD	A,0x41
  0CD4    3A00    XORIA	0x0
  0CD5    1903    SZB	0x3,2
  0CD6    2CC1    JP	0x4C1
  0CD7    3A01    XORIA	0x1
  0CD8    1903    SZB	0x3,2
  0CD9    2CC4    JP	0x4C4
  0CDA    3A03    XORIA	0x3
  0CDB    1903    SZB	0x3,2
  0CDC    2CC7    JP	0x4C7
  0CDD    2CF0    JP	0x4F0
374:              							{
375:              								LED10_OFF();
376:              							}
377:              							else
378:              							{
379:              								LED10_ON();
380:              							}
381:              						}
382:              			break;
383:              	}
384:              	switch(LED11_State)
385:              	{
386:              		case LED_OFF: LED11_OFF();
  0CDE    1283    CLRB	0x3,5
  0CDF    14A6    SETB	0x26,1
387:              			break;
  0CE0    2D0D    JP	0x50D
388:              		case LED_ON: LED11_ON();
  0CE1    1283    CLRB	0x3,5
  0CE2    10A6    CLRB	0x26,1
389:              			break;
  0CE3    2D0D    JP	0x50D
  0CE4    307D    LDIA	0x7D
  0CE5    027B    SUBA	0x7B
  0CE6    1C03    SNZB	0x3,0
  0CE7    2D0D    JP	0x50D
390:              		case LED_Flash: if(LED_Flash_HZ>=LED_FLASH_HZ)
391:              						{
392:              							if(LED11_Flash_Times<UINT8_MAX)
  0CE8    1683    SETB	0x3,5
  0CE9    085E    LD	A,0x5E
  0CEA    3AFF    XORIA	0xFF
  0CEB    1D03    SNZB	0x3,2
393:              								LED11_Flash_Times++;
  0CEC    0ADE    INCR	0x5E
394:              								
395:              							if(LED_Flash_Bool)
  0CED    1AF2    SZB	0x72,5
  0CEE    2CDE    JP	0x4DE
  0CEF    2CE1    JP	0x4E1
  0CF0    0842    LD	A,0x42
  0CF1    3A00    XORIA	0x0
  0CF2    1903    SZB	0x3,2
  0CF3    2CDE    JP	0x4DE
  0CF4    3A01    XORIA	0x1
  0CF5    1903    SZB	0x3,2
  0CF6    2CE1    JP	0x4E1
  0CF7    3A03    XORIA	0x3
  0CF8    1903    SZB	0x3,2
  0CF9    2CE4    JP	0x4E4
  0CFA    2D0D    JP	0x50D
396:              							{
397:              								LED11_OFF();
398:              							}
399:              							else
400:              							{
401:              								LED11_ON();
402:              							}
403:              						}
404:              			break;
405:              	}
406:              	switch(LED12_State)
407:              	{
408:              		case LED_OFF: LED12_OFF();
  0CFB    1283    CLRB	0x3,5
  0CFC    1426    SETB	0x26,0
409:              			break;
  0CFD    2D19    JP	0x519
410:              		case LED_ON: LED12_ON();
  0CFE    1283    CLRB	0x3,5
  0CFF    1026    CLRB	0x26,0
411:              			break;
  0D00    2D19    JP	0x519
  0D01    307D    LDIA	0x7D
  0D02    027B    SUBA	0x7B
  0D03    1C03    SNZB	0x3,0
  0D04    2D19    JP	0x519
412:              		case LED_Flash: if(LED_Flash_HZ>=LED_FLASH_HZ)
413:              						{
414:              							if(LED12_Flash_Times<UINT8_MAX)
  0D05    085F    LD	A,0x5F
  0D06    3AFF    XORIA	0xFF
  0D07    1903    SZB	0x3,2
  0D08    2D0A    JP	0x50A
415:              								LED12_Flash_Times++;
  0D09    0ADF    INCR	0x5F
416:              								
417:              							if(LED_Flash_Bool)
  0D0A    1AF2    SZB	0x72,5
  0D0B    2CFB    JP	0x4FB
  0D0C    2CFE    JP	0x4FE
  0D0D    1683    SETB	0x3,5
  0D0E    0860    LD	A,0x60
  0D0F    3A00    XORIA	0x0
  0D10    1903    SZB	0x3,2
  0D11    2CFB    JP	0x4FB
  0D12    3A01    XORIA	0x1
  0D13    1903    SZB	0x3,2
  0D14    2CFE    JP	0x4FE
  0D15    3A03    XORIA	0x3
  0D16    1903    SZB	0x3,2
  0D17    2D01    JP	0x501
  0D18    2D19    JP	0x519
418:              							{
419:              								LED12_OFF();
420:              							}
421:              							else
422:              							{
423:              								LED12_ON();
424:              							}
425:              						}
426:              			break;
427:              	}
428:              	if(LED_Flash_HZ++>=LED_FLASH_HZ)
  0D19    307E    LDIA	0x7E
  0D1A    0AFB    INCR	0x7B
  0D1B    027B    SUBA	0x7B
  0D1C    1C03    SNZB	0x3,0
  0D1D    0008    RET
  0D1E    3020    LDIA	0x20
429:              	{
430:              		LED_Flash_HZ=0;
  0D1F    01FB    CLR	0x7B
431:              		LED_Flash_Bool=!LED_Flash_Bool;
  0D20    06F2    XORR	0x72
  0D21    0008    RET
432:              	}
433:              	
434:              }
435:              
436:              
437:              void LCD_FState()
438:              {
439:              	switch(LCD_State)
  0787    2FEA    JP	0x7EA
440:              	{
441:              		/*case LCD_CLEAR:
442:              			display[0]=0X00;
443:              			display[1]=0X00;
444:              			display[2]=0X00;
445:              			display[3]=0X00;
446:              			display[4]=0x00;
447:              			break;	
448:              		case LCD_FULL:
449:              			display[0]=0XFF;
450:              			display[1]=0XFF;
451:              			display[2]=0XFF;
452:              			display[3]=0XFF;
453:              			display[4]=0xFF;
454:              			break;
455:              			*/
456:              		case LCD_NORMAL:
457:              			break;
458:              		
459:              		case LCD_FLASH:
460:              			if(++LCD_Flash_HZ>=LCD_FLASH_HZ)
  0788    307D    LDIA	0x7D
  0789    0AD7    INCR	0x57
  078A    0257    SUBA	0x57
  078B    1C03    SNZB	0x3,0
  078C    0008    RET
461:              			{
462:              					LCD_Flash_HZ=0;
  078D    01D7    CLR	0x57
463:              					if(LCD_HOUR_Flash_Times<UINT8_MAX)
  078E    0858    LD	A,0x58
  078F    3AFF    XORIA	0xFF
  0790    1903    SZB	0x3,2
  0791    2FA0    JP	0x7A0
464:              					{
465:              						LCD_HOUR_Flash_Times++;
  0792    0AD8    INCR	0x58
466:              						
467:              						if(LCD_Flash_Bool)
  0793    1E72    SNZB	0x72,4
  0794    2F99    JP	0x799
468:              						{
469:              							display[0]=0X00;
  0795    1283    CLRB	0x3,5
  0796    01A0    CLR	0x20
470:              							display[1]=0X00;
  0797    01A1    CLR	0x21
471:              						}
  0798    2FA0    JP	0x7A0
472:              						else
473:              						{
474:              							display[0]=Display_Temp[0];
  0799    0820    LD	A,0x20
  079A    1283    CLRB	0x3,5
  079B    00A0    LD	0x20,A
475:              							display[1]=Display_Temp[1];
  079C    1683    SETB	0x3,5
  079D    0821    LD	A,0x21
  079E    1283    CLRB	0x3,5
  079F    00A1    LD	0x21,A
476:              						}
477:              					}
478:              					
479:              				if(LCD_MINUTE_Flash_Times<UINT8_MAX)
  07A0    1683    SETB	0x3,5
  07A1    0859    LD	A,0x59
  07A2    3AFF    XORIA	0xFF
  07A3    1903    SZB	0x3,2
  07A4    2FB3    JP	0x7B3
480:              				{
481:              					LCD_MINUTE_Flash_Times++;
  07A5    0AD9    INCR	0x59
482:              					
483:              					if(LCD_Flash_Bool)
  07A6    1E72    SNZB	0x72,4
  07A7    2FAC    JP	0x7AC
484:              					{
485:              						display[2]=0X00;
  07A8    1283    CLRB	0x3,5
  07A9    01A2    CLR	0x22
486:              						display[3]=0X00;
  07AA    01A3    CLR	0x23
487:              						
488:              					}
  07AB    2FB3    JP	0x7B3
489:              					else
490:              					{
491:              						display[2]=Display_Temp[2];
  07AC    0822    LD	A,0x22
  07AD    1283    CLRB	0x3,5
  07AE    00A2    LD	0x22,A
492:              						display[3]=Display_Temp[3];
  07AF    1683    SETB	0x3,5
  07B0    0823    LD	A,0x23
  07B1    1283    CLRB	0x3,5
  07B2    00A3    LD	0x23,A
493:              					}	
494:              				}
495:              					
496:              				if(LCD_COL_Flash_Times<UINT8_MAX)
  07B3    1683    SETB	0x3,5
  07B4    0856    LD	A,0x56
  07B5    3AFF    XORIA	0xFF
  07B6    1903    SZB	0x3,2
  07B7    2FC0    JP	0x7C0
497:              				{	
498:              					LCD_COL_Flash_Times++;
  07B8    0AD6    INCR	0x56
499:              					if(LCD_Flash_Bool)
  07B9    1E72    SNZB	0x72,4
  07BA    2FBE    JP	0x7BE
500:              					{
501:              						ICO_COL_OFF();
  07BB    1283    CLRB	0x3,5
  07BC    11A4    CLRB	0x24,3
502:              					}
  07BD    2FC0    JP	0x7C0
503:              					else
504:              					{
505:              						ICO_COL_ON();
  07BE    1283    CLRB	0x3,5
  07BF    15A4    SETB	0x24,3
506:              					}
507:              				}
508:              					
509:              				if(LCD_TEMP_Flash_Times<UINT8_MAX)
  07C0    1683    SETB	0x3,5
  07C1    085B    LD	A,0x5B
  07C2    3AFF    XORIA	0xFF
  07C3    1903    SZB	0x3,2
  07C4    2FCD    JP	0x7CD
510:              				{	
511:              					LCD_TEMP_Flash_Times++;
  07C5    0ADB    INCR	0x5B
512:              					
513:              					if(LCD_Flash_Bool)
  07C6    1E72    SNZB	0x72,4
  07C7    2FCB    JP	0x7CB
514:              					{
515:              						ICO_TEMP_OFF();
  07C8    1283    CLRB	0x3,5
  07C9    1024    CLRB	0x24,0
516:              						
517:              					}
  07CA    2FCD    JP	0x7CD
518:              					else
519:              					{
520:              						ICO_TEMP_ON();					
  07CB    1283    CLRB	0x3,5
  07CC    1424    SETB	0x24,0
521:              					}
522:              				}
523:              					
524:              				if(LCD_TIMER_Flash_Times<UINT8_MAX)
  07CD    1683    SETB	0x3,5
  07CE    085C    LD	A,0x5C
  07CF    3AFF    XORIA	0xFF
  07D0    1903    SZB	0x3,2
  07D1    2FDA    JP	0x7DA
525:              				{	
526:              					LCD_TIMER_Flash_Times++;
  07D2    0ADC    INCR	0x5C
527:              					
528:              					if(LCD_Flash_Bool)
  07D3    1E72    SNZB	0x72,4
  07D4    2FD8    JP	0x7D8
529:              					{
530:              						ICO_TIMER_OFF();
  07D5    1283    CLRB	0x3,5
  07D6    10A4    CLRB	0x24,1
531:              						
532:              					}
  07D7    2FDA    JP	0x7DA
533:              					else
534:              					{
535:              						ICO_TIMER_ON();
  07D8    1283    CLRB	0x3,5
  07D9    14A4    SETB	0x24,1
536:              					}
537:              				}
538:              					
539:              				if(LCD_AUTO_Flash_Times<UINT8_MAX)
  07DA    1683    SETB	0x3,5
  07DB    0855    LD	A,0x55
  07DC    3AFF    XORIA	0xFF
  07DD    1903    SZB	0x3,2
  07DE    2FE7    JP	0x7E7
540:              				{	
541:              					LCD_AUTO_Flash_Times++;
  07DF    0AD5    INCR	0x55
542:              					
543:              					if(LCD_Flash_Bool)
  07E0    1E72    SNZB	0x72,4
  07E1    2FE5    JP	0x7E5
544:              					{
545:              						ICO_AUTO_OFF();
  07E2    1283    CLRB	0x3,5
  07E3    1124    CLRB	0x24,2
546:              					}
  07E4    2FE7    JP	0x7E7
547:              					else
548:              					{
549:              						ICO_AUTO_ON();
  07E5    1283    CLRB	0x3,5
  07E6    1524    SETB	0x24,2
550:              					}
551:              				}
552:              				
553:              				LCD_Flash_Bool=!LCD_Flash_Bool;
  07E7    3010    LDIA	0x10
  07E8    06F2    XORR	0x72
  07E9    0008    RET
  07EA    1683    SETB	0x3,5
  07EB    085A    LD	A,0x5A
  07EC    3A02    XORIA	0x2
  07ED    1903    SZB	0x3,2
  07EE    2FF3    JP	0x7F3
  07EF    3A07    XORIA	0x7
  07F0    1903    SZB	0x3,2
  07F1    2F88    JP	0x788
  07F2    2FF3    JP	0x7F3
  07F3    0008    RET
554:              			}
555:              			break;	
556:              	}
557:              }
558:              
559:              void HOT_BOTTOM_State_F()
560:              {
561:              	switch(HOT_BOTTOM_State)
562:              	{
563:              		case STATE_HOT_BOTTOM_OFF:
564:              			HOT_BOTTOM_OFF();
565:              			break;
566:              		case STATE_HOT_BOTTOM_ON:
567:              			HOT_BOTTOM_ON();
568:              			break;
569:              		case STATE_HOT_BOTTOM_ON_TIME:
570:              			HOT_BOTTOM_ON();		
571:              			if(++HOT_BOTTOM_ON_Times>=HOT_BOTTOM_ON_TIMES)
572:              			{
573:              				HOT_BOTTOM_ON_Times=0;
574:              				if(HOT_BOTTOM_ON_Time<UINT8_MAX)
575:              					HOT_BOTTOM_ON_Time++;
576:              			}
577:              			HOT_BOTTOM_OFF_Time=0;
578:              			break;
579:              		
580:              		case STATE_HOT_BOTTOM_OFF_TIME:
581:              			HOT_BOTTOM_OFF();		
582:              			if(++HOT_BOTTOM_OFF_Times>=HOT_BOTTOM_OFF_TIMES)
583:              			{
584:              				HOT_BOTTOM_OFF_Times=0;
585:              				if(HOT_BOTTOM_OFF_Time<UINT8_MAX)
586:              					HOT_BOTTOM_OFF_Time++;
587:              			}
588:              			HOT_BOTTOM_ON_Time=0;
589:              			break;
590:              		
591:              	}
592:              	
593:              }
594:              void HOT_MAJOR_State_F()
595:              {
596:              	switch(HOT_MAJOR_State)
  1487    2CC2    JP	0x4C2
597:              	{
598:              		case STATE_HOT_MAJOR_OFF:
599:              			HOT_MAJOR_OFF();
  1488    1305    CLRB	0x5,6
600:              			break;
  1489    0008    RET
601:              		case STATE_HOT_MAJOR_ON:
602:              			HOT_MAJOR_ON();
  148A    1705    SETB	0x5,6
603:              			break;
  148B    0008    RET
604:              		case STATE_HOT_MAJOR_ON_TIME:
605:              			HOT_MAJOR_ON();		
  148C    1705    SETB	0x5,6
606:              			if(++HOT_MAJOR_ON_Times>=HOT_MAJOR_ON_TIMES)
  148D    1683    SETB	0x3,5
  148E    0AAF    INCR	0x2F
  148F    1903    SZB	0x3,2
  1490    0AB0    INCR	0x30
  1491    3000    LDIA	0x0
  1492    0230    SUBA	0x30
  1493    30FA    LDIA	0xFA
  1494    1903    SZB	0x3,2
  1495    022F    SUBA	0x2F
  1496    1C03    SNZB	0x3,0
  1497    2CA4    JP	0x4A4
  1498    3000    LDIA	0x0
607:              			{
608:              				HOT_MAJOR_ON_Times=0;
  1499    01AF    CLR	0x2F
  149A    01B0    CLR	0x30
609:              				if(HOT_MAJOR_ON_Time<UINT8_MAX)
  149B    022E    SUBA	0x2E
  149C    30FF    LDIA	0xFF
  149D    1903    SZB	0x3,2
  149E    022D    SUBA	0x2D
  149F    1803    SZB	0x3,0
  14A0    2CA4    JP	0x4A4
610:              					HOT_MAJOR_ON_Time++;
  14A1    0AAD    INCR	0x2D
  14A2    1903    SZB	0x3,2
  14A3    0AAE    INCR	0x2E
611:              			}
612:              			HOT_MAJOR_OFF_Time=0;
  14A4    01A9    CLR	0x29
  14A5    01AA    CLR	0x2A
613:              			break;
  14A6    0008    RET
614:              		
615:              		case STATE_HOT_MAJOR_OFF_TIME:
616:              			HOT_MAJOR_OFF();		
  14A7    1305    CLRB	0x5,6
617:              			if(++HOT_MAJOR_OFF_Times>=HOT_MAJOR_OFF_TIMES)
  14A8    1683    SETB	0x3,5
  14A9    0AAB    INCR	0x2B
  14AA    1903    SZB	0x3,2
  14AB    0AAC    INCR	0x2C
  14AC    3000    LDIA	0x0
  14AD    022C    SUBA	0x2C
  14AE    30FA    LDIA	0xFA
  14AF    1903    SZB	0x3,2
  14B0    022B    SUBA	0x2B
  14B1    1C03    SNZB	0x3,0
  14B2    2CBF    JP	0x4BF
  14B3    3000    LDIA	0x0
618:              			{
619:              				HOT_MAJOR_OFF_Times=0;
  14B4    01AB    CLR	0x2B
  14B5    01AC    CLR	0x2C
620:              				if(HOT_MAJOR_OFF_Time<UINT8_MAX)
  14B6    022A    SUBA	0x2A
  14B7    30FF    LDIA	0xFF
  14B8    1903    SZB	0x3,2
  14B9    0229    SUBA	0x29
  14BA    1803    SZB	0x3,0
  14BB    2CBF    JP	0x4BF
621:              					HOT_MAJOR_OFF_Time++;
  14BC    0AA9    INCR	0x29
  14BD    1903    SZB	0x3,2
  14BE    0AAA    INCR	0x2A
622:              			}
623:              			HOT_MAJOR_ON_Time=0;
  14BF    01AD    CLR	0x2D
  14C0    01AE    CLR	0x2E
624:              			break;
  14C1    0008    RET
  14C2    1283    CLRB	0x3,5
  14C3    083D    LD	A,0x3D
  14C4    3A00    XORIA	0x0
  14C5    1903    SZB	0x3,2
  14C6    2C88    JP	0x488
  14C7    3A01    XORIA	0x1
  14C8    1903    SZB	0x3,2
  14C9    2C8A    JP	0x48A
  14CA    3A03    XORIA	0x3
  14CB    1903    SZB	0x3,2
  14CC    2C8C    JP	0x48C
  14CD    3A01    XORIA	0x1
  14CE    1903    SZB	0x3,2
  14CF    2CA7    JP	0x4A7
  14D0    2CD1    JP	0x4D1
  14D1    0008    RET
625:              		
626:              	}
627:              	
628:              }
629:              
630:              void Solenoid_State_F()
631:              {
632:              	switch(Solenoid_State)
  1440    2C77    JP	0x477
633:              	{
634:              		case STATE_SOLENOID_OFF:
635:              			SOLENOID_OFF();
  1441    1109    CLRB	0x9,2
636:              			break;
  1442    0008    RET
637:              		case STATE_SOLENOID_ON:
638:              			SOLENOID_ON();
  1443    1509    SETB	0x9,2
639:              			break;
  1444    0008    RET
640:              		case STATE_SOLENOID_ON_TIME:
641:              			SOLENOID_ON();		
  1445    1509    SETB	0x9,2
642:              			if(Solenoid_ON_Times++>SOLENOID_ON_TIMES)
  1446    1683    SETB	0x3,5
  1447    0AC5    INCR	0x45
  1448    1903    SZB	0x3,2
  1449    0AC6    INCR	0x46
  144A    3000    LDIA	0x0
  144B    0246    SUBA	0x46
  144C    30FC    LDIA	0xFC
  144D    1903    SZB	0x3,2
  144E    0245    SUBA	0x45
  144F    1C03    SNZB	0x3,0
  1450    2C5B    JP	0x45B
643:              			{
644:              				Solenoid_ON_Times=0;
  1451    01C5    CLR	0x45
  1452    01C6    CLR	0x46
645:              				if(Solenoid_ON_Time<UINT16_MAX)
  1453    0A43    INCA	0x43
  1454    1903    SZB	0x3,2
  1455    0A44    INCA	0x44
  1456    1903    SZB	0x3,2
  1457    2C5B    JP	0x45B
646:              					Solenoid_ON_Time++;
  1458    0AC3    INCR	0x43
  1459    1903    SZB	0x3,2
  145A    0AC4    INCR	0x44
647:              			}	
648:              			Solenoid_OFF_Time=0;
  145B    01BF    CLR	0x3F
  145C    01C0    CLR	0x40
649:              			break;
  145D    0008    RET
650:              		case STATE_SOLENOID_OFF_TIME:
651:              			SOLENOID_OFF();
  145E    1109    CLRB	0x9,2
652:              			if(++Solenoid_OFF_Times>=SOLENOID_OFF_TIMES)
  145F    1683    SETB	0x3,5
  1460    0AC1    INCR	0x41
  1461    1903    SZB	0x3,2
  1462    0AC2    INCR	0x42
  1463    3000    LDIA	0x0
  1464    0242    SUBA	0x42
  1465    30FA    LDIA	0xFA
  1466    1903    SZB	0x3,2
  1467    0241    SUBA	0x41
  1468    1C03    SNZB	0x3,0
  1469    2C74    JP	0x474
653:              			{
654:              				Solenoid_OFF_Times=0;
  146A    01C1    CLR	0x41
  146B    01C2    CLR	0x42
655:              				if(Solenoid_OFF_Time<UINT16_MAX)
  146C    0A3F    INCA	0x3F
  146D    1903    SZB	0x3,2
  146E    0A40    INCA	0x40
  146F    1903    SZB	0x3,2
  1470    2C74    JP	0x474
656:              					Solenoid_OFF_Time++;
  1471    0ABF    INCR	0x3F
  1472    1903    SZB	0x3,2
  1473    0AC0    INCR	0x40
657:              			}
658:              			
659:              			Solenoid_ON_Time=0;
  1474    01C3    CLR	0x43
  1475    01C4    CLR	0x44
660:              			break;
  1476    0008    RET
  1477    1283    CLRB	0x3,5
  1478    0854    LD	A,0x54
  1479    3A00    XORIA	0x0
  147A    1903    SZB	0x3,2
  147B    2C41    JP	0x441
  147C    3A01    XORIA	0x1
  147D    1903    SZB	0x3,2
  147E    2C43    JP	0x443
  147F    3A03    XORIA	0x3
  1480    1903    SZB	0x3,2
  1481    2C45    JP	0x445
  1482    3A01    XORIA	0x1
  1483    1903    SZB	0x3,2
  1484    2C5E    JP	0x45E
  1485    2C86    JP	0x486
  1486    0008    RET
661:              	}
662:              }
663:              void Motor_State_F()
664:              {
665:              	switch(MOTOR_State)
666:              	{
667:              		case STATE_MOTOR_OFF:
668:              			MOROT_OFF();
669:              			break;
670:              		case STATE_MOTOR_ON:
671:              			MOROT_ON();
672:              			break;
673:              		case STATE_MOTOR_ON_TIME:
674:              			MOROT_ON();		
675:              			if(++MOTOR_ON_Times>=MOTOR_ON_TIMES)
676:              			{
677:              				MOTOR_ON_Times=0;
678:              				if(MOTOR_ON_Time<UINT8_MAX)
679:              					MOTOR_ON_Time++;
680:              			}
681:              			MOTOR_OFF_Time=0;
682:              			break;
683:              		case STATE_MOTOR_OFF_TIME:
684:              			MOTOR_OFF();
685:              			if(++MOTOR_OFF_Times>=MOTOR_OFF_TIMES)
686:              			{
687:              				MOTOR_OFF_Times=0;
688:              				if(MOTOR_OFF_Time)
689:              					MOTOR_OFF_Time++;
690:              			}			
691:              			MOTOR_ON_Time=0;
692:              			break;
693:              	}
694:              }
695:              
696:              void Pattern(void)
697:              {
698:              	LED_Crt();
  0011    160A    SETB	0xA,4
  0012    118A    CLRB	0xA,3
  0013    25E9    CALL	0x5E9
  0014    120A    CLRB	0xA,4
  0015    118A    CLRB	0xA,3
699:              	switch(Pattern_State)
  0016    2DC7    JP	0x5C7
700:              	{
701:              		case POWER_ON_INIT: 				
702:              				Rbeep=1;	//蜂鸣器短叫一声
  0017    1283    CLRB	0x3,5
  0018    3005    LDIA	0x5
  0019    01D0    CLR	0x50
  001A    0AD0    INCR	0x50
703:              				LCD_State=LCD_FLASH; //LCD为闪烁状态			
  001B    1683    SETB	0x3,5
  001C    00DA    LD	0x5A,A
  001D    30BA    LDIA	0xBA
704:              				LCD_COL_Flash_Times=0;
  001E    01D6    CLR	0x56
705:              				LCD_AUTO_Flash_Times=0;
  001F    01D5    CLR	0x55
706:              				LCD_TIMER_Flash_Times=0;
  0020    01DC    CLR	0x5C
707:              				LCD_TEMP_Flash_Times=0;
  0021    01DB    CLR	0x5B
708:              				LCD_HOUR_Flash_Times=0;
  0022    01D8    CLR	0x58
709:              				LCD_MINUTE_Flash_Times=0;
  0023    01D9    CLR	0x59
710:              			    //LCD显示内容为00:00
711:              				Display_Temp[0]=LCDCode[0];
  0024    0084    LD	0x4,A
  0025    3091    LDIA	0x91
  0026    1283    CLRB	0x3,5
  0027    00FF    LD	0x7F,A
  0028    160A    SETB	0xA,4
  0029    118A    CLRB	0xA,3
  002A    2000    CALL	0x0
  002B    120A    CLRB	0xA,4
  002C    118A    CLRB	0xA,3
  002D    1683    SETB	0x3,5
  002E    00A0    LD	0x20,A
712:              				Display_Temp[1]=LCDCode[0];
  002F    272E    CALL	0x72E
  0030    160A    SETB	0xA,4
  0031    118A    CLRB	0xA,3
  0032    2000    CALL	0x0
  0033    120A    CLRB	0xA,4
  0034    118A    CLRB	0xA,3
  0035    1683    SETB	0x3,5
  0036    00A1    LD	0x21,A
713:              				Display_Temp[2]=LCDCode[0];
  0037    272E    CALL	0x72E
  0038    160A    SETB	0xA,4
  0039    118A    CLRB	0xA,3
  003A    2000    CALL	0x0
  003B    120A    CLRB	0xA,4
  003C    118A    CLRB	0xA,3
  003D    1683    SETB	0x3,5
  003E    00A2    LD	0x22,A
714:              				Display_Temp[3]=LCDCode[0];
  003F    272E    CALL	0x72E
  0040    160A    SETB	0xA,4
  0041    118A    CLRB	0xA,3
  0042    2000    CALL	0x0
  0043    120A    CLRB	0xA,4
  0044    118A    CLRB	0xA,3
  0045    1683    SETB	0x3,5
  0046    00A3    LD	0x23,A
715:              			
716:              				//默认温度
717:              				Water_Temp=95;
  0047    305F    LDIA	0x5F
  0048    1283    CLRB	0x3,5
  0049    00EF    LD	0x6F,A
718:              				bool_WaterTempChange=0;
  004A    12F3    CLRB	0x73,5
719:              				bool_TimeChange=0;
  004B    1273    CLRB	0x73,4
720:              				
721:              				WorkSecond=0;
  004C    01D8    CLR	0x58
722:              				WorkMinute=0;
  004D    01D7    CLR	0x57
723:              				//LED状态设置
724:              				//
725:              				Pattern_LED_Crt=LED_CRT_POWER_ON_INIT;
  004E    1683    SETB	0x3,5
  004F    01BB    CLR	0x3B
  0050    01BC    CLR	0x3C
726:              				BG_LED_ON_Time=0;
  0051    1283    CLRB	0x3,5
  0052    01B9    CLR	0x39
727:              				
728:              				Pattern_Work_Time=0;
  0053    1683    SETB	0x3,5
  0054    01BD    CLR	0x3D
  0055    01BE    CLR	0x3E
729:              				Solenoid_ON_Time=0;
  0056    01C3    CLR	0x43
  0057    01C4    CLR	0x44
730:              				Solenoid_OFF_Time=0;
  0058    01BF    CLR	0x3F
  0059    01C0    CLR	0x40
731:              				Pattern_Work_State=0;
  005A    01EA    CLR	0x6A
732:              				//按键值初始化
733:              				Regular=0;
  005B    1283    CLRB	0x3,5
  005C    01D2    CLR	0x52
734:              				Bold=0;
  005D    01BB    CLR	0x3B
735:              				Iced=0;
  005E    01BF    CLR	0x3F
736:              				Tea=0;
  005F    01D6    CLR	0x56
737:              				Add=0;
  0060    01B8    CLR	0x38
738:              				Reduce=0;
  0061    01D1    CLR	0x51
739:              				_80_z=0;
  0062    01DC    CLR	0x5C
740:              				_120_z=0;
  0063    01D9    CLR	0x59
741:              				_210_z=0;
  0064    01DA    CLR	0x5A
742:              				_420_z=0;
  0065    01DB    CLR	0x5B
743:              				Option=0;
  0066    01CF    CLR	0x4F
744:              				Start=0;
  0067    01D5    CLR	0x55
745:              				//按键锁定
746:              				Key_Regular_Lock=0;
747:              				Key_Bold_Lock=0;
748:              				Key_Iced_Lock=0;
749:              				Key_Tea_Lock=0;
750:              				Key_Add_Lock=1;
751:              				Key_Reduce_Lock=1;
752:              				Key_80_Z_Lock=0;
753:              				Key_120_Z_Lock=0;
754:              				Key_210_Z_Lock=0;
755:              				Key_420_Z_Lock=0;
  0068    26F1    CALL	0x6F1
  0069    120A    CLRB	0xA,4
  006A    118A    CLRB	0xA,3
756:              				Key_Option_Lock=0;
  006B    1371    CLRB	0x71,6
757:              				Key_Start_Lock=1;	
  006C    1572    SETB	0x72,2
758:              				//
759:              				
760:              				HOT_MAJOR_OFF();
  006D    1305    CLRB	0x5,6
761:              				HOT_MAJOR_State=STATE_HOT_MAJOR_OFF;
  006E    01BD    CLR	0x3D
762:              				HOT_BOTTOM_OFF();
  006F    1007    CLRB	0x7,0
763:              				MOTOR_OFF();
  0070    1385    CLRB	0x5,7
764:              				Solenoid_State=STATE_SOLENOID_OFF;
  0071    01D4    CLR	0x54
765:              	
766:              				Pattern_State=POWER_ON;	
  0072    1683    SETB	0x3,5
  0073    01E9    CLR	0x69
  0074    0AE9    INCR	0x69
  0075    301E    LDIA	0x1E
767:              		case POWER_ON:	
768:              				LCD_HOUR_Flash_Times=0;	//LCD前两位持续闪烁
  0076    01D8    CLR	0x58
  0077    01D9    CLR	0x59
769:              				LCD_MINUTE_Flash_Times=0;//LCD后两位持续闪烁
770:              				if(BG_LED_ON_Time>=30)  //LCD背光灯灭了(即30秒已到)
  0078    1283    CLRB	0x3,5
  0079    0239    SUBA	0x39
  007A    1C03    SNZB	0x3,0
  007B    2887    JP	0x87
771:              				{
772:              					ICO_TEMP_ON();
  007C    1424    SETB	0x24,0
773:              					ICO_TIMER_ON();
  007D    14A4    SETB	0x24,1
774:              					ICO_AUTO_ON();
  007E    1524    SETB	0x24,2
775:              					ICO_COL_ON();
  007F    15A4    SETB	0x24,3
  0080    30FF    LDIA	0xFF
776:              					BG_LED_State=LED_OFF;
  0081    01BA    CLR	0x3A
777:              					LCD_TEMP_Flash_Times=UINT8_MAX;	//LCD此图标不闪烁
  0082    1683    SETB	0x3,5
  0083    00DB    LD	0x5B,A
778:              					LCD_TIMER_Flash_Times=UINT8_MAX;//LCD此图标不闪烁
  0084    00DC    LD	0x5C,A
779:              					LCD_AUTO_Flash_Times=UINT8_MAX;	//LCD此图标不闪烁
  0085    00D5    LD	0x55,A
780:              					LCD_COL_Flash_Times=UINT8_MAX;//LCD此图标不闪烁
  0086    00D6    LD	0x56,A
781:              				}
782:              			if(Option) 
  0087    1283    CLRB	0x3,5
  0088    084F    LD	A,0x4F
  0089    1903    SZB	0x3,2
  008A    288E    JP	0x8E
783:              			{	
784:              				Pattern_State=OPTION_INIT;	
  008B    3004    LDIA	0x4
  008C    1683    SETB	0x3,5
  008D    00E9    LD	0x69,A
785:              			}
786:              			
787:              			if(Regular|Bold|Iced|Tea|_80_z|_120_z|_210_z|_420_z)
  008E    1283    CLRB	0x3,5
  008F    0852    LD	A,0x52
  0090    043B    ORA	0x3B
  0091    043F    ORA	0x3F
  0092    0456    ORA	0x56
  0093    045C    ORA	0x5C
  0094    0459    ORA	0x59
  0095    045A    ORA	0x5A
  0096    045B    ORA	0x5B
  0097    1903    SZB	0x3,2
  0098    0008    RET
788:              			{
789:              				Pattern_State=WAITING_WORK_ORDER_INIT;	
  0099    3002    LDIA	0x2
  009A    1683    SETB	0x3,5
  009B    00E9    LD	0x69,A
  009C    0008    RET
790:              			}
791:              			break;
792:              		case WAITING_WORK_ORDER_INIT:
793:              			
794:              			Pattern_LED_Crt=LED_CRT_OPTION_INIT;
  009D    3002    LDIA	0x2
  009E    00BB    LD	0x3B,A
  009F    3003    LDIA	0x3
  00A0    01BC    CLR	0x3C
795:              			Pattern_State=WAITING_WORK_ORDER;
  00A1    00E9    LD	0x69,A
796:              			Key_Option_Lock=1;	
  00A2    1771    SETB	0x71,6
797:              			break;
  00A3    0008    RET
798:              			
799:              		case WAITING_WORK_ORDER:
800:              			
801:              			//如果模式与流量已选择，允许START与OPTION按键操作
802:              			if((Regular|Bold|Iced|Tea)&&(_80_z|_120_z|_210_z|_420_z))
  00A4    1283    CLRB	0x3,5
  00A5    0852    LD	A,0x52
  00A6    043B    ORA	0x3B
  00A7    043F    ORA	0x3F
  00A8    0456    ORA	0x56
  00A9    1903    SZB	0x3,2
  00AA    28B3    JP	0xB3
  00AB    085C    LD	A,0x5C
  00AC    0459    ORA	0x59
  00AD    045A    ORA	0x5A
  00AE    045B    ORA	0x5B
  00AF    1903    SZB	0x3,2
  00B0    28B3    JP	0xB3
803:              			{
804:              				Key_Start_Lock=0;
  00B1    1172    CLRB	0x72,2
805:              				Key_Option_Lock=1;
  00B2    1771    SETB	0x71,6
806:              			}
807:              			
808:              			if(Option) Pattern_State=OPTION_INIT;
  00B3    084F    LD	A,0x4F
  00B4    1903    SZB	0x3,2
  00B5    28B9    JP	0xB9
  00B6    3004    LDIA	0x4
  00B7    1683    SETB	0x3,5
  00B8    00E9    LD	0x69,A
809:              			if(Start)  
  00B9    1283    CLRB	0x3,5
  00BA    0855    LD	A,0x55
  00BB    1903    SZB	0x3,2
  00BC    0008    RET
810:              			{
811:              				Pattern_State=WORKING_INIT;
  00BD    300A    LDIA	0xA
  00BE    1683    SETB	0x3,5
  00BF    00E9    LD	0x69,A
  00C0    0008    RET
812:              				
813:              			}
814:              			break;
815:              		case OPTION_INIT:
816:              			Pattern_LED_Crt=LED_CRT_OPTION_INIT;
  00C1    3002    LDIA	0x2
  00C2    00BB    LD	0x3B,A
  00C3    01BC    CLR	0x3C
817:              			//按键锁定
818:              			Key_Regular_Lock=1;
  00C4    14F2    SETB	0x72,1
819:              			Key_Bold_Lock=1;
  00C5    1671    SETB	0x71,4
820:              			Key_Iced_Lock=1;
  00C6    16F1    SETB	0x71,5
821:              			Key_Tea_Lock=1;
  00C7    15F2    SETB	0x72,3
822:              			Key_Add_Lock=0;
  00C8    11F1    CLRB	0x71,3
823:              			Key_Reduce_Lock=0;
  00C9    1072    CLRB	0x72,0
824:              			Key_80_Z_Lock=1;
  00CA    14F1    SETB	0x71,1
825:              			Key_120_Z_Lock=1;
  00CB    1770    SETB	0x70,6
826:              			Key_210_Z_Lock=1;
  00CC    17F0    SETB	0x70,7
827:              			Key_420_Z_Lock=1;
  00CD    1471    SETB	0x71,0
828:              			Key_Option_Lock=0;
  00CE    1371    CLRB	0x71,6
829:              			Key_Start_Lock=0;
  00CF    1172    CLRB	0x72,2
830:              			Start=0;
  00D0    1283    CLRB	0x3,5
  00D1    3005    LDIA	0x5
  00D2    01D5    CLR	0x55
831:              			Pattern_State=OPTION;	
  00D3    1683    SETB	0x3,5
  00D4    00E9    LD	0x69,A
832:              			break;
  00D5    0008    RET
833:              		case OPTION:
834:              			
835:              			if(Start) Option=0;
  00D6    1283    CLRB	0x3,5
  00D7    0855    LD	A,0x55
  00D8    1D03    SNZB	0x3,2
  00D9    01CF    CLR	0x4F
836:              			if(Option==0) Pattern_State=TEMP_TIMER_SUCCESS_INIT;
  00DA    08CF    TESTZ	0x4F
  00DB    1D03    SNZB	0x3,2
  00DC    28E0    JP	0xE0
  00DD    3006    LDIA	0x6
  00DE    1683    SETB	0x3,5
  00DF    00E9    LD	0x69,A
837:              				
838:              			LCD_COL_Flash_Times=UINT8_MAX;
  00E0    30FF    LDIA	0xFF
  00E1    1683    SETB	0x3,5
  00E2    00D6    LD	0x56,A
839:              			LCD_AUTO_Flash_Times=UINT8_MAX;
  00E3    00D5    LD	0x55,A
840:              			ICO_AUTO_OFF();
  00E4    1283    CLRB	0x3,5
  00E5    1124    CLRB	0x24,2
841:              			switch(Option)
  00E6    2AD9    JP	0x2D9
842:              			{
843:              				case HOUR:
844:              					LCD_MINUTE_Flash_Times=UINT8_MAX;
  00E7    30FF    LDIA	0xFF
  00E8    1683    SETB	0x3,5
  00E9    00D9    LD	0x59,A
845:              					LCD_TEMP_Flash_Times=UINT8_MAX;
  00EA    00DB    LD	0x5B,A
846:              					ICO_COL_ON();
  00EB    1283    CLRB	0x3,5
  00EC    15A4    SETB	0x24,3
847:              									
848:              					ICO_TEMP_OFF();
  00ED    1024    CLRB	0x24,0
849:              					
850:              					LCD_HOUR_Flash_Times=0;
  00EE    1683    SETB	0x3,5
  00EF    300A    LDIA	0xA
  00F0    01D8    CLR	0x58
851:              					Display_Temp[0]=LCDCode[Hour/10];
  00F1    1283    CLRB	0x3,5
  00F2    00DD    LD	0x5D,A
  00F3    01DE    CLR	0x5E
  00F4    083E    LD	A,0x3E
  00F5    00DF    LD	0x5F,A
  00F6    01E0    CLR	0x60
  00F7    1BDF    SZB	0x5F,7
  00F8    03E0    DECR	0x60
  00F9    25EF    CALL	0x5EF
  00FA    120A    CLRB	0xA,4
  00FB    118A    CLRB	0xA,3
  00FC    085D    LD	A,0x5D
  00FD    26A8    CALL	0x6A8
  00FE    160A    SETB	0xA,4
  00FF    118A    CLRB	0xA,3
  0100    2000    CALL	0x0
  0101    120A    CLRB	0xA,4
  0102    118A    CLRB	0xA,3
852:              					Display_Temp[1]=LCDCode[Hour%10];
  0103    2720    CALL	0x720
  0104    120A    CLRB	0xA,4
  0105    118A    CLRB	0xA,3
  0106    083E    LD	A,0x3E
  0107    00DF    LD	0x5F,A
  0108    01E0    CLR	0x60
  0109    1BDF    SZB	0x5F,7
  010A    03E0    DECR	0x60
  010B    2634    CALL	0x634
  010C    120A    CLRB	0xA,4
  010D    118A    CLRB	0xA,3
  010E    085D    LD	A,0x5D
  010F    26A8    CALL	0x6A8
  0110    160A    SETB	0xA,4
  0111    118A    CLRB	0xA,3
  0112    2000    CALL	0x0
  0113    120A    CLRB	0xA,4
  0114    118A    CLRB	0xA,3
  0115    1683    SETB	0x3,5
  0116    00A1    LD	0x21,A
853:              						
854:              					if(Key_Add_3S_ON|Key_Reduce_3S_ON)
  0117    1971    SZB	0x71,2
  0118    291B    JP	0x11B
  0119    1FF1    SNZB	0x71,7
  011A    2957    JP	0x157
855:              					{
856:              						LCD_HOUR_Flash_Times=UINT8_MAX;
  011B    30FF    LDIA	0xFF
  011C    00D8    LD	0x58,A
857:              						
858:              						if(Timer_3S_Times++>=TIMER_3S_TIMES)
  011D    2704    CALL	0x704
  011E    120A    CLRB	0xA,4
  011F    118A    CLRB	0xA,3
  0120    1903    SZB	0x3,2
  0121    024D    SUBA	0x4D
  0122    1C03    SNZB	0x3,0
  0123    296F    JP	0x16F
859:              						{
860:              							if(Key_Add_3S_ON)
  0124    1D71    SNZB	0x71,2
  0125    2929    JP	0x129
861:              							{
862:              								Hour+=TIMER_3S;
  0126    1283    CLRB	0x3,5
  0127    0ABE    INCR	0x3E
863:              							}
  0128    292B    JP	0x12B
864:              							else
865:              							Hour-=TIMER_3S;
  0129    1283    CLRB	0x3,5
  012A    03BE    DECR	0x3E
866:              							
867:              							if(Hour>23) Hour=0;
  012B    083E    LD	A,0x3E
  012C    3A80    XORIA	0x80
  012D    3E68    ADDIA	0x68
  012E    1803    SZB	0x3,0
  012F    01BE    CLR	0x3E
868:              							if(Hour<0) Hour=23;
  0130    1FBE    SNZB	0x3E,7
  0131    2934    JP	0x134
  0132    3017    LDIA	0x17
  0133    00BE    LD	0x3E,A
869:              					
870:              							Timer_3S_Times=0;
871:              							Key_Add_3S_ON=0;
872:              							Key_Reduce_3S_ON=0;
873:              							display[0]=LCDCode[Hour/10];
  0134    26CE    CALL	0x6CE
  0135    120A    CLRB	0xA,4
  0136    118A    CLRB	0xA,3
  0137    083E    LD	A,0x3E
  0138    00DF    LD	0x5F,A
  0139    01E0    CLR	0x60
  013A    1BDF    SZB	0x5F,7
  013B    03E0    DECR	0x60
  013C    25EF    CALL	0x5EF
  013D    120A    CLRB	0xA,4
  013E    118A    CLRB	0xA,3
  013F    085D    LD	A,0x5D
  0140    26A8    CALL	0x6A8
  0141    160A    SETB	0xA,4
  0142    118A    CLRB	0xA,3
  0143    2000    CALL	0x0
  0144    120A    CLRB	0xA,4
  0145    118A    CLRB	0xA,3
874:              							display[1]=LCDCode[Hour%10];						
  0146    26D8    CALL	0x6D8
  0147    120A    CLRB	0xA,4
  0148    118A    CLRB	0xA,3
  0149    1BDF    SZB	0x5F,7
  014A    03E0    DECR	0x60
  014B    2634    CALL	0x634
  014C    120A    CLRB	0xA,4
  014D    118A    CLRB	0xA,3
  014E    085D    LD	A,0x5D
  014F    26A8    CALL	0x6A8
  0150    160A    SETB	0xA,4
  0151    118A    CLRB	0xA,3
  0152    2000    CALL	0x0
  0153    120A    CLRB	0xA,4
  0154    118A    CLRB	0xA,3
  0155    00A1    LD	0x21,A
  0156    296F    JP	0x16F
875:              						}
876:              					}
877:              					else
878:              					if(Add|Reduce)
  0157    1283    CLRB	0x3,5
  0158    0838    LD	A,0x38
  0159    0451    ORA	0x51
  015A    1903    SZB	0x3,2
  015B    296F    JP	0x16F
879:              					{ 
880:              						if(Add) 
  015C    0838    LD	A,0x38
  015D    1903    SZB	0x3,2
  015E    2961    JP	0x161
881:              						{
882:              							Hour++;
  015F    0ABE    INCR	0x3E
883:              						}
  0160    2965    JP	0x165
884:              						else if(Reduce) 
  0161    0851    LD	A,0x51
  0162    1903    SZB	0x3,2
  0163    2965    JP	0x165
885:              						{
886:              							Hour--;
  0164    03BE    DECR	0x3E
887:              						}
888:              						if(Hour>23) Hour=0;
  0165    083E    LD	A,0x3E
  0166    3A80    XORIA	0x80
  0167    3E68    ADDIA	0x68
  0168    1803    SZB	0x3,0
  0169    01BE    CLR	0x3E
889:              						if(Hour<0) Hour=23;	
  016A    1FBE    SNZB	0x3E,7
  016B    296E    JP	0x16E
  016C    3017    LDIA	0x17
  016D    00BE    LD	0x3E,A
890:              						bool_TimeChange=1;					
  016E    1673    SETB	0x73,4
891:              					}
892:              		
893:              					display[2]=LCDCode[Minute/10];
  016F    300A    LDIA	0xA
  0170    270A    CALL	0x70A
  0171    120A    CLRB	0xA,4
  0172    118A    CLRB	0xA,3
  0173    1BDF    SZB	0x5F,7
  0174    03E0    DECR	0x60
  0175    25EF    CALL	0x5EF
  0176    120A    CLRB	0xA,4
  0177    118A    CLRB	0xA,3
  0178    085D    LD	A,0x5D
  0179    26A8    CALL	0x6A8
  017A    160A    SETB	0xA,4
  017B    118A    CLRB	0xA,3
  017C    2000    CALL	0x0
  017D    120A    CLRB	0xA,4
  017E    118A    CLRB	0xA,3
894:              					display[3]=LCDCode[Minute%10];
  017F    26E0    CALL	0x6E0
  0180    120A    CLRB	0xA,4
  0181    118A    CLRB	0xA,3
  0182    1BDF    SZB	0x5F,7
  0183    03E0    DECR	0x60
  0184    2634    CALL	0x634
  0185    120A    CLRB	0xA,4
  0186    118A    CLRB	0xA,3
  0187    085D    LD	A,0x5D
  0188    26A8    CALL	0x6A8
  0189    160A    SETB	0xA,4
  018A    118A    CLRB	0xA,3
  018B    2000    CALL	0x0
  018C    00A3    LD	0x23,A
895:              					
896:              					LCD_TIMER_Flash_Times=0;
  018D    1683    SETB	0x3,5
  018E    01DC    CLR	0x5C
897:              					break;
  018F    0008    RET
898:              				case MINUTE:
899:              					LCD_HOUR_Flash_Times=UINT8_MAX;
  0190    30FF    LDIA	0xFF
  0191    1683    SETB	0x3,5
  0192    00D8    LD	0x58,A
900:              
901:              					Display_Temp[2]=LCDCode[Minute/10];
  0193    300A    LDIA	0xA
  0194    270A    CALL	0x70A
  0195    120A    CLRB	0xA,4
  0196    118A    CLRB	0xA,3
  0197    1BDF    SZB	0x5F,7
  0198    03E0    DECR	0x60
  0199    25EF    CALL	0x5EF
  019A    120A    CLRB	0xA,4
  019B    118A    CLRB	0xA,3
  019C    085D    LD	A,0x5D
  019D    26A8    CALL	0x6A8
  019E    160A    SETB	0xA,4
  019F    118A    CLRB	0xA,3
  01A0    2000    CALL	0x0
  01A1    120A    CLRB	0xA,4
  01A2    118A    CLRB	0xA,3
  01A3    1683    SETB	0x3,5
  01A4    00A2    LD	0x22,A
902:              					Display_Temp[3]=LCDCode[Minute%10];
  01A5    300A    LDIA	0xA
  01A6    1283    CLRB	0x3,5
  01A7    00DD    LD	0x5D,A
  01A8    01DE    CLR	0x5E
  01A9    084E    LD	A,0x4E
  01AA    00DF    LD	0x5F,A
  01AB    01E0    CLR	0x60
  01AC    1BDF    SZB	0x5F,7
  01AD    03E0    DECR	0x60
  01AE    2634    CALL	0x634
  01AF    120A    CLRB	0xA,4
  01B0    118A    CLRB	0xA,3
  01B1    085D    LD	A,0x5D
  01B2    26A8    CALL	0x6A8
  01B3    160A    SETB	0xA,4
  01B4    118A    CLRB	0xA,3
  01B5    2000    CALL	0x0
  01B6    120A    CLRB	0xA,4
  01B7    118A    CLRB	0xA,3
  01B8    1683    SETB	0x3,5
  01B9    00A3    LD	0x23,A
903:              					LCD_MINUTE_Flash_Times=0;
  01BA    01D9    CLR	0x59
904:              					
905:              					
906:              					if(Key_Add_3S_ON|Key_Reduce_3S_ON)
  01BB    1971    SZB	0x71,2
  01BC    29BF    JP	0x1BF
  01BD    1FF1    SNZB	0x71,7
  01BE    29FB    JP	0x1FB
907:              					{
908:              						LCD_MINUTE_Flash_Times=UINT8_MAX;
  01BF    30FF    LDIA	0xFF
  01C0    00D9    LD	0x59,A
909:              						if(Timer_3S_Times++>=TIMER_3S_TIMES)
  01C1    2704    CALL	0x704
  01C2    120A    CLRB	0xA,4
  01C3    118A    CLRB	0xA,3
  01C4    1903    SZB	0x3,2
  01C5    024D    SUBA	0x4D
  01C6    1C03    SNZB	0x3,0
  01C7    2A0A    JP	0x20A
910:              						{
911:              							if(Key_Add_3S_ON)
  01C8    1D71    SNZB	0x71,2
  01C9    29CD    JP	0x1CD
912:              							{
913:              								Minute+=TIMER_3S;
  01CA    1283    CLRB	0x3,5
  01CB    0ACE    INCR	0x4E
914:              							}
  01CC    29CF    JP	0x1CF
915:              							else
916:              							Minute-=TIMER_3S;
  01CD    1283    CLRB	0x3,5
  01CE    03CE    DECR	0x4E
917:              							
918:              							if(Minute>59) Minute=0;
  01CF    084E    LD	A,0x4E
  01D0    3A80    XORIA	0x80
  01D1    3E44    ADDIA	0x44
  01D2    1803    SZB	0x3,0
  01D3    01CE    CLR	0x4E
919:              							if(Minute<0) Minute=59;
  01D4    1FCE    SNZB	0x4E,7
  01D5    29D8    JP	0x1D8
  01D6    303B    LDIA	0x3B
  01D7    00CE    LD	0x4E,A
920:              					
921:              							Timer_3S_Times=0;
922:              							Key_Add_3S_ON=0;
923:              							Key_Reduce_3S_ON=0;
924:              							display[2]=LCDCode[Minute/10];
  01D8    26CE    CALL	0x6CE
  01D9    120A    CLRB	0xA,4
  01DA    118A    CLRB	0xA,3
  01DB    084E    LD	A,0x4E
  01DC    00DF    LD	0x5F,A
  01DD    01E0    CLR	0x60
  01DE    1BDF    SZB	0x5F,7
  01DF    03E0    DECR	0x60
  01E0    25EF    CALL	0x5EF
  01E1    120A    CLRB	0xA,4
  01E2    118A    CLRB	0xA,3
  01E3    085D    LD	A,0x5D
  01E4    26A8    CALL	0x6A8
  01E5    160A    SETB	0xA,4
  01E6    118A    CLRB	0xA,3
  01E7    2000    CALL	0x0
  01E8    120A    CLRB	0xA,4
  01E9    118A    CLRB	0xA,3
925:              							display[3]=LCDCode[Minute%10];
  01EA    26E0    CALL	0x6E0
  01EB    120A    CLRB	0xA,4
  01EC    118A    CLRB	0xA,3
  01ED    1BDF    SZB	0x5F,7
  01EE    03E0    DECR	0x60
  01EF    2634    CALL	0x634
  01F0    120A    CLRB	0xA,4
  01F1    118A    CLRB	0xA,3
  01F2    085D    LD	A,0x5D
  01F3    26A8    CALL	0x6A8
  01F4    160A    SETB	0xA,4
  01F5    118A    CLRB	0xA,3
  01F6    2000    CALL	0x0
  01F7    120A    CLRB	0xA,4
  01F8    118A    CLRB	0xA,3
  01F9    00A3    LD	0x23,A
  01FA    2A0A    JP	0x20A
926:              						}
927:              					}
928:              					else 
929:              					if(Add|Reduce)
  01FB    1283    CLRB	0x3,5
  01FC    0838    LD	A,0x38
  01FD    0451    ORA	0x51
  01FE    1903    SZB	0x3,2
  01FF    2A0A    JP	0x20A
930:              					{
931:              						if(Add) Minute++;
  0200    0838    LD	A,0x38
  0201    1903    SZB	0x3,2
  0202    2A05    JP	0x205
  0203    0ACE    INCR	0x4E
  0204    2A09    JP	0x209
932:              						else 
933:              						if(Reduce) Minute--;
  0205    0851    LD	A,0x51
  0206    1903    SZB	0x3,2
  0207    2A09    JP	0x209
  0208    03CE    DECR	0x4E
934:              						bool_TimeChange=1;
  0209    1673    SETB	0x73,4
935:              					}
936:              								
937:              					if(Minute>59) Minute=0;
  020A    1283    CLRB	0x3,5
  020B    084E    LD	A,0x4E
  020C    3A80    XORIA	0x80
  020D    3E44    ADDIA	0x44
  020E    1803    SZB	0x3,0
  020F    01CE    CLR	0x4E
938:              					if(Minute<0) Minute=59;
  0210    1FCE    SNZB	0x4E,7
  0211    2A14    JP	0x214
  0212    303B    LDIA	0x3B
  0213    00CE    LD	0x4E,A
939:              					
940:              					display[0]=LCDCode[Hour/10];
  0214    2711    CALL	0x711
  0215    120A    CLRB	0xA,4
  0216    118A    CLRB	0xA,3
  0217    1BDF    SZB	0x5F,7
  0218    03E0    DECR	0x60
  0219    25EF    CALL	0x5EF
  021A    120A    CLRB	0xA,4
  021B    118A    CLRB	0xA,3
  021C    085D    LD	A,0x5D
  021D    26A8    CALL	0x6A8
  021E    160A    SETB	0xA,4
  021F    118A    CLRB	0xA,3
  0220    2000    CALL	0x0
  0221    120A    CLRB	0xA,4
  0222    118A    CLRB	0xA,3
941:              					display[1]=LCDCode[Hour%10];
  0223    26D8    CALL	0x6D8
  0224    120A    CLRB	0xA,4
  0225    118A    CLRB	0xA,3
  0226    1BDF    SZB	0x5F,7
  0227    03E0    DECR	0x60
  0228    2634    CALL	0x634
  0229    120A    CLRB	0xA,4
  022A    118A    CLRB	0xA,3
  022B    085D    LD	A,0x5D
  022C    26A8    CALL	0x6A8
  022D    160A    SETB	0xA,4
  022E    118A    CLRB	0xA,3
  022F    2000    CALL	0x0
  0230    00A1    LD	0x21,A
942:              
943:              					break;
  0231    0008    RET
944:              				case TEMP:
945:              					LCD_MINUTE_Flash_Times=UINT8_MAX;
  0232    30FF    LDIA	0xFF
  0233    1683    SETB	0x3,5
  0234    00D9    LD	0x59,A
946:              					LCD_TIMER_Flash_Times=UINT8_MAX;
  0235    00DC    LD	0x5C,A
947:              					display[2]=LCDCode[12];//显示C
  0236    30C6    LDIA	0xC6
  0237    0084    LD	0x4,A
  0238    3091    LDIA	0x91
  0239    1283    CLRB	0x3,5
  023A    00FF    LD	0x7F,A
  023B    160A    SETB	0xA,4
  023C    118A    CLRB	0xA,3
  023D    2000    CALL	0x0
  023E    120A    CLRB	0xA,4
  023F    118A    CLRB	0xA,3
  0240    00A2    LD	0x22,A
948:              					display[3]=LCDCode[10];//显示空白
  0241    30C4    LDIA	0xC4
  0242    0084    LD	0x4,A
  0243    3091    LDIA	0x91
  0244    00FF    LD	0x7F,A
  0245    160A    SETB	0xA,4
  0246    118A    CLRB	0xA,3
  0247    2000    CALL	0x0
  0248    120A    CLRB	0xA,4
  0249    118A    CLRB	0xA,3
  024A    00A3    LD	0x23,A
949:              					
950:              					ICO_COL_OFF();
  024B    11A4    CLRB	0x24,3
951:              					ICO_TIMER_OFF();
  024C    10A4    CLRB	0x24,1
952:              					
953:              					Display_Temp[0]=LCDCode[Water_Temp/10];
  024D    300A    LDIA	0xA
  024E    00DD    LD	0x5D,A
  024F    01DE    CLR	0x5E
  0250    086F    LD	A,0x6F
  0251    00DF    LD	0x5F,A
  0252    01E0    CLR	0x60
  0253    1BDF    SZB	0x5F,7
  0254    03E0    DECR	0x60
  0255    25EF    CALL	0x5EF
  0256    120A    CLRB	0xA,4
  0257    118A    CLRB	0xA,3
  0258    085D    LD	A,0x5D
  0259    26A8    CALL	0x6A8
  025A    160A    SETB	0xA,4
  025B    118A    CLRB	0xA,3
  025C    2000    CALL	0x0
  025D    120A    CLRB	0xA,4
  025E    118A    CLRB	0xA,3
954:              					Display_Temp[1]=LCDCode[Water_Temp%10];
  025F    2720    CALL	0x720
  0260    120A    CLRB	0xA,4
  0261    118A    CLRB	0xA,3
  0262    086F    LD	A,0x6F
  0263    00DF    LD	0x5F,A
  0264    01E0    CLR	0x60
  0265    1BDF    SZB	0x5F,7
  0266    03E0    DECR	0x60
  0267    2634    CALL	0x634
  0268    120A    CLRB	0xA,4
  0269    118A    CLRB	0xA,3
  026A    085D    LD	A,0x5D
  026B    26A8    CALL	0x6A8
  026C    160A    SETB	0xA,4
  026D    118A    CLRB	0xA,3
  026E    2000    CALL	0x0
  026F    120A    CLRB	0xA,4
  0270    118A    CLRB	0xA,3
  0271    1683    SETB	0x3,5
  0272    00A1    LD	0x21,A
955:              					LCD_HOUR_Flash_Times=0;
  0273    01D8    CLR	0x58
956:              					if(Key_Add_3S_ON|Key_Reduce_3S_ON)
  0274    1971    SZB	0x71,2
  0275    2A78    JP	0x278
  0276    1FF1    SNZB	0x71,7
  0277    2AB9    JP	0x2B9
957:              					{
958:              						LCD_HOUR_Flash_Times=UINT8_MAX;
  0278    30FF    LDIA	0xFF
  0279    00D8    LD	0x58,A
959:              						if(Timer_3S_Times++>=TIMER_3S_TIMES)
  027A    2704    CALL	0x704
  027B    120A    CLRB	0xA,4
  027C    118A    CLRB	0xA,3
  027D    1903    SZB	0x3,2
  027E    024D    SUBA	0x4D
  027F    1C03    SNZB	0x3,0
  0280    2AD6    JP	0x2D6
960:              						{
961:              							if(Key_Add_3S_ON)
  0281    1D71    SNZB	0x71,2
  0282    2A86    JP	0x286
962:              							{
963:              								Water_Temp+=TIMER_3S;
  0283    1283    CLRB	0x3,5
  0284    0AEF    INCR	0x6F
964:              							}
  0285    2A88    JP	0x288
965:              							else
966:              							Water_Temp-=TIMER_3S;
  0286    1283    CLRB	0x3,5
  0287    03EF    DECR	0x6F
967:              							
968:              							if(Water_Temp>95) Water_Temp=40;
  0288    086F    LD	A,0x6F
  0289    3A80    XORIA	0x80
  028A    3E20    ADDIA	0x20
  028B    1C03    SNZB	0x3,0
  028C    2A8F    JP	0x28F
  028D    3028    LDIA	0x28
  028E    00EF    LD	0x6F,A
969:              							if(Water_Temp<40) Water_Temp=95; 
  028F    086F    LD	A,0x6F
  0290    3A80    XORIA	0x80
  0291    3E58    ADDIA	0x58
  0292    1803    SZB	0x3,0
  0293    2A96    JP	0x296
  0294    305F    LDIA	0x5F
  0295    00EF    LD	0x6F,A
970:              							Timer_3S_Times=0;
971:              							Key_Add_3S_ON=0;
972:              							Key_Reduce_3S_ON=0;
973:              							display[0]=LCDCode[Water_Temp/10];
  0296    26CE    CALL	0x6CE
  0297    120A    CLRB	0xA,4
  0298    118A    CLRB	0xA,3
  0299    086F    LD	A,0x6F
  029A    00DF    LD	0x5F,A
  029B    01E0    CLR	0x60
  029C    1BDF    SZB	0x5F,7
  029D    03E0    DECR	0x60
  029E    25EF    CALL	0x5EF
  029F    120A    CLRB	0xA,4
  02A0    118A    CLRB	0xA,3
  02A1    085D    LD	A,0x5D
  02A2    26A8    CALL	0x6A8
  02A3    160A    SETB	0xA,4
  02A4    118A    CLRB	0xA,3
  02A5    2000    CALL	0x0
  02A6    120A    CLRB	0xA,4
  02A7    118A    CLRB	0xA,3
974:              							display[1]=LCDCode[Water_Temp%10];
  02A8    26FC    CALL	0x6FC
  02A9    120A    CLRB	0xA,4
  02AA    118A    CLRB	0xA,3
  02AB    1BDF    SZB	0x5F,7
  02AC    03E0    DECR	0x60
  02AD    2634    CALL	0x634
  02AE    120A    CLRB	0xA,4
  02AF    118A    CLRB	0xA,3
  02B0    085D    LD	A,0x5D
  02B1    26A8    CALL	0x6A8
  02B2    160A    SETB	0xA,4
  02B3    118A    CLRB	0xA,3
  02B4    2000    CALL	0x0
  02B5    120A    CLRB	0xA,4
  02B6    118A    CLRB	0xA,3
  02B7    00A1    LD	0x21,A
  02B8    2AD6    JP	0x2D6
975:              						}
976:              					}
977:              					else 
978:              					if(Add|Reduce)
  02B9    1283    CLRB	0x3,5
  02BA    0838    LD	A,0x38
  02BB    0451    ORA	0x51
  02BC    1903    SZB	0x3,2
  02BD    2AD6    JP	0x2D6
979:              					{
980:              						if(Add) Water_Temp++;
  02BE    0838    LD	A,0x38
  02BF    1903    SZB	0x3,2
  02C0    2AC3    JP	0x2C3
  02C1    0AEF    INCR	0x6F
  02C2    2AC7    JP	0x2C7
981:              						else 
982:              						if(Reduce) Water_Temp--;
  02C3    0851    LD	A,0x51
  02C4    1903    SZB	0x3,2
  02C5    2AC7    JP	0x2C7
  02C6    03EF    DECR	0x6F
983:              
984:              						if(Water_Temp>95) Water_Temp=40;
  02C7    086F    LD	A,0x6F
  02C8    3A80    XORIA	0x80
  02C9    3E20    ADDIA	0x20
  02CA    1C03    SNZB	0x3,0
  02CB    2ACE    JP	0x2CE
  02CC    3028    LDIA	0x28
  02CD    00EF    LD	0x6F,A
985:              						if(Water_Temp<40) Water_Temp=95; 
  02CE    086F    LD	A,0x6F
  02CF    3A80    XORIA	0x80
  02D0    3E58    ADDIA	0x58
  02D1    1803    SZB	0x3,0
  02D2    2AD5    JP	0x2D5
  02D3    305F    LDIA	0x5F
  02D4    00EF    LD	0x6F,A
986:              						bool_WaterTempChange=1;
  02D5    16F3    SETB	0x73,5
987:              					}
988:              					
989:              					LCD_TEMP_Flash_Times=0;
  02D6    1683    SETB	0x3,5
  02D7    01DB    CLR	0x5B
990:              					
991:              					break;					
  02D8    0008    RET
  02D9    084F    LD	A,0x4F
  02DA    3A01    XORIA	0x1
  02DB    1903    SZB	0x3,2
  02DC    28E7    JP	0xE7
  02DD    3A03    XORIA	0x3
  02DE    1903    SZB	0x3,2
  02DF    2990    JP	0x190
  02E0    3A01    XORIA	0x1
  02E1    1903    SZB	0x3,2
  02E2    2A32    JP	0x232
  02E3    2DEE    JP	0x5EE
992:              			}
993:              			
994:              			break;
995:              		case TEMP_TIMER_SUCCESS_INIT:
996:              			
997:              			//如果在Option中既不设置时间，也不设置温度，则两者的默认值都显示
998:              			if((bool_TimeChange==0)&&(bool_WaterTempChange==0))
  02E4    1E73    SNZB	0x73,4
  02E5    1AF3    SZB	0x73,5
  02E6    2AE9    JP	0x2E9
999:              			{
1000:             				bool_TimeChange=1;
  02E7    1673    SETB	0x73,4
1001:             				bool_WaterTempChange=1;
  02E8    16F3    SETB	0x73,5
1002:             				
1003:             			}
1004:             			//ICO_TIMER_OFF();
1005:             			//LCD_HOUR_Flash_Times=UINT8_MAX;
1006:             			//LCD_MINUTE_Flash_Times=UINT8_MAX;
1007:             			//按键锁定
1008:             			Key_Regular_Lock=0;
1009:             			Key_Bold_Lock=0;
1010:             			Key_Iced_Lock=0;
1011:             			Key_Tea_Lock=0;
1012:             			Key_Add_Lock=1;
1013:             			Key_Reduce_Lock=1;
1014:             			Key_80_Z_Lock=0;
1015:             			Key_120_Z_Lock=0;
1016:             			Key_210_Z_Lock=0;
1017:             			Key_420_Z_Lock=0;
  02E9    26F1    CALL	0x6F1
1018:             			Key_Option_Lock=1;
  02EA    1771    SETB	0x71,6
1019:             			Key_Start_Lock=1;
  02EB    1572    SETB	0x72,2
1020:             			Start=0;
  02EC    1283    CLRB	0x3,5
  02ED    3007    LDIA	0x7
  02EE    01D5    CLR	0x55
1021:             			Pattern_State=TEMP_TIMER_SUCCESS;
  02EF    1683    SETB	0x3,5
  02F0    00E9    LD	0x69,A
1022:             			break;
  02F1    0008    RET
1023:             		case TEMP_TIMER_SUCCESS:
1024:             			LCD_AUTO_Flash_Times=0;
  02F2    01D5    CLR	0x55
1025:             			
1026:             			if(Time_Temp_Counter++>=TIME_TEMP_DIS_HZ) 
1027:             			{
1028:             				Time_Temp_Dis=~Time_Temp_Dis;
1029:             				Time_Temp_Counter=0;
  02F3    26BF    CALL	0x6BF
  02F4    120A    CLRB	0xA,4
  02F5    118A    CLRB	0xA,3
1030:             			}
1031:             			
1032:             			if(Time_Temp_Dis)
  02F6    1FF2    SNZB	0x72,7
  02F7    2B41    JP	0x341
1033:             			{
1034:             				if(bool_TimeChange)
  02F8    1E73    SNZB	0x73,4
  02F9    2B3F    JP	0x33F
  02FA    30FF    LDIA	0xFF
1035:             				{
1036:             					LCD_TIMER_Flash_Times=0;
  02FB    01DC    CLR	0x5C
1037:             					LCD_TEMP_Flash_Times=UINT8_MAX;
  02FC    00DB    LD	0x5B,A
1038:             					LCD_HOUR_Flash_Times=UINT8_MAX;//
  02FD    00D8    LD	0x58,A
1039:             					LCD_MINUTE_Flash_Times=UINT8_MAX;//
  02FE    00D9    LD	0x59,A
1040:             					LCD_COL_Flash_Times=UINT8_MAX;	
  02FF    00D6    LD	0x56,A
1041:             					ICO_TEMP_OFF();
  0300    1283    CLRB	0x3,5
  0301    1024    CLRB	0x24,0
1042:             					ICO_COL_ON();
  0302    15A4    SETB	0x24,3
1043:             					
1044:             					display[0]=LCDCode[Hour/10];
  0303    2711    CALL	0x711
  0304    120A    CLRB	0xA,4
  0305    118A    CLRB	0xA,3
  0306    1BDF    SZB	0x5F,7
  0307    03E0    DECR	0x60
  0308    25EF    CALL	0x5EF
  0309    120A    CLRB	0xA,4
  030A    118A    CLRB	0xA,3
  030B    085D    LD	A,0x5D
  030C    26A8    CALL	0x6A8
  030D    160A    SETB	0xA,4
  030E    118A    CLRB	0xA,3
  030F    2000    CALL	0x0
  0310    120A    CLRB	0xA,4
  0311    118A    CLRB	0xA,3
1045:             					display[1]=LCDCode[Hour%10];
  0312    26D8    CALL	0x6D8
  0313    120A    CLRB	0xA,4
  0314    118A    CLRB	0xA,3
  0315    1BDF    SZB	0x5F,7
  0316    03E0    DECR	0x60
  0317    2634    CALL	0x634
  0318    120A    CLRB	0xA,4
  0319    118A    CLRB	0xA,3
  031A    085D    LD	A,0x5D
  031B    26A8    CALL	0x6A8
  031C    160A    SETB	0xA,4
  031D    118A    CLRB	0xA,3
  031E    2000    CALL	0x0
  031F    120A    CLRB	0xA,4
  0320    118A    CLRB	0xA,3
1046:             					display[2]=LCDCode[Minute/10];
  0321    2718    CALL	0x718
  0322    120A    CLRB	0xA,4
  0323    118A    CLRB	0xA,3
  0324    1BDF    SZB	0x5F,7
  0325    03E0    DECR	0x60
  0326    25EF    CALL	0x5EF
  0327    120A    CLRB	0xA,4
  0328    118A    CLRB	0xA,3
  0329    085D    LD	A,0x5D
  032A    26A8    CALL	0x6A8
  032B    160A    SETB	0xA,4
  032C    118A    CLRB	0xA,3
  032D    2000    CALL	0x0
  032E    120A    CLRB	0xA,4
  032F    118A    CLRB	0xA,3
1047:             					display[3]=LCDCode[Minute%10];
  0330    26E0    CALL	0x6E0
  0331    120A    CLRB	0xA,4
  0332    118A    CLRB	0xA,3
  0333    1BDF    SZB	0x5F,7
  0334    03E0    DECR	0x60
  0335    2634    CALL	0x634
  0336    120A    CLRB	0xA,4
  0337    118A    CLRB	0xA,3
  0338    085D    LD	A,0x5D
  0339    3EBA    ADDIA	0xBA
  033A    0084    LD	0x4,A
  033B    3091    LDIA	0x91
  033C    1803    SZB	0x3,0
  033D    3E01    ADDIA	0x1
  033E    2B6C    JP	0x36C
1048:             					
1049:             				}
1050:             				else
1051:             				{
1052:             					Time_Temp_Dis=0;
  033F    13F2    CLRB	0x72,7
  0340    2B75    JP	0x375
1053:             				}
1054:             			}
1055:             			else
1056:             			{
1057:             				if(bool_WaterTempChange)
  0341    1EF3    SNZB	0x73,5
  0342    2B74    JP	0x374
1058:             				{
1059:             					LCD_TIMER_Flash_Times=UINT8_MAX;
  0343    30FF    LDIA	0xFF
1060:             					LCD_TEMP_Flash_Times=0;
1061:             					LCD_HOUR_Flash_Times=UINT8_MAX;//
1062:             					LCD_MINUTE_Flash_Times=UINT8_MAX;//
1063:             					LCD_COL_Flash_Times=UINT8_MAX;
1064:             					ICO_TIMER_OFF();
1065:             					ICO_COL_OFF();
1066:             					
1067:             					display[0]=LCDCode[Water_Temp/10];
  0344    26AF    CALL	0x6AF
  0345    120A    CLRB	0xA,4
  0346    118A    CLRB	0xA,3
  0347    1BDF    SZB	0x5F,7
  0348    03E0    DECR	0x60
  0349    25EF    CALL	0x5EF
  034A    120A    CLRB	0xA,4
  034B    118A    CLRB	0xA,3
  034C    085D    LD	A,0x5D
  034D    26A8    CALL	0x6A8
  034E    160A    SETB	0xA,4
  034F    118A    CLRB	0xA,3
  0350    2000    CALL	0x0
  0351    120A    CLRB	0xA,4
  0352    118A    CLRB	0xA,3
1068:             					display[1]=LCDCode[Water_Temp%10];
  0353    26FC    CALL	0x6FC
  0354    120A    CLRB	0xA,4
  0355    118A    CLRB	0xA,3
  0356    1BDF    SZB	0x5F,7
  0357    03E0    DECR	0x60
  0358    2634    CALL	0x634
  0359    120A    CLRB	0xA,4
  035A    118A    CLRB	0xA,3
  035B    085D    LD	A,0x5D
  035C    26A8    CALL	0x6A8
  035D    160A    SETB	0xA,4
  035E    118A    CLRB	0xA,3
  035F    2000    CALL	0x0
  0360    120A    CLRB	0xA,4
  0361    118A    CLRB	0xA,3
1069:             					display[2]=LCDCode[12];
  0362    2734    CALL	0x734
  0363    160A    SETB	0xA,4
  0364    118A    CLRB	0xA,3
  0365    2000    CALL	0x0
  0366    120A    CLRB	0xA,4
  0367    118A    CLRB	0xA,3
  0368    00A2    LD	0x22,A
1070:             					display[3]=LCDCode[10];
  0369    30C4    LDIA	0xC4
  036A    0084    LD	0x4,A
  036B    3091    LDIA	0x91
  036C    00FF    LD	0x7F,A
  036D    160A    SETB	0xA,4
  036E    118A    CLRB	0xA,3
  036F    2000    CALL	0x0
  0370    120A    CLRB	0xA,4
  0371    118A    CLRB	0xA,3
  0372    00A3    LD	0x23,A
1071:             					
1072:             				}
  0373    2B75    JP	0x375
1073:             				else
1074:             				{
1075:             					Time_Temp_Dis=1;
  0374    17F2    SETB	0x72,7
1076:             				}
1077:             			}
1078:             		
1079:             		
1080:             		
1081:             			if((Regular|Bold|Iced|Tea)&&(_80_z|_120_z|_210_z|_420_z))
  0375    1283    CLRB	0x3,5
  0376    0852    LD	A,0x52
  0377    043B    ORA	0x3B
  0378    043F    ORA	0x3F
  0379    0456    ORA	0x56
  037A    1903    SZB	0x3,2
  037B    0008    RET
  037C    085C    LD	A,0x5C
  037D    0459    ORA	0x59
  037E    045A    ORA	0x5A
  037F    045B    ORA	0x5B
  0380    1903    SZB	0x3,2
  0381    0008    RET
1082:             			{
1083:             				Key_Start_Lock=0;	
  0382    1172    CLRB	0x72,2
1084:             				if(Start)
  0383    0855    LD	A,0x55
  0384    1903    SZB	0x3,2
  0385    0008    RET
1085:             					Pattern_State=WAITING_TIME_OUT_INIT;	
  0386    3008    LDIA	0x8
  0387    1683    SETB	0x3,5
  0388    00E9    LD	0x69,A
  0389    0008    RET
1086:             				
1087:             			}
1088:             			
1089:             			break;
1090:             		case WAITING_TIME_OUT_INIT:
1091:             		
1092:             		
1093:             		
1094:             			Pattern_State=WAITING_TIME_OUT;
  038A    3009    LDIA	0x9
  038B    00E9    LD	0x69,A
1095:             			break;
  038C    0008    RET
1096:             		case WAITING_TIME_OUT:	
1097:             			//LCD_TEMP_Flash_Times=0;
1098:             			//LCD_AUTO_Flash_Times=0;
1099:             			//LCD_COL_Flash_Times=0;
1100:             			
1101:             			if(Time_Temp_Counter++>=TIME_TEMP_DIS_HZ) 
1102:             			{
1103:             				Time_Temp_Dis=~Time_Temp_Dis;
1104:             				Time_Temp_Counter=0;
  038D    26BF    CALL	0x6BF
  038E    120A    CLRB	0xA,4
  038F    118A    CLRB	0xA,3
1105:             			}
1106:             			
1107:             			if(Time_Temp_Dis)
  0390    1FF2    SNZB	0x72,7
  0391    2BDA    JP	0x3DA
1108:             			{
1109:             				if(bool_TimeChange)
  0392    1E73    SNZB	0x73,4
  0393    2BD8    JP	0x3D8
  0394    30FF    LDIA	0xFF
1110:             				{
1111:             					LCD_TIMER_Flash_Times=0;
  0395    01DC    CLR	0x5C
1112:             					LCD_TEMP_Flash_Times=UINT8_MAX;
  0396    00DB    LD	0x5B,A
1113:             					LCD_HOUR_Flash_Times=UINT8_MAX;
  0397    00D8    LD	0x58,A
1114:             					LCD_MINUTE_Flash_Times=UINT8_MAX;
  0398    00D9    LD	0x59,A
1115:             					LCD_COL_Flash_Times=0;	
  0399    01D6    CLR	0x56
1116:             					ICO_TEMP_OFF();
  039A    1283    CLRB	0x3,5
  039B    1024    CLRB	0x24,0
1117:             					//ICO_COL_ON();
1118:             					
1119:             					display[0]=LCDCode[Hour/10];
  039C    2711    CALL	0x711
  039D    120A    CLRB	0xA,4
  039E    118A    CLRB	0xA,3
  039F    1BDF    SZB	0x5F,7
  03A0    03E0    DECR	0x60
  03A1    25EF    CALL	0x5EF
  03A2    120A    CLRB	0xA,4
  03A3    118A    CLRB	0xA,3
  03A4    085D    LD	A,0x5D
  03A5    26A8    CALL	0x6A8
  03A6    160A    SETB	0xA,4
  03A7    118A    CLRB	0xA,3
  03A8    2000    CALL	0x0
  03A9    120A    CLRB	0xA,4
  03AA    118A    CLRB	0xA,3
1120:             					display[1]=LCDCode[Hour%10];
  03AB    26D8    CALL	0x6D8
  03AC    120A    CLRB	0xA,4
  03AD    118A    CLRB	0xA,3
  03AE    1BDF    SZB	0x5F,7
  03AF    03E0    DECR	0x60
  03B0    2634    CALL	0x634
  03B1    120A    CLRB	0xA,4
  03B2    118A    CLRB	0xA,3
  03B3    085D    LD	A,0x5D
  03B4    26A8    CALL	0x6A8
  03B5    160A    SETB	0xA,4
  03B6    118A    CLRB	0xA,3
  03B7    2000    CALL	0x0
  03B8    120A    CLRB	0xA,4
  03B9    118A    CLRB	0xA,3
1121:             					display[2]=LCDCode[Minute/10];
  03BA    2718    CALL	0x718
  03BB    120A    CLRB	0xA,4
  03BC    118A    CLRB	0xA,3
  03BD    1BDF    SZB	0x5F,7
  03BE    03E0    DECR	0x60
  03BF    25EF    CALL	0x5EF
  03C0    120A    CLRB	0xA,4
  03C1    118A    CLRB	0xA,3
  03C2    085D    LD	A,0x5D
  03C3    26A8    CALL	0x6A8
  03C4    160A    SETB	0xA,4
  03C5    118A    CLRB	0xA,3
  03C6    2000    CALL	0x0
  03C7    120A    CLRB	0xA,4
  03C8    118A    CLRB	0xA,3
1122:             					display[3]=LCDCode[Minute%10];
  03C9    26E0    CALL	0x6E0
  03CA    120A    CLRB	0xA,4
  03CB    118A    CLRB	0xA,3
  03CC    1BDF    SZB	0x5F,7
  03CD    03E0    DECR	0x60
  03CE    2634    CALL	0x634
  03CF    120A    CLRB	0xA,4
  03D0    118A    CLRB	0xA,3
  03D1    085D    LD	A,0x5D
  03D2    3EBA    ADDIA	0xBA
  03D3    0084    LD	0x4,A
  03D4    3091    LDIA	0x91
  03D5    1803    SZB	0x3,0
  03D6    3E01    ADDIA	0x1
  03D7    2C05    JP	0x405
1123:             					
1124:             				}
1125:             				else
1126:             				{
1127:             					Time_Temp_Dis=0;
  03D8    13F2    CLRB	0x72,7
  03D9    2C0E    JP	0x40E
1128:             				}
1129:             			}
1130:             			else
1131:             			{
1132:             				if(bool_WaterTempChange)
  03DA    1EF3    SNZB	0x73,5
  03DB    2C0D    JP	0x40D
1133:             				{
1134:             					LCD_TIMER_Flash_Times=UINT8_MAX;
  03DC    30FF    LDIA	0xFF
1135:             					LCD_TEMP_Flash_Times=0;
1136:             					LCD_HOUR_Flash_Times=UINT8_MAX;
1137:             					LCD_MINUTE_Flash_Times=UINT8_MAX;
1138:             					LCD_COL_Flash_Times=UINT8_MAX;
1139:             					ICO_TIMER_OFF();
1140:             					ICO_COL_OFF();
1141:             					
1142:             					display[0]=LCDCode[Water_Temp/10];
  03DD    26AF    CALL	0x6AF
  03DE    120A    CLRB	0xA,4
  03DF    118A    CLRB	0xA,3
  03E0    1BDF    SZB	0x5F,7
  03E1    03E0    DECR	0x60
  03E2    25EF    CALL	0x5EF
  03E3    120A    CLRB	0xA,4
  03E4    118A    CLRB	0xA,3
  03E5    085D    LD	A,0x5D
  03E6    26A8    CALL	0x6A8
  03E7    160A    SETB	0xA,4
  03E8    118A    CLRB	0xA,3
  03E9    2000    CALL	0x0
  03EA    120A    CLRB	0xA,4
  03EB    118A    CLRB	0xA,3
1143:             					display[1]=LCDCode[Water_Temp%10];
  03EC    26FC    CALL	0x6FC
  03ED    120A    CLRB	0xA,4
  03EE    118A    CLRB	0xA,3
  03EF    1BDF    SZB	0x5F,7
  03F0    03E0    DECR	0x60
  03F1    2634    CALL	0x634
  03F2    120A    CLRB	0xA,4
  03F3    118A    CLRB	0xA,3
  03F4    085D    LD	A,0x5D
  03F5    26A8    CALL	0x6A8
  03F6    160A    SETB	0xA,4
  03F7    118A    CLRB	0xA,3
  03F8    2000    CALL	0x0
  03F9    120A    CLRB	0xA,4
  03FA    118A    CLRB	0xA,3
1144:             					display[2]=LCDCode[12];
  03FB    2734    CALL	0x734
  03FC    160A    SETB	0xA,4
  03FD    118A    CLRB	0xA,3
  03FE    2000    CALL	0x0
  03FF    120A    CLRB	0xA,4
  0400    118A    CLRB	0xA,3
  0401    00A2    LD	0x22,A
1145:             					display[3]=LCDCode[10];
  0402    30C4    LDIA	0xC4
  0403    0084    LD	0x4,A
  0404    3091    LDIA	0x91
  0405    00FF    LD	0x7F,A
  0406    160A    SETB	0xA,4
  0407    118A    CLRB	0xA,3
  0408    2000    CALL	0x0
  0409    120A    CLRB	0xA,4
  040A    118A    CLRB	0xA,3
  040B    00A3    LD	0x23,A
1146:             					
1147:             				}
  040C    2C0E    JP	0x40E
1148:             				else
1149:             				{
1150:             					Time_Temp_Dis=1;
  040D    17F2    SETB	0x72,7
1151:             				}
1152:             			}
1153:             			
1154:             			if(++TimeCounter>_1_SECOND_HZ)
  040E    30FB    LDIA	0xFB
  040F    1683    SETB	0x3,5
  0410    0AEE    INCR	0x6E
  0411    026E    SUBA	0x6E
  0412    1C03    SNZB	0x3,0
  0413    2C1F    JP	0x41F
  0414    303C    LDIA	0x3C
1155:             			{
1156:             				TimeCounter=0;
  0415    01EE    CLR	0x6E
1157:             				Second++;
  0416    0AED    INCR	0x6D
1158:             				if(Second>=60)
  0417    026D    SUBA	0x6D
  0418    1C03    SNZB	0x3,0
  0419    2C1F    JP	0x41F
1159:             				{
1160:             					Second=0;
  041A    01ED    CLR	0x6D
1161:             					Minute--;
  041B    1283    CLRB	0x3,5
  041C    03CE    DECR	0x4E
1162:             					if(Minute<0)
  041D    1BCE    SZB	0x4E,7
1163:             					{
1164:             						Hour--;							
  041E    03BE    DECR	0x3E
1165:             					}
1166:             						
1167:             				}
1168:             					
1169:             			}
1170:             			
1171:             			if((Hour==0)&&(Minute==0))
  041F    1283    CLRB	0x3,5
  0420    08BE    TESTZ	0x3E
  0421    1D03    SNZB	0x3,2
  0422    0008    RET
  0423    08CE    TESTZ	0x4E
  0424    1D03    SNZB	0x3,2
  0425    0008    RET
  0426    28BD    JP	0xBD
1172:             			{
1173:             				Pattern_State=WORKING_INIT;	
1174:             			}
1175:             			
1176:             			break;
1177:             		
1178:             		case WORKING_INIT:
1179:             			
1180:             			ANNULUS_LIGHT_State=LED_ON;//
  0427    1283    CLRB	0x3,5
  0428    30FF    LDIA	0xFF
  0429    01B7    CLR	0x37
  042A    0AB7    INCR	0x37
1181:             			SHOW_LIGHT_State=LED_ON;//
  042B    01D3    CLR	0x53
  042C    0AD3    INCR	0x53
1182:             			
1183:             			LCD_TEMP_Flash_Times=UINT8_MAX;
  042D    1683    SETB	0x3,5
  042E    00DB    LD	0x5B,A
1184:             			LCD_AUTO_Flash_Times=UINT8_MAX;
  042F    00D5    LD	0x55,A
1185:             			//LCD_COL_Flash_Times=UINT8_MAX;
1186:             			
1187:             			LCD_HOUR_Flash_Times=UINT8_MAX;
  0430    00D8    LD	0x58,A
1188:             			LCD_MINUTE_Flash_Times=UINT8_MAX;
  0431    00D9    LD	0x59,A
1189:             			
1190:             			ANNULUS_LIGHT_ON();
  0432    1283    CLRB	0x3,5
  0433    1726    SETB	0x26,6
1191:             			SHOW_LIGHT_ON();
  0434    17A6    SETB	0x26,7
1192:             			
1193:             			//ICO_COL_OFF();	
1194:             			ICO_TIMER_OFF();
  0435    10A4    CLRB	0x24,1
1195:             			ICO_TEMP_ON();
  0436    1424    SETB	0x24,0
1196:             			ICO_AUTO_OFF();
  0437    1124    CLRB	0x24,2
1197:             			LCD_State=LCD_FLASH; 
  0438    3005    LDIA	0x5
  0439    1683    SETB	0x3,5
  043A    00DA    LD	0x5A,A
1198:             			
1199:             			LED12_State=LED_ON;
  043B    01E0    CLR	0x60
  043C    0AE0    INCR	0x60
1200:             			
1201:             			//按键锁定
1202:             			Key_Regular_Lock=1;
  043D    14F2    SETB	0x72,1
1203:             			Key_Bold_Lock=1;
  043E    1671    SETB	0x71,4
1204:             			Key_Iced_Lock=1;
  043F    16F1    SETB	0x71,5
1205:             			Key_Tea_Lock=1;
  0440    15F2    SETB	0x72,3
1206:             			Key_Add_Lock=1;
  0441    15F1    SETB	0x71,3
1207:             			Key_Reduce_Lock=1;
  0442    1472    SETB	0x72,0
1208:             			Key_80_Z_Lock=1;
  0443    14F1    SETB	0x71,1
1209:             			Key_120_Z_Lock=1;
  0444    1770    SETB	0x70,6
1210:             			Key_210_Z_Lock=1;
  0445    17F0    SETB	0x70,7
1211:             			Key_420_Z_Lock=1;
  0446    1471    SETB	0x71,0
1212:             			Key_Option_Lock=1;
  0447    1771    SETB	0x71,6
1213:             			Key_Start_Lock=0;
  0448    1172    CLRB	0x72,2
1214:             			Start=0;
  0449    1283    CLRB	0x3,5
  044A    30FF    LDIA	0xFF
  044B    01D5    CLR	0x55
1215:             			//LCD设置
1216:             			LCD_TIMER_Flash_Times=UINT8_MAX;
  044C    1683    SETB	0x3,5
  044D    00DC    LD	0x5C,A
1217:             			LCD_TEMP_Flash_Times=UINT8_MAX;
  044E    00DB    LD	0x5B,A
1218:             			LCD_HOUR_Flash_Times=UINT8_MAX;
  044F    00D8    LD	0x58,A
1219:             			LCD_MINUTE_Flash_Times=UINT8_MAX;
  0450    00D9    LD	0x59,A
1220:             					
1221:             			Pattern_State=WORKING;
  0451    300B    LDIA	0xB
  0452    00E9    LD	0x69,A
1222:             			break;
  0453    0008    RET
1223:             		case WORKING:
1224:             			
1225:             			if(Start) Pattern_State=POWER_ON_INIT;
  0454    1283    CLRB	0x3,5
  0455    0855    LD	A,0x55
  0456    1683    SETB	0x3,5
  0457    1D03    SNZB	0x3,2
  0458    01E9    CLR	0x69
1226:             			if(WortTimeCount++>=WORK_TIME_HZ) 
  0459    1683    SETB	0x3,5
  045A    1703    SETB	0x3,6
  045B    0AE4    INCR	0x64
  045C    1903    SZB	0x3,2
  045D    0AE5    INCR	0x65
  045E    3000    LDIA	0x0
  045F    0265    SUBA	0x65
  0460    30FB    LDIA	0xFB
  0461    1903    SZB	0x3,2
  0462    0264    SUBA	0x64
  0463    1C03    SNZB	0x3,0
  0464    2C82    JP	0x482
1227:             			{
1228:             				WortTimeCount=0;
  0465    01E4    CLR	0x64
  0466    01E5    CLR	0x65
1229:             				
1230:             				if(++Time_Temp_Counter>=WORK_TIME_TEMP_DIS_HZ)
  0467    1303    CLRB	0x3,6
  0468    0ACB    INCR	0x4B
  0469    1903    SZB	0x3,2
  046A    0ACC    INCR	0x4C
  046B    3000    LDIA	0x0
  046C    024C    SUBA	0x4C
  046D    3006    LDIA	0x6
  046E    1903    SZB	0x3,2
  046F    024B    SUBA	0x4B
  0470    1C03    SNZB	0x3,0
  0471    2C76    JP	0x476
  0472    3080    LDIA	0x80
1231:             				{
1232:             					Time_Temp_Counter=0;
  0473    01CB    CLR	0x4B
  0474    01CC    CLR	0x4C
1233:             					Time_Temp_Dis=~Time_Temp_Dis;
  0475    06F2    XORR	0x72
1234:             				}
1235:             					
1236:             				WorkSecond+=1;
  0476    1283    CLRB	0x3,5
  0477    303C    LDIA	0x3C
  0478    0AD8    INCR	0x58
1237:             				if(WorkSecond>59) 
  0479    0258    SUBA	0x58
  047A    1C03    SNZB	0x3,0
  047B    2C82    JP	0x482
  047C    3064    LDIA	0x64
1238:             				{
1239:             					WorkSecond=0;
  047D    01D8    CLR	0x58
1240:             					WorkMinute++;
  047E    0AD7    INCR	0x57
1241:             					if(WorkMinute>99) WorkMinute=0;
  047F    0257    SUBA	0x57
  0480    1803    SZB	0x3,0
  0481    01D7    CLR	0x57
1242:             				}
1243:             			}
1244:             			
1245:             			if(Time_Temp_Dis)
  0482    1FF2    SNZB	0x72,7
  0483    2CBF    JP	0x4BF
1246:             			{
1247:             				//if(bool_TimeChange)
1248:             				{
1249:             					//LCD_TIMER_Flash_Times=0;
1250:             					//LCD_TEMP_Flash_Times=UINT8_MAX;
1251:             					//LCD_HOUR_Flash_Times=0;
1252:             					//LCD_MINUTE_Flash_Times=0;
1253:             					LCD_COL_Flash_Times=0;
  0484    1683    SETB	0x3,5
  0485    1303    CLRB	0x3,6
  0486    01D6    CLR	0x56
1254:             					ICO_TEMP_OFF();
  0487    1283    CLRB	0x3,5
  0488    1024    CLRB	0x24,0
1255:             					ICO_TIMER_ON();
  0489    14A4    SETB	0x24,1
1256:             					//ICO_COL_ON();
1257:             					
1258:             					display[0]=LCDCode[WorkMinute/10];
  048A    300A    LDIA	0xA
  048B    00DD    LD	0x5D,A
  048C    0857    LD	A,0x57
  048D    2671    CALL	0x671
  048E    120A    CLRB	0xA,4
  048F    118A    CLRB	0xA,3
  0490    26A8    CALL	0x6A8
  0491    160A    SETB	0xA,4
  0492    118A    CLRB	0xA,3
  0493    2000    CALL	0x0
  0494    120A    CLRB	0xA,4
  0495    118A    CLRB	0xA,3
  0496    00A0    LD	0x20,A
1259:             					display[1]=LCDCode[WorkMinute%10];
  0497    300A    LDIA	0xA
  0498    00DD    LD	0x5D,A
  0499    0857    LD	A,0x57
  049A    268C    CALL	0x68C
  049B    120A    CLRB	0xA,4
  049C    118A    CLRB	0xA,3
  049D    26A8    CALL	0x6A8
  049E    160A    SETB	0xA,4
  049F    118A    CLRB	0xA,3
  04A0    2000    CALL	0x0
  04A1    120A    CLRB	0xA,4
  04A2    118A    CLRB	0xA,3
  04A3    00A1    LD	0x21,A
1260:             					display[2]=LCDCode[WorkSecond/10];
  04A4    300A    LDIA	0xA
  04A5    00DD    LD	0x5D,A
  04A6    0858    LD	A,0x58
  04A7    2671    CALL	0x671
  04A8    120A    CLRB	0xA,4
  04A9    118A    CLRB	0xA,3
  04AA    26A8    CALL	0x6A8
  04AB    160A    SETB	0xA,4
  04AC    118A    CLRB	0xA,3
  04AD    2000    CALL	0x0
  04AE    120A    CLRB	0xA,4
  04AF    118A    CLRB	0xA,3
  04B0    00A2    LD	0x22,A
1261:             					display[3]=LCDCode[WorkSecond%10];
  04B1    300A    LDIA	0xA
  04B2    00DD    LD	0x5D,A
  04B3    0858    LD	A,0x58
  04B4    268C    CALL	0x68C
  04B5    120A    CLRB	0xA,4
  04B6    118A    CLRB	0xA,3
  04B7    26A8    CALL	0x6A8
  04B8    160A    SETB	0xA,4
  04B9    118A    CLRB	0xA,3
  04BA    2000    CALL	0x0
  04BB    120A    CLRB	0xA,4
  04BC    118A    CLRB	0xA,3
  04BD    00A3    LD	0x23,A
1262:             					
1263:             				}
1264:             				//else
1265:             				{
1266:             					//Time_Temp_Dis=0;
1267:             				}
1268:             			}
  04BE    2DB2    JP	0x5B2
1269:             			else
1270:             			{
1271:             				//if(bool_WaterTempChange)
1272:             				{
1273:             					
1274:             					LCD_COL_Flash_Times=UINT8_MAX;
  04BF    30FF    LDIA	0xFF
  04C0    1683    SETB	0x3,5
  04C1    1303    CLRB	0x3,6
  04C2    00D6    LD	0x56,A
1275:             					ICO_TEMP_ON();
  04C3    1283    CLRB	0x3,5
  04C4    1424    SETB	0x24,0
1276:             					ICO_TIMER_OFF();
  04C5    10A4    CLRB	0x24,1
1277:             					ICO_COL_OFF();
  04C6    11A4    CLRB	0x24,3
1278:             					Hex_To_Temp(Temperature_Dat);
  04C7    086E    LD	A,0x6E
  04C8    273A    CALL	0x73A
  04C9    120A    CLRB	0xA,4
  04CA    118A    CLRB	0xA,3
  04CB    2DB2    JP	0x5B2
1279:             					
1280:             				}
1281:             				//else
1282:             				{
1283:             					//Time_Temp_Dis=1;
1284:             				}
1285:             			}
1286:             			switch(Pattern_Work_State)
1287:             			{
1288:             				case PATTERN_WORK_ONCE:
1289:             					
1290:             					if(_80_z)
  04CC    1283    CLRB	0x3,5
  04CD    085C    LD	A,0x5C
  04CE    1903    SZB	0x3,2
  04CF    2CE5    JP	0x4E5
1291:             					{
1292:             						Solenoid_Work_Time=SOLENOID_WORK_TIME_8OZ;
  04D0    300F    LDIA	0xF
1293:             						Solenoid_Stop_Time=SOLENOID_STOP_TIME_8OZ;
1294:             						if(Regular)
  04D1    26E8    CALL	0x6E8
  04D2    120A    CLRB	0xA,4
  04D3    118A    CLRB	0xA,3
  04D4    1903    SZB	0x3,2
  04D5    2CD8    JP	0x4D8
1295:             						{
1296:             							PATTERN_WORK_TIME=REGULAR_8OZ_WORK_TIME;
  04D6    301E    LDIA	0x1E
  04D7    2D30    JP	0x530
1297:             						}
1298:             						else
1299:             						if(Bold)
  04D8    083B    LD	A,0x3B
  04D9    1903    SZB	0x3,2
  04DA    2CDD    JP	0x4DD
1300:             						{
1301:             							PATTERN_WORK_TIME=BOLD_8OZ_WORK_TIME;
  04DB    304B    LDIA	0x4B
  04DC    2D30    JP	0x530
1302:             						}
1303:             						else
1304:             						if(Iced)
  04DD    083F    LD	A,0x3F
  04DE    1D03    SNZB	0x3,2
  04DF    2CDB    JP	0x4DB
1305:             						{
1306:             							PATTERN_WORK_TIME=ICED_8OZ_WORK_TIME;
1307:             						}
1308:             						else
1309:             						if(Tea)
  04E0    0856    LD	A,0x56
  04E1    1903    SZB	0x3,2
  04E2    2D3C    JP	0x53C
1310:             						{
1311:             							PATTERN_WORK_TIME=TEA_8OZ_WORK_TIME;
  04E3    3014    LDIA	0x14
  04E4    2D30    JP	0x530
1312:             						}
1313:             						
1314:             					}
1315:             					else
1316:             					if(_120_z)
  04E5    0859    LD	A,0x59
  04E6    1903    SZB	0x3,2
  04E7    2CFD    JP	0x4FD
1317:             					{
1318:             						Solenoid_Work_Time=SOLENOID_WORK_TIME_12OZ;
  04E8    3014    LDIA	0x14
1319:             						Solenoid_Stop_Time=SOLENOID_STOP_TIME_12OZ;
1320:             						if(Regular)
  04E9    26E8    CALL	0x6E8
  04EA    120A    CLRB	0xA,4
  04EB    118A    CLRB	0xA,3
  04EC    1903    SZB	0x3,2
  04ED    2CF0    JP	0x4F0
1321:             						{
1322:             							PATTERN_WORK_TIME=REGULAR_12OZ_WORK_TIME;
  04EE    3035    LDIA	0x35
  04EF    2D30    JP	0x530
1323:             						}
1324:             						else
1325:             						if(Bold)
  04F0    083B    LD	A,0x3B
  04F1    1903    SZB	0x3,2
  04F2    2CF5    JP	0x4F5
1326:             						{
1327:             							PATTERN_WORK_TIME=BOLD_12OZ_WORK_TIME;
  04F3    3078    LDIA	0x78
  04F4    2D30    JP	0x530
1328:             						}
1329:             						else
1330:             						if(Iced)
  04F5    083F    LD	A,0x3F
  04F6    1D03    SNZB	0x3,2
  04F7    2CF3    JP	0x4F3
1331:             						{
1332:             							PATTERN_WORK_TIME=ICED_12OZ_WORK_TIME;
1333:             						}
1334:             						else
1335:             						if(Tea)
  04F8    0856    LD	A,0x56
  04F9    1903    SZB	0x3,2
  04FA    2D3C    JP	0x53C
1336:             						{
1337:             							PATTERN_WORK_TIME=TEA_12OZ_WORK_TIME;
  04FB    306E    LDIA	0x6E
  04FC    2D30    JP	0x530
1338:             						}
1339:             					}
1340:             					else
1341:             					if(_210_z)
  04FD    085A    LD	A,0x5A
  04FE    1903    SZB	0x3,2
  04FF    2D17    JP	0x517
1342:             					{
1343:             						Solenoid_Work_Time=SOLENOID_WORK_TIME_21OZ;
  0500    3019    LDIA	0x19
1344:             						Solenoid_Stop_Time=SOLENOID_STOP_TIME_21OZ;
1345:             						if(Regular)
  0501    26E8    CALL	0x6E8
  0502    120A    CLRB	0xA,4
  0503    118A    CLRB	0xA,3
  0504    1903    SZB	0x3,2
  0505    2D08    JP	0x508
1346:             						{
1347:             							PATTERN_WORK_TIME=REGULAR_21OZ_WORK_TIME;
  0506    303C    LDIA	0x3C
  0507    2D30    JP	0x530
1348:             						}
1349:             						else
1350:             						if(Bold)
  0508    083B    LD	A,0x3B
  0509    1903    SZB	0x3,2
  050A    2D0D    JP	0x50D
1351:             						{
1352:             							PATTERN_WORK_TIME=BOLD_21OZ_WORK_TIME;
  050B    30A5    LDIA	0xA5
  050C    2D30    JP	0x530
1353:             						}
1354:             						else
1355:             						if(Iced)
  050D    083F    LD	A,0x3F
  050E    1903    SZB	0x3,2
  050F    2D12    JP	0x512
1356:             						{
1357:             							PATTERN_WORK_TIME=ICED_21OZ_WORK_TIME;
  0510    307D    LDIA	0x7D
  0511    2D30    JP	0x530
1358:             						}
1359:             						else
1360:             						if(Tea)
  0512    0856    LD	A,0x56
  0513    1903    SZB	0x3,2
  0514    2D3C    JP	0x53C
1361:             						{
1362:             							PATTERN_WORK_TIME=TEA_21OZ_WORK_TIME;
  0515    30AA    LDIA	0xAA
  0516    2D30    JP	0x530
1363:             						}
1364:             					}
1365:             					else
1366:             					if(_420_z)
  0517    085B    LD	A,0x5B
  0518    1903    SZB	0x3,2
  0519    2D3C    JP	0x53C
1367:             					{
1368:             						Solenoid_Work_Time=SOLENOID_WORK_TIME_42OZ;
  051A    302D    LDIA	0x2D
  051B    1683    SETB	0x3,5
  051C    00C9    LD	0x49,A
  051D    300A    LDIA	0xA
  051E    01CA    CLR	0x4A
1369:             						Solenoid_Stop_Time=SOLENOID_STOP_TIME_42OZ;
  051F    00C7    LD	0x47,A
  0520    01C8    CLR	0x48
1370:             						if(Regular)
  0521    1283    CLRB	0x3,5
  0522    0852    LD	A,0x52
  0523    1903    SZB	0x3,2
  0524    2D27    JP	0x527
1371:             						{
1372:             							PATTERN_WORK_TIME=REGULAR_42OZ_WORK_TIME;
  0525    3031    LDIA	0x31
  0526    2D38    JP	0x538
1373:             						}
1374:             						else
1375:             						if(Bold)
  0527    083B    LD	A,0x3B
  0528    1903    SZB	0x3,2
  0529    2D2C    JP	0x52C
1376:             						{
1377:             							PATTERN_WORK_TIME=BOLD_42OZ_WORK_TIME;
  052A    306D    LDIA	0x6D
  052B    2D38    JP	0x538
1378:             						}
1379:             						else
1380:             						if(Iced)
  052C    083F    LD	A,0x3F
  052D    1903    SZB	0x3,2
  052E    2D34    JP	0x534
1381:             						{
1382:             							PATTERN_WORK_TIME=ICED_42OZ_WORK_TIME;
  052F    30C3    LDIA	0xC3
  0530    1683    SETB	0x3,5
  0531    00B9    LD	0x39,A
  0532    01BA    CLR	0x3A
1383:             						}
  0533    2D3C    JP	0x53C
1384:             						else
1385:             						if(Tea)
  0534    0856    LD	A,0x56
  0535    1903    SZB	0x3,2
  0536    2D3C    JP	0x53C
1386:             						{
1387:             							PATTERN_WORK_TIME=TEA_42OZ_WORK_TIME;
  0537    304A    LDIA	0x4A
  0538    1683    SETB	0x3,5
  0539    00B9    LD	0x39,A
  053A    3001    LDIA	0x1
  053B    00BA    LD	0x3A,A
1388:             						}
1389:             					}
1390:             
1391:             					//LCD_HOUR_Flash_Times=UINT8_MAX;	//LCD前两位不闪烁
1392:             					//LCD_MINUTE_Flash_Times=UINT8_MAX;//LCD后两位不闪烁
1393:             					Pattern_Work_State=PATTERN_WORK__HOTING;
  053C    1683    SETB	0x3,5
  053D    01EA    CLR	0x6A
  053E    0AEA    INCR	0x6A
1394:             				break;
  053F    0008    RET
1395:             				
1396:             				case PATTERN_WORK__HOTING:
1397:             					HOT_MAJOR_State=STATE_HOT_MAJOR_ON;
  0540    1283    CLRB	0x3,5
  0541    01BD    CLR	0x3D
  0542    0ABD    INCR	0x3D
1398:             					HOT_BOTTOM_ON();
  0543    1407    SETB	0x7,0
1399:             					Solenoid_State=STATE_SOLENOID_OFF;	
  0544    01D4    CLR	0x54
1400:             									
1401:             					if(Temperature_Dat>=Water_Temp)
  0545    2727    CALL	0x727
  0546    120A    CLRB	0xA,4
  0547    118A    CLRB	0xA,3
  0548    1C03    SNZB	0x3,0
  0549    0008    RET
1402:             					{
1403:             						Pattern_Work_State=PATTERN_WORK__HOT_FINSHE;
  054A    3002    LDIA	0x2
  054B    1683    SETB	0x3,5
  054C    00EA    LD	0x6A,A
1404:             						Solenoid_State=STATE_SOLENOID_ON_TIME;
  054D    1283    CLRB	0x3,5
  054E    00D4    LD	0x54,A
  054F    0008    RET
1405:             					}
1406:             					break;
1407:             				case PATTERN_WORK__HOT_FINSHE:
1408:             
1409:             					if(Temperature_Dat>=Water_Temp)
  0550    1283    CLRB	0x3,5
  0551    2727    CALL	0x727
  0552    120A    CLRB	0xA,4
  0553    118A    CLRB	0xA,3
1410:             					{
1411:             						HOT_MAJOR_State=STATE_HOT_MAJOR_OFF;
  0554    01BD    CLR	0x3D
  0555    1C03    SNZB	0x3,0
1412:             					}
  0556    0ABD    INCR	0x3D
1413:             					else
1414:             					{
1415:             						HOT_MAJOR_State=STATE_HOT_MAJOR_ON;
1416:             					}
1417:             					
1418:             					//电磁阀状态控制
1419:             					if(!Tea)
  0557    08D6    TESTZ	0x56
  0558    1D03    SNZB	0x3,2
  0559    2D87    JP	0x587
1420:             					{
1421:             						if(Solenoid_ON_Time>=Solenoid_Work_Time)
  055A    1683    SETB	0x3,5
  055B    084A    LD	A,0x4A
  055C    0244    SUBA	0x44
  055D    1D03    SNZB	0x3,2
  055E    2D61    JP	0x561
  055F    0849    LD	A,0x49
  0560    0243    SUBA	0x43
  0561    1C03    SNZB	0x3,0
  0562    2D66    JP	0x566
1422:             							Solenoid_State=STATE_SOLENOID_OFF_TIME;
  0563    3003    LDIA	0x3
  0564    1283    CLRB	0x3,5
  0565    00D4    LD	0x54,A
1423:             						
1424:             						if(Solenoid_OFF_Time>=Solenoid_Stop_Time)
  0566    1683    SETB	0x3,5
  0567    0848    LD	A,0x48
  0568    0240    SUBA	0x40
  0569    1D03    SNZB	0x3,2
  056A    2D6D    JP	0x56D
  056B    0847    LD	A,0x47
  056C    023F    SUBA	0x3F
  056D    1C03    SNZB	0x3,0
  056E    2D90    JP	0x590
1425:             							if(++Pattern_Work_Times>=PATTERN_WORK__TIMES)
  056F    30FA    LDIA	0xFA
  0570    0AEB    INCR	0x6B
  0571    026B    SUBA	0x6B
  0572    1C03    SNZB	0x3,0
  0573    2D90    JP	0x590
1426:             							{
1427:             								Solenoid_State=STATE_SOLENOID_ON;
  0574    1283    CLRB	0x3,5
  0575    01D4    CLR	0x54
  0576    0AD4    INCR	0x54
1428:             								Pattern_Work_Times=0;
  0577    1683    SETB	0x3,5
  0578    01EB    CLR	0x6B
1429:             								Pattern_Work_Time++;
  0579    0ABD    INCR	0x3D
  057A    1903    SZB	0x3,2
  057B    0ABE    INCR	0x3E
1430:             								if(Pattern_Work_Time>=PATTERN_WORK_TIME)
  057C    083A    LD	A,0x3A
  057D    023E    SUBA	0x3E
  057E    1D03    SNZB	0x3,2
  057F    2D82    JP	0x582
  0580    0839    LD	A,0x39
  0581    023D    SUBA	0x3D
  0582    1C03    SNZB	0x3,0
  0583    2D90    JP	0x590
1431:             								Pattern_Work_State=PATTERN_WORK__TIME_OUT;
  0584    3003    LDIA	0x3
  0585    00EA    LD	0x6A,A
  0586    2D90    JP	0x590
1432:             							}
1433:             						//电机状态控制
1434:             					}
1435:             					else
1436:             					{
1437:             						if(Solenoid_ON_Time>=PATTERN_WORK_TIME)
  0587    1683    SETB	0x3,5
  0588    083A    LD	A,0x3A
  0589    0244    SUBA	0x44
  058A    1D03    SNZB	0x3,2
  058B    2D8E    JP	0x58E
  058C    0839    LD	A,0x39
  058D    0243    SUBA	0x43
  058E    1803    SZB	0x3,0
  058F    2D84    JP	0x584
1438:             							Pattern_Work_State=PATTERN_WORK__TIME_OUT;
1439:             					}
1440:             					MOTOR_ON();
  0590    1283    CLRB	0x3,5
  0591    1785    SETB	0x5,7
1441:             					break;
  0592    0008    RET
1442:             				case PATTERN_WORK__TIME_OUT:
1443:             					HOT_MAJOR_State=STATE_HOT_MAJOR_OFF;
  0593    1283    CLRB	0x3,5
  0594    3023    LDIA	0x23
  0595    01BD    CLR	0x3D
1444:             					
1445:             					ANNULUS_LIGHT_State=LED_OFF;//
  0596    01B7    CLR	0x37
1446:             					SHOW_LIGHT_State=LED_OFF;//
  0597    01D3    CLR	0x53
1447:             					
1448:             					Solenoid_State=STATE_SOLENOID_OFF;
  0598    01D4    CLR	0x54
1449:             					MOTOR_OFF();
  0599    1385    CLRB	0x5,7
1450:             					
1451:             					//Pattern_LED_Crt=LED_CRT_FINISH_INIT;
1452:             					//Pattern_LED_Crt=LED_CRT_FINISH;
1453:             					
1454:             					//Rbeep=6;	//蜂鸣器叫三声
1455:             					if(WorkMinute>=35)
  059A    0257    SUBA	0x57
  059B    1C03    SNZB	0x3,0
  059C    0008    RET
1456:             						Pattern_Work_State=PATTERN_WORK_WATAING_35MIN_INIT;
  059D    3004    LDIA	0x4
  059E    1683    SETB	0x3,5
  059F    00EA    LD	0x6A,A
  05A0    0008    RET
1457:             					
1458:             					//Start=0;
1459:             					break;
1460:             				case PATTERN_WORK_WATAING_35MIN_INIT:
1461:             					Rbeep=6;	//蜂鸣器叫三声
  05A1    3006    LDIA	0x6
  05A2    1283    CLRB	0x3,5
  05A3    00D0    LD	0x50,A
1462:             					Pattern_LED_Crt=LED_CRT_FINISH;
  05A4    3005    LDIA	0x5
  05A5    1683    SETB	0x3,5
  05A6    00BB    LD	0x3B,A
  05A7    01BC    CLR	0x3C
1463:             					Pattern_Work_State=PATTERN_WORK_WATAING_35MIN;
  05A8    00EA    LD	0x6A,A
1464:             					break;
  05A9    0008    RET
1465:             				case PATTERN_WORK_WATAING_35MIN:
1466:             					HOT_BOTTOM_OFF();
  05AA    1283    CLRB	0x3,5
  05AB    1007    CLRB	0x7,0
1467:             					
1468:             					//Pattern_LED_Crt=LED_CRT_FINISH;
1469:             					if(Start) Pattern_State=POWER_ON_INIT;
  05AC    0855    LD	A,0x55
  05AD    1903    SZB	0x3,2
  05AE    0008    RET
  05AF    1683    SETB	0x3,5
  05B0    01E9    CLR	0x69
  05B1    0008    RET
  05B2    1683    SETB	0x3,5
  05B3    086A    LD	A,0x6A
  05B4    3A00    XORIA	0x0
  05B5    1903    SZB	0x3,2
  05B6    2CCC    JP	0x4CC
  05B7    3A01    XORIA	0x1
  05B8    1903    SZB	0x3,2
  05B9    2D40    JP	0x540
  05BA    3A03    XORIA	0x3
  05BB    1903    SZB	0x3,2
  05BC    2D50    JP	0x550
  05BD    3A01    XORIA	0x1
  05BE    1903    SZB	0x3,2
  05BF    2D93    JP	0x593
  05C0    3A07    XORIA	0x7
  05C1    1903    SZB	0x3,2
  05C2    2DA1    JP	0x5A1
  05C3    3A01    XORIA	0x1
  05C4    1903    SZB	0x3,2
  05C5    2DAA    JP	0x5AA
  05C6    2DEE    JP	0x5EE
  05C7    1683    SETB	0x3,5
  05C8    0869    LD	A,0x69
  05C9    3A00    XORIA	0x0
  05CA    1903    SZB	0x3,2
  05CB    2817    JP	0x17
  05CC    3A01    XORIA	0x1
  05CD    1903    SZB	0x3,2
  05CE    2875    JP	0x75
  05CF    3A03    XORIA	0x3
  05D0    1903    SZB	0x3,2
  05D1    289D    JP	0x9D
  05D2    3A01    XORIA	0x1
  05D3    1903    SZB	0x3,2
  05D4    28A4    JP	0xA4
  05D5    3A07    XORIA	0x7
  05D6    1903    SZB	0x3,2
  05D7    28C1    JP	0xC1
  05D8    3A01    XORIA	0x1
  05D9    1903    SZB	0x3,2
  05DA    28D6    JP	0xD6
  05DB    3A03    XORIA	0x3
  05DC    1903    SZB	0x3,2
  05DD    2AE4    JP	0x2E4
  05DE    3A01    XORIA	0x1
  05DF    1903    SZB	0x3,2
  05E0    2AF2    JP	0x2F2
  05E1    3A0F    XORIA	0xF
  05E2    1903    SZB	0x3,2
  05E3    2B8A    JP	0x38A
  05E4    3A01    XORIA	0x1
  05E5    1903    SZB	0x3,2
  05E6    2B8D    JP	0x38D
  05E7    3A03    XORIA	0x3
  05E8    1903    SZB	0x3,2
  05E9    2C27    JP	0x427
  05EA    3A01    XORIA	0x1
  05EB    1903    SZB	0x3,2
  05EC    2C54    JP	0x454
  05ED    2DEE    JP	0x5EE
  05EE    0008    RET
1470:             					break;
1471:             			}
1472:             			
1473:             			break;
1474:             			
1475:             				
1476:             	}
1477:             }
1478:             void LED_Crt()
1479:             {
1480:             	switch(Pattern_LED_Crt)
  15E9    2EC9    JP	0x6C9
1481:             	{
1482:             		case LED_CRT_POWER_ON_INIT:
1483:             			BG_LED_State=LED_Flash;//背光灯打开，并计时
  15EA    3002    LDIA	0x2
  15EB    1283    CLRB	0x3,5
  15EC    00BA    LD	0x3A,A
1484:             			BG_LED_ON_Time=0;
  15ED    01B9    CLR	0x39
1485:             			
1486:             			ANNULUS_LIGHT_State=LED_Flash;
  15EE    00B7    LD	0x37,A
1487:             			SHOW_LIGHT_State=LED_Flash;
  15EF    00D3    LD	0x53,A
1488:             			ANNULUS_LIGHT_Flash_Times=0;
  15F0    01FA    CLR	0x7A
1489:             			SHOW_LIGHT_Flash_Times=0;
  15F1    1683    SETB	0x3,5
  15F2    01EC    CLR	0x6C
1490:             			
1491:             			LED_Flash_HZ=0;
  15F3    01FB    CLR	0x7B
1492:             			LED_Flash_Bool=1;
  15F4    16F2    SETB	0x72,5
1493:             			LED1_Flash_Times=0;
  15F5    1283    CLRB	0x3,5
  15F6    01C3    CLR	0x43
1494:             			LED1_State=LED_Flash;
  15F7    00C4    LD	0x44,A
1495:             			LED2_State=LED_Flash;
  15F8    00C5    LD	0x45,A
1496:             			LED3_State=LED_Flash;
  15F9    00C6    LD	0x46,A
1497:             			LED4_State=LED_Flash;
  15FA    00C7    LD	0x47,A
1498:             			LED5_State=LED_Flash;	
  15FB    00C8    LD	0x48,A
1499:             			LED6_State=LED_Flash;				
  15FC    00C9    LD	0x49,A
1500:             			LED7_State=LED_Flash;				
  15FD    00CA    LD	0x4A,A
1501:             			LED8_State=LED_Flash;				
  15FE    00CB    LD	0x4B,A
1502:             			LED9_State=LED_Flash;				
  15FF    00CC    LD	0x4C,A
1503:             			LED10_State=LED_Flash;				
  1600    00C1    LD	0x41,A
1504:             			LED11_State=LED_Flash;				
  1601    00C2    LD	0x42,A
1505:             			LED12_State=LED_Flash;
  1602    1683    SETB	0x3,5
  1603    00E0    LD	0x60,A
1506:             			Pattern_LED_Crt=LED_CRT_POWER_ON;
  1604    01BB    CLR	0x3B
  1605    0ABB    INCR	0x3B
  1606    01BC    CLR	0x3C
1507:             			break;
  1607    0008    RET
1508:             			
1509:             		case LED_CRT_POWER_ON:
1510:             			if(LED1_Flash_Times>3)
  1608    3004    LDIA	0x4
  1609    1283    CLRB	0x3,5
  160A    0243    SUBA	0x43
  160B    1C03    SNZB	0x3,0
  160C    2E16    JP	0x616
1511:             				{
1512:             					BG_LED_State=LED_ON_TIME;
  160D    3003    LDIA	0x3
  160E    00BA    LD	0x3A,A
1513:             					if(!LED_Flash_Bool) //平滑过渡
  160F    1AF2    SZB	0x72,5
  1610    2E16    JP	0x616
1514:             					{	
1515:             						LED1_State=LED_OFF;
  1611    01C4    CLR	0x44
1516:             						LED2_State=LED_OFF;
1517:             						LED3_State=LED_OFF;
1518:             						LED4_State=LED_OFF;
1519:             						LED5_State=LED_OFF;	
1520:             						LED6_State=LED_OFF;				
1521:             						LED7_State=LED_OFF;				
1522:             						LED8_State=LED_OFF;				
1523:             						LED9_State=LED_OFF;				
1524:             						LED10_State=LED_OFF;				
1525:             						LED11_State=LED_OFF;				
1526:             						LED12_State=LED_OFF;				
  1612    26E4    CALL	0x6E4
  1613    160A    SETB	0xA,4
  1614    118A    CLRB	0xA,3
  1615    01E0    CLR	0x60
1527:             					}
1528:             				}
1529:             			if(ANNULUS_LIGHT_Flash_Times>3)
  1616    3004    LDIA	0x4
  1617    027A    SUBA	0x7A
  1618    1803    SZB	0x3,0
1530:             			{
1531:             				if(!LED_Flash_Bool) //平滑过渡
  1619    1AF2    SZB	0x72,5
  161A    0008    RET
1532:             				{
1533:             					ANNULUS_LIGHT_State=LED_OFF;
  161B    1283    CLRB	0x3,5
  161C    01B7    CLR	0x37
1534:             					SHOW_LIGHT_State=LED_OFF;
  161D    01D3    CLR	0x53
1535:             				}
1536:             			}
1537:             			break;
  161E    0008    RET
1538:             			
1539:             		case LED_CRT_OPTION_INIT:
1540:             			BG_LED_State=LED_ON;//背光灯打开
  161F    1283    CLRB	0x3,5
  1620    01BA    CLR	0x3A
  1621    0ABA    INCR	0x3A
1541:             			ANNULUS_LIGHT_State=LED_OFF;//
  1622    01B7    CLR	0x37
1542:             			SHOW_LIGHT_State=LED_OFF;//
  1623    01D3    CLR	0x53
1543:             			LED1_State=LED_OFF;
  1624    01C4    CLR	0x44
1544:             			LED2_State=LED_OFF;
1545:             			LED3_State=LED_OFF;
1546:             			LED4_State=LED_OFF;
1547:             			LED5_State=LED_OFF;	
1548:             			LED6_State=LED_OFF;				
1549:             			LED7_State=LED_OFF;				
1550:             			LED8_State=LED_OFF;				
1551:             			LED9_State=LED_OFF;				
1552:             			LED10_State=LED_OFF;				
1553:             			LED11_State=LED_OFF;				
1554:             			LED12_State=LED_OFF;
  1625    26E4    CALL	0x6E4
  1626    3003    LDIA	0x3
  1627    01E0    CLR	0x60
1555:             			Pattern_LED_Crt=LED_CRT_OPTION;
  1628    00BB    LD	0x3B,A
  1629    01BC    CLR	0x3C
1556:             			break;
  162A    0008    RET
1557:             		
1558:             		case LED_CRT_OPTION:
1559:             			
1560:             			if(Option)
  162B    1283    CLRB	0x3,5
  162C    084F    LD	A,0x4F
  162D    1903    SZB	0x3,2
  162E    2E32    JP	0x632
1561:             			{
1562:             				LED11_State=LED_ON;
  162F    01C2    CLR	0x42
  1630    0AC2    INCR	0x42
1563:             			}
  1631    2E33    JP	0x633
1564:             			else
1565:             			{
1566:             				LED11_State=LED_OFF;
  1632    01C2    CLR	0x42
1567:             			}
1568:             			if(Start)
  1633    0855    LD	A,0x55
  1634    1903    SZB	0x3,2
  1635    2E39    JP	0x639
1569:             			{
1570:             				LED12_State=LED_ON;			
  1636    1683    SETB	0x3,5
  1637    01E0    CLR	0x60
  1638    0AE0    INCR	0x60
1571:             			}
1572:             			else
1573:             			{
1574:             				//LED12_State=LED_OFF;			
1575:             			}
1576:             			if(Regular)
  1639    1283    CLRB	0x3,5
  163A    0852    LD	A,0x52
  163B    1903    SZB	0x3,2
  163C    2E41    JP	0x641
1577:             			{
1578:             				LED1_State=LED_ON;
  163D    01C4    CLR	0x44
  163E    0AC4    INCR	0x44
1579:             				LED2_State=LED_OFF;
  163F    01C5    CLR	0x45
  1640    2E47    JP	0x647
1580:             				LED3_State=LED_OFF;
1581:             				LED4_State=LED_OFF;
1582:             			}
1583:             			else if(Bold)
  1641    083B    LD	A,0x3B
  1642    1903    SZB	0x3,2
  1643    2E49    JP	0x649
1584:             			{
1585:             				LED1_State=LED_OFF;
  1644    01C4    CLR	0x44
1586:             				LED2_State=LED_ON;
  1645    01C5    CLR	0x45
  1646    0AC5    INCR	0x45
1587:             				LED3_State=LED_OFF;
  1647    01C6    CLR	0x46
  1648    2E50    JP	0x650
1588:             				LED4_State=LED_OFF;
1589:             			}
1590:             			else if(Iced)
  1649    083F    LD	A,0x3F
  164A    1903    SZB	0x3,2
  164B    2E52    JP	0x652
1591:             			{
1592:             				LED1_State=LED_OFF;
  164C    01C4    CLR	0x44
1593:             				LED2_State=LED_OFF;
  164D    01C5    CLR	0x45
1594:             				LED3_State=LED_ON;
  164E    01C6    CLR	0x46
  164F    0AC6    INCR	0x46
1595:             				LED4_State=LED_OFF;
  1650    01C7    CLR	0x47
1596:             			}
  1651    2E5A    JP	0x65A
1597:             			else if(Tea)
  1652    0856    LD	A,0x56
  1653    1903    SZB	0x3,2
  1654    2E5A    JP	0x65A
1598:             			{
1599:             				LED1_State=LED_OFF;
  1655    01C4    CLR	0x44
1600:             				LED2_State=LED_OFF;
  1656    01C5    CLR	0x45
1601:             				LED3_State=LED_OFF;
  1657    01C6    CLR	0x46
1602:             				LED4_State=LED_ON;
  1658    01C7    CLR	0x47
  1659    0AC7    INCR	0x47
1603:             			}
1604:             			
1605:             			if(_80_z)
  165A    085C    LD	A,0x5C
  165B    1903    SZB	0x3,2
  165C    2E63    JP	0x663
1606:             			{
1607:             				LED7_State=LED_ON;
  165D    01CA    CLR	0x4A
  165E    0ACA    INCR	0x4A
1608:             				LED8_State=LED_OFF;
  165F    01CB    CLR	0x4B
1609:             				LED9_State=LED_OFF;
  1660    01CC    CLR	0x4C
1610:             				LED10_State=LED_OFF;
  1661    01C1    CLR	0x41
1611:             			}
  1662    0008    RET
1612:             			else if(_120_z)
  1663    0859    LD	A,0x59
  1664    1903    SZB	0x3,2
  1665    2E6C    JP	0x66C
1613:             			{
1614:             				LED7_State=LED_OFF;
  1666    01CA    CLR	0x4A
1615:             				LED8_State=LED_ON;
  1667    01CB    CLR	0x4B
  1668    0ACB    INCR	0x4B
1616:             				LED9_State=LED_OFF;
  1669    01CC    CLR	0x4C
1617:             				LED10_State=LED_OFF;
  166A    01C1    CLR	0x41
1618:             			}
  166B    0008    RET
1619:             			else if(_210_z)
  166C    085A    LD	A,0x5A
  166D    1903    SZB	0x3,2
  166E    2E75    JP	0x675
1620:             			{
1621:             				LED7_State=LED_OFF;
  166F    01CA    CLR	0x4A
1622:             				LED8_State=LED_OFF;
  1670    01CB    CLR	0x4B
1623:             				LED9_State=LED_ON;
  1671    01CC    CLR	0x4C
  1672    0ACC    INCR	0x4C
1624:             				LED10_State=LED_OFF;
  1673    01C1    CLR	0x41
1625:             			}
  1674    0008    RET
1626:             			else if(_420_z)
  1675    085B    LD	A,0x5B
  1676    1903    SZB	0x3,2
  1677    0008    RET
1627:             			{
1628:             				LED7_State=LED_OFF;
  1678    01CA    CLR	0x4A
1629:             				LED8_State=LED_OFF;
  1679    01CB    CLR	0x4B
1630:             				LED9_State=LED_OFF;
  167A    01CC    CLR	0x4C
1631:             				LED10_State=LED_ON;
  167B    01C1    CLR	0x41
  167C    0AC1    INCR	0x41
  167D    0008    RET
1632:             			}
1633:             			break;
1634:             		case LED_CRT_FINISH_INIT:
1635:             			Pattern_LED_Crt=LED_CRT_FINISH;
  167E    3005    LDIA	0x5
  167F    00BB    LD	0x3B,A
  1680    01BC    CLR	0x3C
1636:             			break;
  1681    0008    RET
1637:             		
1638:             		case LED_CRT_FINISH:
1639:             			BG_LED_State=LED_ON;//背光灯打开
  1682    1283    CLRB	0x3,5
  1683    3002    LDIA	0x2
  1684    01BA    CLR	0x3A
  1685    0ABA    INCR	0x3A
1640:             			LED12_State=LED_Flash;
  1686    1683    SETB	0x3,5
  1687    00E0    LD	0x60,A
1641:             			LED12_Flash_Times=0;
  1688    01DF    CLR	0x5F
1642:             			if(Regular)
  1689    1283    CLRB	0x3,5
  168A    0852    LD	A,0x52
  168B    1903    SZB	0x3,2
  168C    2E91    JP	0x691
1643:             			{
1644:             				LED1_State=LED_Flash;
  168D    3002    LDIA	0x2
  168E    00C4    LD	0x44,A
1645:             				LED1_Flash_Times=0;
  168F    01C3    CLR	0x43
1646:             			}
  1690    2EA8    JP	0x6A8
1647:             			else
1648:             			if(Bold)
  1691    083B    LD	A,0x3B
  1692    1903    SZB	0x3,2
  1693    2E99    JP	0x699
1649:             			{
1650:             				LED2_State=LED_Flash;
  1694    3002    LDIA	0x2
  1695    00C5    LD	0x45,A
1651:             				LED2_Flash_Times=0;
  1696    1683    SETB	0x3,5
  1697    01E1    CLR	0x61
1652:             			}
  1698    2EA8    JP	0x6A8
1653:             			else
1654:             			if(Iced)
  1699    083F    LD	A,0x3F
  169A    1903    SZB	0x3,2
  169B    2EA1    JP	0x6A1
1655:             			{
1656:             				LED3_State=LED_Flash;
  169C    3002    LDIA	0x2
  169D    00C6    LD	0x46,A
1657:             				LED3_Flash_Times=0;
  169E    1683    SETB	0x3,5
  169F    01E2    CLR	0x62
1658:             			}
  16A0    2EA8    JP	0x6A8
1659:             			else
1660:             			if(Tea)
  16A1    0856    LD	A,0x56
  16A2    1903    SZB	0x3,2
  16A3    2EA8    JP	0x6A8
1661:             			{
1662:             				LED4_State=LED_Flash;
  16A4    3002    LDIA	0x2
  16A5    00C7    LD	0x47,A
1663:             				LED4_Flash_Times=0;
  16A6    1683    SETB	0x3,5
  16A7    01E3    CLR	0x63
1664:             			}
1665:             			if(_80_z)
  16A8    1283    CLRB	0x3,5
  16A9    085C    LD	A,0x5C
  16AA    1903    SZB	0x3,2
  16AB    2EB1    JP	0x6B1
1666:             			{
1667:             				LED7_State=LED_Flash;
  16AC    3002    LDIA	0x2
  16AD    00CA    LD	0x4A,A
1668:             				LED7_Flash_Times=0;
  16AE    1683    SETB	0x3,5
  16AF    01E6    CLR	0x66
1669:             			}
  16B0    0008    RET
1670:             			else
1671:             			if(_120_z)
  16B1    0859    LD	A,0x59
  16B2    1903    SZB	0x3,2
  16B3    2EB9    JP	0x6B9
1672:             			{
1673:             				LED8_State=LED_Flash;
  16B4    3002    LDIA	0x2
  16B5    00CB    LD	0x4B,A
1674:             				LED8_Flash_Times=0;
  16B6    1683    SETB	0x3,5
  16B7    01E7    CLR	0x67
1675:             			}
  16B8    0008    RET
1676:             			else
1677:             			if(_210_z)
  16B9    085A    LD	A,0x5A
  16BA    1903    SZB	0x3,2
  16BB    2EC1    JP	0x6C1
1678:             			{
1679:             				LED9_State=LED_Flash;
  16BC    3002    LDIA	0x2
  16BD    00CC    LD	0x4C,A
1680:             				LED9_Flash_Times=0;
  16BE    1683    SETB	0x3,5
  16BF    01E8    CLR	0x68
1681:             			}
  16C0    0008    RET
1682:             			else
1683:             			if(_420_z)
  16C1    085B    LD	A,0x5B
  16C2    1903    SZB	0x3,2
  16C3    0008    RET
1684:             			{
1685:             				LED10_State=LED_Flash;
  16C4    3002    LDIA	0x2
  16C5    00C1    LD	0x41,A
1686:             				LED10_Flash_Times=0;
  16C6    1683    SETB	0x3,5
  16C7    01DD    CLR	0x5D
  16C8    0008    RET
  16C9    1683    SETB	0x3,5
  16CA    083C    LD	A,0x3C
  16CB    3A00    XORIA	0x0
  16CC    1903    SZB	0x3,2
  16CD    2ECF    JP	0x6CF
  16CE    2EE3    JP	0x6E3
  16CF    083B    LD	A,0x3B
  16D0    3A00    XORIA	0x0
  16D1    1903    SZB	0x3,2
  16D2    2DEA    JP	0x5EA
  16D3    3A01    XORIA	0x1
  16D4    1903    SZB	0x3,2
  16D5    2E08    JP	0x608
  16D6    3A03    XORIA	0x3
  16D7    1903    SZB	0x3,2
  16D8    2E1F    JP	0x61F
  16D9    3A01    XORIA	0x1
  16DA    1903    SZB	0x3,2
  16DB    2E2B    JP	0x62B
  16DC    3A07    XORIA	0x7
  16DD    1903    SZB	0x3,2
  16DE    2E7E    JP	0x67E
  16DF    3A01    XORIA	0x1
  16E0    1903    SZB	0x3,2
  16E1    2E82    JP	0x682
  16E2    2EE3    JP	0x6E3
  16E3    0008    RET
1687:             			}
1688:             		
1689:             			break;
1690:             		
1691:             	}	
1692:             }
1693:             
1694:             void AcTestZero()
1695:             {
1696:             	if(AC_PIN!=old_LHResult)
  13E9    1F73    SNZB	0x73,6
  13EA    2BED    JP	0x3ED
  13EB    3001    LDIA	0x1
  13EC    2BEE    JP	0x3EE
  13ED    3000    LDIA	0x0
  13EE    1283    CLRB	0x3,5
  13EF    1303    CLRB	0x3,6
  13F0    00DD    LD	0x5D,A
  13F1    1C86    SNZB	0x6,1
  13F2    2BF5    JP	0x3F5
  13F3    3001    LDIA	0x1
  13F4    2BF6    JP	0x3F6
  13F5    3000    LDIA	0x0
  13F6    065D    XORA	0x5D
  13F7    1903    SZB	0x3,2
  13F8    2C03    JP	0x403
1697:             	{
1698:             		old_LHResult=AC_PIN;
  13F9    1373    CLRB	0x73,6
  13FA    1C86    SNZB	0x6,1
  13FB    2BFD    JP	0x3FD
  13FC    1773    SETB	0x73,6
1699:             		
1700:             		No_AC=0;
  13FD    1372    CLRB	0x72,6
1701:             		LH_Count=0;			
  13FE    1683    SETB	0x3,5
  13FF    1303    CLRB	0x3,6
  1400    01B7    CLR	0x37
  1401    01B8    CLR	0x38
1702:             	}
  1402    2C07    JP	0x407
1703:             	else 
1704:             	{
1705:             		LH_Count++;	
  1403    1683    SETB	0x3,5
  1404    0AB7    INCR	0x37
  1405    1903    SZB	0x3,2
  1406    0AB8    INCR	0x38
1706:             	}
1707:             	
1708:             	if(LH_Count>=4)
  1407    3000    LDIA	0x0
  1408    0238    SUBA	0x38
  1409    3004    LDIA	0x4
  140A    1903    SZB	0x3,2
  140B    0237    SUBA	0x37
  140C    1803    SZB	0x3,0
1709:             	    No_AC=1;
  140D    1772    SETB	0x72,6
  140E    0008    RET
1710:             		
1711:             	
1712:             }
1713:             void ShutDowm_Device()
1714:             {
1715:             	//INTCON=0B11001000;		//关总中断，允许外设中断，允许PB口电平变化中断
1716:             	//INTCON=0B11001000;		//关总中断，允许外设中断，允许PB口电平变化中断
1717:             	/*T2CON = 0;				//禁止TIME2
1718:             	TMR2IF = 0;				//清除TIME2中断标志位
1719:             	PIE1 = 0;				//禁止TIME2匹配中断
1720:             	ADCON0 = 0;				//关ADC
1721:             	*/
1722:             	//WDTCON=0;		//关闭看门狗
1723:             	
1724:             	//关所有外设
1725:             	
1726:             	ADCON0 = 0;				//关ADC
  1553    1283    CLRB	0x3,5
  1554    019F    CLR	0x1F
1727:             	
1728:             	
1729:             	Temp_595[LED_1_6]=0xFF;
  1555    30FF    LDIA	0xFF
  1556    00A5    LD	0x25,A
1730:             	Temp_595[LED_7_12]=0xFF;
  1557    00A6    LD	0x26,A
1731:             	Temp_595[SEG0_8]=0x00;
  1558    01A7    CLR	0x27
1732:             	
1733:             	BEEP_OFF();
  1559    13A5    CLRB	0x25,7
1734:             	BG_LED_OFF();
  155A    1325    CLRB	0x25,6
1735:             	MOTOR_OFF();
  155B    1385    CLRB	0x5,7
1736:             	HOT_BOTTOM_OFF();
  155C    1007    CLRB	0x7,0
1737:             	HOT_MAJOR_OFF();
  155D    1305    CLRB	0x5,6
1738:             	SHOW_LIGHT_OFF();
  155E    13A6    CLRB	0x26,7
1739:             	ANNULUS_LIGHT_OFF();
  155F    1326    CLRB	0x26,6
1740:             	
1741:             	_74HC595_SET(); 	//执行595缓冲器数据
  1560    25AA    CALL	0x5AA
  1561    160A    SETB	0xA,4
  1562    118A    CLRB	0xA,3
1742:             	
1743:             	//4个COM口输出低电平
1744:             	TRISC &= ~(0x3C);
  1563    30C3    LDIA	0xC3
  1564    1683    SETB	0x3,5
  1565    0587    ANDR	0x7
1745:             	RC2=0;
  1566    1283    CLRB	0x3,5
  1567    1107    CLRB	0x7,2
1746:             	RC3=0;
  1568    1187    CLRB	0x7,3
1747:             	RC4=0;
  1569    1207    CLRB	0x7,4
1748:             	RC5=0;
  156A    1287    CLRB	0x7,5
1749:             	
1750:             	WDTCON=0;		//关闭看门狗
  156B    1703    SETB	0x3,6
  156C    0185    CLR	0x5
1751:             	
1752:             	TRISE = 0B00000000;
  156D    1683    SETB	0x3,5
  156E    1303    CLRB	0x3,6
  156F    0189    CLR	0x9
1753:             	TRISB = 0B00000010;
  1570    3002    LDIA	0x2
  1571    0086    LD	0x6,A
1754:             	//TRISC = 0B11111111;
1755:             	//RA0-RA5,RB2-RB7//电容按键,RA6-底部NTC RA7-电机
1756:             	TRISA = 0B00000000;	
  1572    0185    CLR	0x5
1757:             	TRISC = 0B00000000;
  1573    0187    CLR	0x7
1758:             	
1759:             	RE1=0;		//NTC输出高电平，阻止耗电
  1574    1283    CLRB	0x3,5
  1575    1089    CLRB	0x9,1
1760:             	RB1=0;		//过零检测端口值为0,当上电即唤醒
  1576    1086    CLRB	0x6,1
1761:             	//LCD COM口上下拉关闭
1762:             	LCDCON0=0;
  1577    1683    SETB	0x3,5
  1578    1703    SETB	0x3,6
  1579    0190    CLR	0x10
1763:             	LCDADD=0;
  157A    0192    CLR	0x12
1764:             	COMEN  =0;
  157B    0197    CLR	0x17
1765:             	TRISC  =0;
  157C    1303    CLRB	0x3,6
  157D    0187    CLR	0x7
1766:             	
1767:             
1768:             	KEYCON0&=0x80;		//关触摸使能
  157E    3080    LDIA	0x80
  157F    1283    CLRB	0x3,5
  1580    1703    SETB	0x3,6
  1581    0593    ANDR	0x13
1769:             	RB1=RB1;
  1582    1303    CLRB	0x3,6
  1583    1C86    SNZB	0x6,1
  1584    2D89    JP	0x589
  1585    1283    CLRB	0x3,5
  1586    1303    CLRB	0x3,6
  1587    1486    SETB	0x6,1
  1588    2D8C    JP	0x58C
  1589    1283    CLRB	0x3,5
  158A    1303    CLRB	0x3,6
  158B    1086    CLRB	0x6,1
  158C    0064    CLRWDT
1770:             	CLRWDT();
1771:             	INTCON=0B00001000;		//关总中断，允许外设中断，允许PB口电平变化中断
  158D    3008    LDIA	0x8
  158E    008B    LD	0xB,A
  158F    0000    NOP
  1590    0000    NOP
  1591    0000    NOP
  1592    0000    NOP
  1593    0063    STOP
  1594    0000    NOP
  1595    0000    NOP
1772:             	asm("nop");
1773:             	asm("nop");
1774:             	asm("nop");
1775:             	asm("nop");
1776:             	asm("SLEEP");
1777:             	asm("nop");
1778:             	asm("nop");
1779:             	//while(1);
1780:             	INTCON = 0B11000000;			//使能中断
  1596    30C0    LDIA	0xC0
  1597    008B    LD	0xB,A
  1598    0000    NOP
  1599    0000    NOP
  159A    0064    CLRWDT
  159B    0000    NOP
  159C    0000    NOP
1781:             	//T2CON = 6;				//使能定时器2, 16分频
1782:             	//PIE1 = 2;				//使能TIME2匹配中断
1783:             	asm("nop");
1784:             	asm("nop");
1785:             	CLRWDT();
1786:             	asm("nop");
1787:             	asm("nop");
1788:             	
1789:             	//RB1过零检测,RE3,RC6，HC595驱动,RC0-主PTC,RC1-HC595时钟，RE1-NTC,RE2-电磁阀
1790:             	TRISE = 0B11110011;
  159D    30F3    LDIA	0xF3
  159E    1683    SETB	0x3,5
  159F    1303    CLRB	0x3,6
1791:             	TRISB = 0B11111111;
1792:             	TRISC = 0B10111100;
1793:             	//RA0-RA5,RB2-RB7//电容按键,RA6-底部NTC RA7-电机
1794:             	TRISA = 0B00111111;	
  15A0    25E1    CALL	0x5E1
  15A1    30B0    LDIA	0xB0
1795:             	No_AC=0;
  15A2    1372    CLRB	0x72,6
1796:             	LH_Count=0;
  15A3    01B7    CLR	0x37
  15A4    01B8    CLR	0x38
1797:             	//恢复COM口上下拉
1798:             	LCDCON0=0B10110000;
  15A5    1703    SETB	0x3,6
  15A6    0090    LD	0x10,A
1799:             	LCDADD =0B01100000;
  15A7    3060    LDIA	0x60
  15A8    0092    LD	0x12,A
  15A9    0008    RET
1800:             	//COMEN  =0B00111100;
1801:             	//TRISC |=0B00111100;
1802:             }
---- E:\BBA'DATA\CMS_ID~1.32_\data\sources\awdiv.c ----------------------------------------------------------------------
1:                // integer signed division
2:                
3:                signed int
4:                __awdiv(signed int divisor, signed int dividend)
5:                {
  05EF    01E2    CLR	0x62
  05F0    1FDE    SNZB	0x5E,7
  05F1    2DF9    JP	0x5F9
  05F2    09DD    COMR	0x5D
  05F3    09DE    COMR	0x5E
  05F4    0ADD    INCR	0x5D
  05F5    1903    SZB	0x3,2
  05F6    0ADE    INCR	0x5E
  05F7    01E2    CLR	0x62
  05F8    0AE2    INCR	0x62
  05F9    1FE0    SNZB	0x60,7
  05FA    2E02    JP	0x602
  05FB    09DF    COMR	0x5F
  05FC    09E0    COMR	0x60
  05FD    0ADF    INCR	0x5F
  05FE    1903    SZB	0x3,2
  05FF    0AE0    INCR	0x60
  0600    3001    LDIA	0x1
  0601    06E2    XORR	0x62
  0602    01E3    CLR	0x63
  0603    01E4    CLR	0x64
  0604    085E    LD	A,0x5E
  0605    045D    ORA	0x5D
  0606    1903    SZB	0x3,2
  0607    2E27    JP	0x627
  0608    01E1    CLR	0x61
  0609    0AE1    INCR	0x61
  060A    1BDE    SZB	0x5E,7
  060B    2E10    JP	0x610
  060C    1003    CLRB	0x3,0
  060D    0DDD    RLCR	0x5D
  060E    0DDE    RLCR	0x5E
  060F    2E09    JP	0x609
  0610    1003    CLRB	0x3,0
  0611    0DE3    RLCR	0x63
  0612    0DE4    RLCR	0x64
  0613    085E    LD	A,0x5E
  0614    0260    SUBA	0x60
  0615    1D03    SNZB	0x3,2
  0616    2E19    JP	0x619
  0617    085D    LD	A,0x5D
  0618    025F    SUBA	0x5F
  0619    1C03    SNZB	0x3,0
  061A    2E23    JP	0x623
  061B    085D    LD	A,0x5D
  061C    02DF    SUBR	0x5F
  061D    085E    LD	A,0x5E
  061E    1C03    SNZB	0x3,0
  061F    03E0    DECR	0x60
  0620    02E0    SUBR	0x60
  0621    1463    SETB	0x63,0
  0622    1003    CLRB	0x3,0
  0623    0CDE    RRCR	0x5E
  0624    0CDD    RRCR	0x5D
  0625    0BE1    SZDECR	0x61
  0626    2E10    JP	0x610
  0627    0862    LD	A,0x62
  0628    1903    SZB	0x3,2
  0629    2E2F    JP	0x62F
  062A    09E3    COMR	0x63
  062B    09E4    COMR	0x64
  062C    0AE3    INCR	0x63
  062D    1903    SZB	0x3,2
  062E    0AE4    INCR	0x64
  062F    0864    LD	A,0x64
  0630    00DE    LD	0x5E,A
  0631    0863    LD	A,0x63
  0632    00DD    LD	0x5D,A
  0633    0008    RET
6:                	signed int	quotient;
7:                	unsigned char	counter, sign;
8:                
9:                	sign = 0;
10:               	if(divisor < 0) {
11:               		divisor = -divisor;
12:               		sign = 1;
13:               	}
14:               	if(dividend < 0) {
15:               		dividend = -dividend;
16:               		sign ^= 1;
17:               	}
18:               	quotient = 0;
19:               	if(divisor != 0) {
20:               		counter = 1;
21:               		while((divisor & 0x8000U) == 0) {
22:               			divisor <<= 1;
23:               			counter++;
24:               		}
25:               		do {
26:               			quotient <<= 1;
27:               			if((unsigned int)divisor <= (unsigned int)dividend) {
28:               				dividend -= divisor;
29:               				quotient |= 1;
30:               			}
31:               			*(unsigned int *)&divisor >>= 1;
32:               		} while(--counter != 0);
33:               	}
34:               	if(sign)
35:               		quotient = -quotient;
36:               	return quotient;
37:               }
---- E:\BBA'DATA\CMS_ID~1.32_\data\sources\awmod.c ----------------------------------------------------------------------
1:                // integer signed unsigned modulus
2:                
3:                signed int
4:                __awmod(signed int divisor, signed int dividend)
5:                {
  0634    01E2    CLR	0x62
  0635    1FE0    SNZB	0x60,7
  0636    2E3E    JP	0x63E
  0637    09DF    COMR	0x5F
  0638    09E0    COMR	0x60
  0639    0ADF    INCR	0x5F
  063A    1903    SZB	0x3,2
  063B    0AE0    INCR	0x60
  063C    01E2    CLR	0x62
  063D    0AE2    INCR	0x62
  063E    1FDE    SNZB	0x5E,7
  063F    2E45    JP	0x645
  0640    09DD    COMR	0x5D
  0641    09DE    COMR	0x5E
  0642    0ADD    INCR	0x5D
  0643    1903    SZB	0x3,2
  0644    0ADE    INCR	0x5E
  0645    085E    LD	A,0x5E
  0646    045D    ORA	0x5D
  0647    1903    SZB	0x3,2
  0648    2E64    JP	0x664
  0649    01E1    CLR	0x61
  064A    0AE1    INCR	0x61
  064B    1BDE    SZB	0x5E,7
  064C    2E51    JP	0x651
  064D    1003    CLRB	0x3,0
  064E    0DDD    RLCR	0x5D
  064F    0DDE    RLCR	0x5E
  0650    2E4A    JP	0x64A
  0651    085E    LD	A,0x5E
  0652    0260    SUBA	0x60
  0653    1D03    SNZB	0x3,2
  0654    2E57    JP	0x657
  0655    085D    LD	A,0x5D
  0656    025F    SUBA	0x5F
  0657    1C03    SNZB	0x3,0
  0658    2E60    JP	0x660
  0659    085D    LD	A,0x5D
  065A    02DF    SUBR	0x5F
  065B    085E    LD	A,0x5E
  065C    1C03    SNZB	0x3,0
  065D    03E0    DECR	0x60
  065E    02E0    SUBR	0x60
  065F    1003    CLRB	0x3,0
  0660    0CDE    RRCR	0x5E
  0661    0CDD    RRCR	0x5D
  0662    0BE1    SZDECR	0x61
  0663    2E51    JP	0x651
  0664    0862    LD	A,0x62
  0665    1903    SZB	0x3,2
  0666    2E6C    JP	0x66C
  0667    09DF    COMR	0x5F
  0668    09E0    COMR	0x60
  0669    0ADF    INCR	0x5F
  066A    1903    SZB	0x3,2
  066B    0AE0    INCR	0x60
  066C    0860    LD	A,0x60
  066D    00DE    LD	0x5E,A
  066E    085F    LD	A,0x5F
  066F    00DD    LD	0x5D,A
  0670    0008    RET
6:                	unsigned char	counter, sign;
7:                
8:                	sign = 0;
9:                	if(dividend < 0) {
10:               		dividend = -dividend;
11:               		sign = 1;
12:               	}
13:               	if(divisor < 0)
14:               		divisor = -divisor;
15:               	if(divisor != 0) {
16:               		counter = 1;
17:               		while(((unsigned int)divisor & 0x8000U) == 0) {
18:               			divisor <<= 1;
19:               			counter++;
20:               		}
21:               		do {
22:               			if((unsigned int)divisor <= (unsigned int)dividend)
23:               				dividend -= divisor;
24:               			*(unsigned int *)&divisor >>= 1;
25:               		} while(--counter != 0);
26:               	}
27:               	if(sign)
28:               		dividend = -dividend;
29:               	return dividend;
30:               }
---- E:\BBA'DATA\CMS_ID~1.32_\data\sources\lbdiv.c ----------------------------------------------------------------------
1:                // byte unsigned division
2:                
3:                unsigned char
4:                __lbdiv(unsigned char dividend, unsigned char divisor)
5:                {
  0671    00DE    LD	0x5E,A
  0672    01E0    CLR	0x60
  0673    085D    LD	A,0x5D
  0674    1903    SZB	0x3,2
  0675    2E8A    JP	0x68A
  0676    01DF    CLR	0x5F
  0677    0ADF    INCR	0x5F
  0678    1BDD    SZB	0x5D,7
  0679    2E7D    JP	0x67D
  067A    1003    CLRB	0x3,0
  067B    0DDD    RLCR	0x5D
  067C    2E77    JP	0x677
  067D    1003    CLRB	0x3,0
  067E    0DE0    RLCR	0x60
  067F    085D    LD	A,0x5D
  0680    025E    SUBA	0x5E
  0681    1C03    SNZB	0x3,0
  0682    2E87    JP	0x687
  0683    085D    LD	A,0x5D
  0684    02DE    SUBR	0x5E
  0685    1460    SETB	0x60,0
  0686    1003    CLRB	0x3,0
  0687    0CDD    RRCR	0x5D
  0688    0BDF    SZDECR	0x5F
  0689    2E7D    JP	0x67D
  068A    0860    LD	A,0x60
  068B    0008    RET
6:                	unsigned char	quotient;
7:                	unsigned char	counter;
8:                
9:                	quotient = 0;
10:               	if(divisor != 0) {
11:               		counter = 1;
12:               		while((divisor & 0x80) == 0) {
13:               			divisor <<= 1;
14:               			counter++;
15:               		}
16:               		do {
17:               			quotient <<= 1;
18:               			if(divisor <= dividend) {
19:               				dividend -= divisor;
20:               				quotient |= 1;
21:               			}
22:               			divisor >>= 1;
23:               		} while(--counter != 0);
24:               	}
25:               	return quotient;
26:               }
---- E:\BBA'DATA\CMS_ID~1.32_\data\sources\lbmod.c ----------------------------------------------------------------------
1:                // byte unsigned modulus
2:                
3:                unsigned char
4:                __lbmod(unsigned char dividend, unsigned char divisor)
5:                {
  068C    00DF    LD	0x5F,A
  068D    3008    LDIA	0x8
  068E    00E0    LD	0x60,A
  068F    01E1    CLR	0x61
  0690    085F    LD	A,0x5F
  0691    00DE    LD	0x5E,A
  0692    3007    LDIA	0x7
  0693    1003    CLRB	0x3,0
  0694    0CDE    RRCR	0x5E
  0695    3EFF    ADDIA	0xFF
  0696    1003    CLRB	0x3,0
  0697    1D03    SNZB	0x3,2
  0698    2E94    JP	0x694
  0699    0D61    RLCA	0x61
  069A    045E    ORA	0x5E
  069B    00E1    LD	0x61,A
  069C    1003    CLRB	0x3,0
  069D    0DDF    RLCR	0x5F
  069E    085D    LD	A,0x5D
  069F    0261    SUBA	0x61
  06A0    1C03    SNZB	0x3,0
  06A1    2EA4    JP	0x6A4
  06A2    085D    LD	A,0x5D
  06A3    02E1    SUBR	0x61
  06A4    0BE0    SZDECR	0x60
  06A5    2E90    JP	0x690
  06A6    0861    LD	A,0x61
  06A7    0008    RET
6:                	unsigned char	rem;
7:                	unsigned char	counter;
8:                
9:                	counter = 8;
10:               	rem = 0;
11:               	do {
12:               		rem = (rem << 1) | (dividend >> 7);
13:               		dividend <<= 1;
14:               		if(divisor <= rem)
15:               			rem -= divisor;
16:               	} while(--counter != 0);
17:               	return rem;
18:               }
---- E:\BBA'DATA\美芯电子产品程序\咖啡机\V4.7\LCD.c ----------------------------------------------------------------------
1:                #include "LCD.h"
2:                
3:                //数据转换 10进制为99内
4:                void Hex_To_Bcd(unsigned short data,char list)
5:                {
6:                	unsigned char pos=0;
7:                	signed char i=3;
8:                	char BCD[4];
9:                	BCD[0]=0;
10:               	BCD[1]=0;
11:               	BCD[2]=0;
12:               	BCD[3]=0;
13:               	while(data)
14:               	{
15:               		BCD[i--]=data%10;
16:               		data /= 10;
17:               		pos++;
18:               	}
19:               	
20:               	i=0;
21:               	if(list)
22:               	{
23:               		while(pos)
24:               		{
25:               			pos--;
26:               			display[3-i]=LCDCode[BCD[3-i]];
27:               			i++;
28:               		}
29:               	}
30:               	else
31:               	{
32:               		while(pos)
33:               		{
34:               			pos--;
35:               			display[i]=LCDCode[BCD[3-pos]];
36:               			
37:               			i++;
38:               		}
39:               	}
40:               }
41:               
42:               void Hex_To_Temp(signed char data)
43:               {
  073A    00E7    LD	0x67,A
44:               	//unsigned char pos=0;
45:               	signed char i;
46:               	char BCD[3];
47:               	BCD[0];
48:               	BCD[1];
49:               	BCD[2];
50:               	if(data>=100) 
  073B    3A80    XORIA	0x80
  073C    3E1C    ADDIA	0x1C
  073D    1C03    SNZB	0x3,0
  073E    2F45    JP	0x745
51:               	{
52:               		i=2;	
  073F    3002    LDIA	0x2
  0740    00E3    LD	0x63,A
53:               		display[3]=LCDCode[12];
  0741    30C6    LDIA	0xC6
  0742    0084    LD	0x4,A
  0743    3091    LDIA	0x91
  0744    2F4C    JP	0x74C
54:               	}
  0745    300C    LDIA	0xC
55:               	else 
56:               	{
57:               		i=1;
  0746    01E3    CLR	0x63
  0747    0AE3    INCR	0x63
58:               		BCD[2]=12;
  0748    00E6    LD	0x66,A
59:               		display[3]=LCDCode[10];
  0749    30C4    LDIA	0xC4
  074A    0084    LD	0x4,A
  074B    3091    LDIA	0x91
  074C    00FF    LD	0x7F,A
  074D    160A    SETB	0xA,4
  074E    118A    CLRB	0xA,3
  074F    2000    CALL	0x0
  0750    120A    CLRB	0xA,4
  0751    118A    CLRB	0xA,3
  0752    00A3    LD	0x23,A
  0753    08E7    TESTZ	0x67
  0754    1903    SZB	0x3,2
  0755    2F70    JP	0x770
60:               	}
61:               		
62:               	while(data)
63:               	{
64:               		BCD[i--]=data%10;
  0756    0863    LD	A,0x63
  0757    3E64    ADDIA	0x64
  0758    0084    LD	0x4,A
  0759    300A    LDIA	0xA
  075A    00DD    LD	0x5D,A
  075B    01DE    CLR	0x5E
  075C    0867    LD	A,0x67
  075D    00DF    LD	0x5F,A
  075E    01E0    CLR	0x60
  075F    1BDF    SZB	0x5F,7
  0760    03E0    DECR	0x60
  0761    2634    CALL	0x634
  0762    120A    CLRB	0xA,4
  0763    118A    CLRB	0xA,3
  0764    085D    LD	A,0x5D
  0765    1383    CLRB	0x3,7
  0766    0080    LD	0x0,A
  0767    300A    LDIA	0xA
  0768    03E3    DECR	0x63
65:               		data /= 10;
  0769    00DD    LD	0x5D,A
  076A    0867    LD	A,0x67
  076B    2671    CALL	0x671
  076C    120A    CLRB	0xA,4
  076D    118A    CLRB	0xA,3
  076E    00E7    LD	0x67,A
  076F    2F53    JP	0x753
66:               		//pos++;
67:               	}
68:               	display[0]=LCDCode[BCD[0]];
  0770    0864    LD	A,0x64
  0771    26A8    CALL	0x6A8
  0772    160A    SETB	0xA,4
  0773    118A    CLRB	0xA,3
  0774    2000    CALL	0x0
  0775    120A    CLRB	0xA,4
  0776    118A    CLRB	0xA,3
  0777    00A0    LD	0x20,A
69:               	display[1]=LCDCode[BCD[1]];
  0778    0865    LD	A,0x65
  0779    26A8    CALL	0x6A8
  077A    160A    SETB	0xA,4
  077B    118A    CLRB	0xA,3
  077C    2000    CALL	0x0
  077D    120A    CLRB	0xA,4
  077E    118A    CLRB	0xA,3
  077F    00A1    LD	0x21,A
70:               	display[2]=LCDCode[BCD[2]];
  0780    0866    LD	A,0x66
  0781    26A8    CALL	0x6A8
  0782    160A    SETB	0xA,4
  0783    118A    CLRB	0xA,3
  0784    2000    CALL	0x0
  0785    00A2    LD	0x22,A
  0786    0008    RET
71:               
72:               	
73:               		
74:               }
75:               
76:               void Cheak_LCD()
77:               {
78:               			TRISC &= 0B11000011;
79:               			if(com_count)
80:               			{
81:               				P_COM1 = 0;
82:               				P_COM2 = 0;
83:               				P_COM3 = 0;
84:               				P_COM4 = 0;
85:               				SEG1_SET();
86:               				SEG2_SET();
87:               				SEG3_SET();
88:               				SEG4_SET();
89:               				SEG5_SET();
90:               				SEG6_SET();
91:               				SEG7_SET();
92:               				SEG8_SET();
93:               			}
94:               			else
95:               			{
96:               				P_COM1 = 1;
97:               				P_COM2 = 1;
98:               				P_COM3 = 1;
99:               				P_COM4 = 1;
100:              				SEG1_CLR();
101:              				SEG2_CLR();
102:              				SEG3_CLR();
103:              				SEG4_CLR();
104:              				SEG5_CLR();
105:              				SEG6_CLR();
106:              				SEG7_CLR();
107:              				SEG8_CLR();
108:              			}
109:              			com_count=~com_count;
110:              	
111:              }
112:              void Set_Disp()
113:              {
114:              	
115:              
116:              			TRISC = 0B10111100;
  099D    30BC    LDIA	0xBC
  099E    1683    SETB	0x3,5
  099F    0087    LD	0x7,A
117:              			
118:              			
119:              			if(com_count&0x01)
  09A0    1C7C    SNZB	0x7C,0
  09A1    29A6    JP	0x1A6
120:              			{
121:              				Temp_595[SEG0_8]=0XFF;
  09A2    30FF    LDIA	0xFF
  09A3    1283    CLRB	0x3,5
  09A4    00A7    LD	0x27,A
122:              			}
  09A5    2AC9    JP	0x2C9
123:              			else
124:              			{
125:              				Temp_595[SEG0_8]=0X00;
  09A6    1283    CLRB	0x3,5
  09A7    01A7    CLR	0x27
  09A8    2AC9    JP	0x2C9
126:              			}
127:              			
128:              			switch(com_count)	
129:              			{	
130:              				case 0:	
131:              											
132:              				if(SMG1_DATA & B)  {SEG1_SET();}		//1B	 
  09A9    1CA0    SNZB	0x20,1
  09AA    29AC    JP	0x1AC
  09AB    17A7    SETB	0x27,7
133:              				if(SMG1_DATA & A)  {SEG2_SET();}		//1A					 
  09AC    1C20    SNZB	0x20,0
  09AD    29AF    JP	0x1AF
  09AE    1727    SETB	0x27,6
134:              				if(SMG4_DATA & B)  {SEG3_SET();}		//4B
  09AF    1CA3    SNZB	0x23,1
  09B0    29B2    JP	0x1B2
  09B1    1427    SETB	0x27,0
135:              				if(SMG4_DATA & A)  {SEG4_SET();}		//4A			
  09B2    1C23    SNZB	0x23,0
  09B3    29B5    JP	0x1B5
  09B4    14A7    SETB	0x27,1
136:              				if(SMG3_DATA & B)  {SEG5_SET();}		//3B
  09B5    1CA2    SNZB	0x22,1
  09B6    29B8    JP	0x1B8
  09B7    1527    SETB	0x27,2
137:              				if(SMG3_DATA & A)  {SEG6_SET();}		//3A
  09B8    1C22    SNZB	0x22,0
  09B9    29BB    JP	0x1BB
  09BA    16A7    SETB	0x27,5
138:              				if(SMG2_DATA & B)  {SEG7_SET();}		//2B
  09BB    1CA1    SNZB	0x21,1
  09BC    29BE    JP	0x1BE
  09BD    1627    SETB	0x27,4
139:              				if(SMG2_DATA & A)  {SEG8_SET();}		//2A
  09BE    1C21    SNZB	0x21,0
  09BF    29C1    JP	0x1C1
  09C0    15A7    SETB	0x27,3
140:              				
141:              				_74HC595_SET();
  09C1    22E9    CALL	0x2E9
  09C2    120A    CLRB	0xA,4
  09C3    158A    SETB	0xA,3
142:              				
143:              				COMEN  =0B00111000;
144:              				P_COM1 = 0;				
  09C4    2310    CALL	0x310
  09C5    120A    CLRB	0xA,4
  09C6    158A    SETB	0xA,3
  09C7    1107    CLRB	0x7,2
145:              				TRISC = 0B10111000;  //	显示的COM口设为输出，其余3个设为输入 	
  09C8    1683    SETB	0x3,5
  09C9    0087    LD	0x7,A
146:              				P_COM1 = 0;	
  09CA    1283    CLRB	0x3,5
  09CB    1107    CLRB	0x7,2
147:              																									 
148:              				break;		
  09CC    2AE3    JP	0x2E3
149:              			case 1:
150:              	
151:              				if(SMG1_DATA & B)  {SEG1_CLR();}		//1B	 
  09CD    1CA0    SNZB	0x20,1
  09CE    29D0    JP	0x1D0
  09CF    13A7    CLRB	0x27,7
152:              				if(SMG1_DATA & A)  {SEG2_CLR();}		//1A					 
  09D0    1C20    SNZB	0x20,0
  09D1    29D3    JP	0x1D3
  09D2    1327    CLRB	0x27,6
153:              				if(SMG4_DATA & B)  {SEG3_CLR();}		//4B
  09D3    1CA3    SNZB	0x23,1
  09D4    29D6    JP	0x1D6
  09D5    1027    CLRB	0x27,0
154:              				if(SMG4_DATA & A)  {SEG4_CLR();}		//4A			
  09D6    1C23    SNZB	0x23,0
  09D7    29D9    JP	0x1D9
  09D8    10A7    CLRB	0x27,1
155:              				if(SMG3_DATA & B)  {SEG5_CLR();}		//3B
  09D9    1CA2    SNZB	0x22,1
  09DA    29DC    JP	0x1DC
  09DB    1127    CLRB	0x27,2
156:              				if(SMG3_DATA & A)  {SEG6_CLR();}		//3A
  09DC    1C22    SNZB	0x22,0
  09DD    29DF    JP	0x1DF
  09DE    12A7    CLRB	0x27,5
157:              				if(SMG2_DATA & B)  {SEG7_CLR();}		//2B
  09DF    1CA1    SNZB	0x21,1
  09E0    29E2    JP	0x1E2
  09E1    1227    CLRB	0x27,4
158:              				if(SMG2_DATA & A)  {SEG8_CLR();}		//2A
  09E2    1C21    SNZB	0x21,0
  09E3    29E5    JP	0x1E5
  09E4    11A7    CLRB	0x27,3
159:              				
160:              				_74HC595_SET();
  09E5    22E9    CALL	0x2E9
  09E6    120A    CLRB	0xA,4
  09E7    158A    SETB	0xA,3
161:              				
162:              				COMEN  =0B00111000;
163:              				P_COM1 = 1;	
  09E8    2310    CALL	0x310
  09E9    120A    CLRB	0xA,4
  09EA    158A    SETB	0xA,3
  09EB    1507    SETB	0x7,2
164:              				TRISC = 0B10111000;  //显示的COM口设为输出，其余3个设为输入	
  09EC    1683    SETB	0x3,5
  09ED    0087    LD	0x7,A
165:              				P_COM1 = 1;		
  09EE    1283    CLRB	0x3,5
  09EF    1507    SETB	0x7,2
166:              				break;
  09F0    2AE3    JP	0x2E3
167:              				
168:              			case 2:
169:              		
170:              				if(SMG1_DATA & G)  {SEG1_SET();}		//1G	 
  09F1    1F20    SNZB	0x20,6
  09F2    29F4    JP	0x1F4
  09F3    17A7    SETB	0x27,7
171:              				if(SMG1_DATA & F)  {SEG2_SET();}		//1F					 
  09F4    1EA0    SNZB	0x20,5
  09F5    29F7    JP	0x1F7
  09F6    1727    SETB	0x27,6
172:              				if(SMG4_DATA & G)  {SEG3_SET();}		//4G
  09F7    1F23    SNZB	0x23,6
  09F8    29FA    JP	0x1FA
  09F9    1427    SETB	0x27,0
173:              				if(SMG4_DATA & F)  {SEG4_SET();}		//4F			
  09FA    1EA3    SNZB	0x23,5
  09FB    29FD    JP	0x1FD
  09FC    14A7    SETB	0x27,1
174:              				if(SMG3_DATA & G)  {SEG5_SET();}		//3G
  09FD    1F22    SNZB	0x22,6
  09FE    2A00    JP	0x200
  09FF    1527    SETB	0x27,2
175:              				if(SMG3_DATA & F)  {SEG6_SET();}		//3F
  0A00    1EA2    SNZB	0x22,5
  0A01    2A03    JP	0x203
  0A02    16A7    SETB	0x27,5
176:              				if(SMG2_DATA & G)  {SEG7_SET();}		//2G
  0A03    1F21    SNZB	0x21,6
  0A04    2A06    JP	0x206
  0A05    1627    SETB	0x27,4
177:              				if(SMG2_DATA & F)  {SEG8_SET();}		//2F
  0A06    1EA1    SNZB	0x21,5
  0A07    2A09    JP	0x209
  0A08    15A7    SETB	0x27,3
178:              				
179:              				_74HC595_SET();
  0A09    22E9    CALL	0x2E9
  0A0A    120A    CLRB	0xA,4
  0A0B    158A    SETB	0xA,3
180:              					
181:              				COMEN  =0B00110100; 	
182:              				P_COM2 = 0;
  0A0C    2317    CALL	0x317
  0A0D    120A    CLRB	0xA,4
  0A0E    158A    SETB	0xA,3
  0A0F    1187    CLRB	0x7,3
183:              				TRISC = 0B10110100;  //显示的COM口设为输出，其余3个设为输入		
  0A10    1683    SETB	0x3,5
  0A11    0087    LD	0x7,A
184:              				P_COM2 = 0;	
  0A12    1283    CLRB	0x3,5
  0A13    1187    CLRB	0x7,3
185:              				
186:              				break;
  0A14    2AE3    JP	0x2E3
187:              			case 3:
188:              				
189:              				if(SMG1_DATA & G)  {SEG1_CLR();}		//1G	 
  0A15    1F20    SNZB	0x20,6
  0A16    2A18    JP	0x218
  0A17    13A7    CLRB	0x27,7
190:              				if(SMG1_DATA & F)  {SEG2_CLR();}		//1F					 
  0A18    1EA0    SNZB	0x20,5
  0A19    2A1B    JP	0x21B
  0A1A    1327    CLRB	0x27,6
191:              				if(SMG4_DATA & G)  {SEG3_CLR();}		//4G
  0A1B    1F23    SNZB	0x23,6
  0A1C    2A1E    JP	0x21E
  0A1D    1027    CLRB	0x27,0
192:              				if(SMG4_DATA & F)  {SEG4_CLR();}		//4F			
  0A1E    1EA3    SNZB	0x23,5
  0A1F    2A21    JP	0x221
  0A20    10A7    CLRB	0x27,1
193:              				if(SMG3_DATA & G)  {SEG5_CLR();}		//3G
  0A21    1F22    SNZB	0x22,6
  0A22    2A24    JP	0x224
  0A23    1127    CLRB	0x27,2
194:              				if(SMG3_DATA & F)  {SEG6_CLR();}		//3F
  0A24    1EA2    SNZB	0x22,5
  0A25    2A27    JP	0x227
  0A26    12A7    CLRB	0x27,5
195:              				if(SMG2_DATA & G)  {SEG7_CLR();}		//2G
  0A27    1F21    SNZB	0x21,6
  0A28    2A2A    JP	0x22A
  0A29    1227    CLRB	0x27,4
196:              				if(SMG2_DATA & F)  {SEG8_CLR();}		//2F
  0A2A    1EA1    SNZB	0x21,5
  0A2B    2A2D    JP	0x22D
  0A2C    11A7    CLRB	0x27,3
197:              				
198:              				_74HC595_SET();
  0A2D    22E9    CALL	0x2E9
  0A2E    120A    CLRB	0xA,4
  0A2F    158A    SETB	0xA,3
199:              					
200:              				COMEN  =0B00110100; 		
201:              				P_COM2 = 1;
  0A30    2317    CALL	0x317
  0A31    120A    CLRB	0xA,4
  0A32    158A    SETB	0xA,3
  0A33    1587    SETB	0x7,3
202:              				TRISC = 0B10110100;  //显示的COM口设为输出，其余3个设为输入	
  0A34    1683    SETB	0x3,5
  0A35    0087    LD	0x7,A
203:              				P_COM2 = 1;	
  0A36    1283    CLRB	0x3,5
  0A37    1587    SETB	0x7,3
204:              				break;
  0A38    2AE3    JP	0x2E3
205:              			
206:              			case 4:	
207:              					
208:              				if(SMG1_DATA & C)  {SEG1_SET();}		//1C	 
  0A39    1D20    SNZB	0x20,2
  0A3A    2A3C    JP	0x23C
  0A3B    17A7    SETB	0x27,7
209:              				if(SMG1_DATA & E)  {SEG2_SET();}		//1E					 
  0A3C    1E20    SNZB	0x20,4
  0A3D    2A3F    JP	0x23F
  0A3E    1727    SETB	0x27,6
210:              				if(SMG4_DATA & C)  {SEG3_SET();}		//4C
  0A3F    1D23    SNZB	0x23,2
  0A40    2A42    JP	0x242
  0A41    1427    SETB	0x27,0
211:              				if(SMG4_DATA & E)  {SEG4_SET();}		//4E			
  0A42    1E23    SNZB	0x23,4
  0A43    2A45    JP	0x245
  0A44    14A7    SETB	0x27,1
212:              				if(SMG3_DATA & C)  {SEG5_SET();}		//3C
  0A45    1D22    SNZB	0x22,2
  0A46    2A48    JP	0x248
  0A47    1527    SETB	0x27,2
213:              				if(SMG3_DATA & E)  {SEG6_SET();}		//3E
  0A48    1E22    SNZB	0x22,4
  0A49    2A4B    JP	0x24B
  0A4A    16A7    SETB	0x27,5
214:              				if(SMG2_DATA & C)  {SEG7_SET();}		//2C
  0A4B    1D21    SNZB	0x21,2
  0A4C    2A4E    JP	0x24E
  0A4D    1627    SETB	0x27,4
215:              				if(SMG2_DATA & E)  {SEG8_SET();}		//2E
  0A4E    1E21    SNZB	0x21,4
  0A4F    2A51    JP	0x251
  0A50    15A7    SETB	0x27,3
216:              				
217:              				_74HC595_SET();
  0A51    22E9    CALL	0x2E9
  0A52    120A    CLRB	0xA,4
  0A53    158A    SETB	0xA,3
218:              				
219:              				COMEN  =0B00101100;	
220:              				P_COM3 = 0;	
  0A54    2325    CALL	0x325
  0A55    120A    CLRB	0xA,4
  0A56    158A    SETB	0xA,3
  0A57    1207    CLRB	0x7,4
221:              				TRISC = 0B10101100;  //显示的COM口设为输出，其余3个设为输入	
  0A58    1683    SETB	0x3,5
  0A59    0087    LD	0x7,A
222:              				P_COM3 = 0;		
  0A5A    1283    CLRB	0x3,5
  0A5B    1207    CLRB	0x7,4
223:              				break;
  0A5C    2AE3    JP	0x2E3
224:              			case 5:
225:              				
226:              				if(SMG1_DATA & C)  {SEG1_CLR();}		//1C	 
  0A5D    1D20    SNZB	0x20,2
  0A5E    2A60    JP	0x260
  0A5F    13A7    CLRB	0x27,7
227:              				if(SMG1_DATA & E)  {SEG2_CLR();}		//1E					 
  0A60    1E20    SNZB	0x20,4
  0A61    2A63    JP	0x263
  0A62    1327    CLRB	0x27,6
228:              				if(SMG4_DATA & C)  {SEG3_CLR();}		//4C
  0A63    1D23    SNZB	0x23,2
  0A64    2A66    JP	0x266
  0A65    1027    CLRB	0x27,0
229:              				if(SMG4_DATA & E)  {SEG4_CLR();}		//4E			
  0A66    1E23    SNZB	0x23,4
  0A67    2A69    JP	0x269
  0A68    10A7    CLRB	0x27,1
230:              				if(SMG3_DATA & C)  {SEG5_CLR();}		//3C
  0A69    1D22    SNZB	0x22,2
  0A6A    2A6C    JP	0x26C
  0A6B    1127    CLRB	0x27,2
231:              				if(SMG3_DATA & E)  {SEG6_CLR();}		//3E
  0A6C    1E22    SNZB	0x22,4
  0A6D    2A6F    JP	0x26F
  0A6E    12A7    CLRB	0x27,5
232:              				if(SMG2_DATA & C)  {SEG7_CLR();}		//2C
  0A6F    1D21    SNZB	0x21,2
  0A70    2A72    JP	0x272
  0A71    1227    CLRB	0x27,4
233:              				if(SMG2_DATA & E)  {SEG8_CLR();}		//2E
  0A72    1E21    SNZB	0x21,4
  0A73    2A75    JP	0x275
  0A74    11A7    CLRB	0x27,3
234:              				
235:              				_74HC595_SET();
  0A75    22E9    CALL	0x2E9
  0A76    120A    CLRB	0xA,4
  0A77    158A    SETB	0xA,3
236:              				 
237:              				COMEN  =0B00101100;	
238:              				P_COM3 = 1;		
  0A78    2325    CALL	0x325
  0A79    120A    CLRB	0xA,4
  0A7A    158A    SETB	0xA,3
  0A7B    1607    SETB	0x7,4
239:              				TRISC = 0B10101100;  //显示的COM口设为输出，其余3个设为输入	
  0A7C    1683    SETB	0x3,5
  0A7D    0087    LD	0x7,A
240:              				P_COM3 = 1;
  0A7E    1283    CLRB	0x3,5
  0A7F    1607    SETB	0x7,4
241:              				break;
  0A80    2AE3    JP	0x2E3
242:              				
243:              			case 6:
244:              	 
245:              				if(SMG1_DATA & D)  {SEG2_SET();}		//1D					 
  0A81    1DA0    SNZB	0x20,3
  0A82    2A84    JP	0x284
  0A83    1727    SETB	0x27,6
246:              				if(SMG2_DATA & D)  {SEG8_SET();}		//2D
  0A84    1DA1    SNZB	0x21,3
  0A85    2A87    JP	0x287
  0A86    15A7    SETB	0x27,3
247:              				if(SMG3_DATA & D)  {SEG6_SET();}		//3D
  0A87    1DA2    SNZB	0x22,3
  0A88    2A8A    JP	0x28A
  0A89    16A7    SETB	0x27,5
248:              				if(SMG4_DATA & D)  {SEG4_SET();}		//4D
  0A8A    1DA3    SNZB	0x23,3
  0A8B    2A8D    JP	0x28D
  0A8C    14A7    SETB	0x27,1
249:              				
250:              				if(ICO & ICO_TEMP)  {SEG1_SET();}	//
  0A8D    1C24    SNZB	0x24,0
  0A8E    2A90    JP	0x290
  0A8F    17A7    SETB	0x27,7
251:              				if(ICO & ICO_TIMER)  {SEG3_SET();}	//
  0A90    1CA4    SNZB	0x24,1
  0A91    2A93    JP	0x293
  0A92    1427    SETB	0x27,0
252:              				if(ICO & ICO_AUTO)  {SEG5_SET();;}	//
  0A93    1D24    SNZB	0x24,2
  0A94    2A96    JP	0x296
  0A95    1527    SETB	0x27,2
253:              				if(ICO & ICO_COL)  {SEG7_SET();}	//
  0A96    1DA4    SNZB	0x24,3
  0A97    2A99    JP	0x299
  0A98    1627    SETB	0x27,4
254:              				
255:              				_74HC595_SET();
  0A99    22E9    CALL	0x2E9
  0A9A    120A    CLRB	0xA,4
  0A9B    158A    SETB	0xA,3
256:              					
257:              				COMEN  =0B00011100; 
258:              				P_COM4 = 0;		
  0A9C    231E    CALL	0x31E
  0A9D    120A    CLRB	0xA,4
  0A9E    158A    SETB	0xA,3
  0A9F    1287    CLRB	0x7,5
259:              				TRISC = 0B10011100;  //显示的COM口设为输出，其余3个设为输入	
  0AA0    1683    SETB	0x3,5
  0AA1    0087    LD	0x7,A
260:              				P_COM4 = 0;	
  0AA2    1283    CLRB	0x3,5
  0AA3    1287    CLRB	0x7,5
261:              				break;
  0AA4    2AE3    JP	0x2E3
262:              			case 7:
263:              	
264:              				if(SMG1_DATA & D)  {SEG2_CLR();}		//1D					 
  0AA5    1DA0    SNZB	0x20,3
  0AA6    2AA8    JP	0x2A8
  0AA7    1327    CLRB	0x27,6
265:              				if(SMG2_DATA & D)  {SEG8_CLR();}		//2D
  0AA8    1DA1    SNZB	0x21,3
  0AA9    2AAB    JP	0x2AB
  0AAA    11A7    CLRB	0x27,3
266:              				if(SMG3_DATA & D)  {SEG6_CLR();}		//3D
  0AAB    1DA2    SNZB	0x22,3
  0AAC    2AAE    JP	0x2AE
  0AAD    12A7    CLRB	0x27,5
267:              				if(SMG4_DATA & D)  {SEG4_CLR();}		//4D
  0AAE    1DA3    SNZB	0x23,3
  0AAF    2AB1    JP	0x2B1
  0AB0    10A7    CLRB	0x27,1
268:              				
269:              				if(ICO & ICO_TEMP)  {SEG1_CLR();}	//
  0AB1    1C24    SNZB	0x24,0
  0AB2    2AB4    JP	0x2B4
  0AB3    13A7    CLRB	0x27,7
270:              				if(ICO & ICO_TIMER)  {SEG3_CLR();}	//
  0AB4    1CA4    SNZB	0x24,1
  0AB5    2AB7    JP	0x2B7
  0AB6    1027    CLRB	0x27,0
271:              				if(ICO & ICO_AUTO)  {SEG5_CLR();}	//
  0AB7    1D24    SNZB	0x24,2
  0AB8    2ABA    JP	0x2BA
  0AB9    1127    CLRB	0x27,2
272:              				if(ICO & ICO_COL)  {SEG7_CLR();}	//
  0ABA    1DA4    SNZB	0x24,3
  0ABB    2ABD    JP	0x2BD
  0ABC    1227    CLRB	0x27,4
273:              				
274:              				_74HC595_SET();
  0ABD    22E9    CALL	0x2E9
  0ABE    120A    CLRB	0xA,4
  0ABF    158A    SETB	0xA,3
275:              					
276:              				COMEN  =0B00011100;
277:              				P_COM4 = 1;		
  0AC0    231E    CALL	0x31E
  0AC1    120A    CLRB	0xA,4
  0AC2    158A    SETB	0xA,3
  0AC3    1687    SETB	0x7,5
278:              				TRISC = 0B10011100; //显示的COM口设为输出，其余3个设为输入	
  0AC4    1683    SETB	0x3,5
  0AC5    0087    LD	0x7,A
279:              				P_COM4 = 1;
  0AC6    1283    CLRB	0x3,5
  0AC7    1687    SETB	0x7,5
280:              				break;			     					
  0AC8    2AE3    JP	0x2E3
  0AC9    087C    LD	A,0x7C
  0ACA    3A00    XORIA	0x0
  0ACB    1903    SZB	0x3,2
  0ACC    29A9    JP	0x1A9
  0ACD    3A01    XORIA	0x1
  0ACE    1903    SZB	0x3,2
  0ACF    29CD    JP	0x1CD
  0AD0    3A03    XORIA	0x3
  0AD1    1903    SZB	0x3,2
  0AD2    29F1    JP	0x1F1
  0AD3    3A01    XORIA	0x1
  0AD4    1903    SZB	0x3,2
  0AD5    2A15    JP	0x215
  0AD6    3A07    XORIA	0x7
  0AD7    1903    SZB	0x3,2
  0AD8    2A39    JP	0x239
  0AD9    3A01    XORIA	0x1
  0ADA    1903    SZB	0x3,2
  0ADB    2A5D    JP	0x25D
  0ADC    3A03    XORIA	0x3
  0ADD    1903    SZB	0x3,2
  0ADE    2A81    JP	0x281
  0ADF    3A01    XORIA	0x1
  0AE0    1903    SZB	0x3,2
  0AE1    2AA5    JP	0x2A5
  0AE2    2AE3    JP	0x2E3
281:              			}
282:              			
283:              			com_count++; 	
  0AE3    0AFC    INCR	0x7C
284:              			if( com_count>=8)  
  0AE4    3008    LDIA	0x8
  0AE5    027C    SUBA	0x7C
  0AE6    1803    SZB	0x3,0
285:              			{
286:              				com_count = 0;
  0AE7    01FC    CLR	0x7C
  0AE8    0008    RET
287:              			}	
288:              }
---- E:\BBA'DATA\美芯电子产品程序\咖啡机\V4.7\AD.c ----------------------------------------------------------------------
1:                #include "AD.h"
2:                
3:                //下拉电阻39.000000 K
4:                const unsigned short TempTab[][2]={427,447,  //0'C
5:                447,471,  //1'C
6:                471,496,  //2'C
7:                496,522,  //3'C
8:                522,548,  //4'C
9:                549,572,  //5'C
10:               573,593,  //6'C
11:               594,614,  //7'C
12:               615,636,  //8'C
13:               637,659,  //9'C
14:               659,684,  //10'C
15:               684,711,  //11'C
16:               712,739,  //12'C
17:               740,768,  //13'C
18:               768,797,  //14'C
19:               798,828,  //15'C
20:               828,859,  //16'C
21:               860,891,  //17'C
22:               891,923,  //18'C
23:               923,956,  //19'C
24:               957,990,  //20'C
25:               990,1024,  //21'C
26:               1025,1059,  //22'C
27:               1059,1094,  //23'C
28:               1095,1131,  //24'C
29:               1131,1166,  //25'C
30:               1167,1203,  //26'C
31:               1204,1241,  //27'C
32:               1241,1278,  //28'C
33:               1278,1316,  //29'C
34:               1316,1354,  //30'C
35:               1355,1394,  //31'C
36:               1394,1433,  //32'C
37:               1434,1473,  //33'C
38:               1473,1513,  //34'C
39:               1513,1553,  //35'C
40:               1553,1592,  //36'C
41:               1593,1633,  //37'C
42:               1633,1672,  //38'C
43:               1673,1713,  //39'C
44:               1713,1753,  //40'C
45:               1754,1794,  //41'C
46:               1794,1835,  //42'C
47:               1835,1875,  //43'C
48:               1876,1916,  //44'C
49:               1916,1956,  //45'C
50:               1957,1997,  //46'C
51:               1997,2037,  //47'C
52:               2038,2078,  //48'C
53:               2078,2119,  //49'C
54:               2117,2159,  //50'C
55:               2156,2198,  //51'C
56:               2195,2238,  //52'C
57:               2233,2277,  //53'C
58:               2271,2315,  //54'C
59:               2309,2354,  //55'C
60:               2346,2391,  //56'C
61:               2383,2429,  //57'C
62:               2419,2465,  //58'C
63:               2455,2502,  //59'C
64:               2491,2537,  //60'C
65:               2525,2572,  //61'C
66:               2559,2606,  //62'C
67:               2593,2640,  //63'C
68:               2626,2673,  //64'C
69:               2658,2706,  //65'C
70:               2691,2739,  //66'C
71:               2723,2771,  //67'C
72:               2754,2802,  //68'C
73:               2785,2833,  //69'C
74:               2815,2863,  //70'C
75:               2844,2892,  //71'C
76:               2873,2921,  //72'C
77:               2901,2949,  //73'C
78:               2929,2976,  //74'C
79:               2956,3003,  //75'C
80:               2984,3031,  //76'C
81:               3011,3058,  //77'C
82:               3038,3084,  //78'C
83:               3064,3110,  //79'C
84:               3089,3135,  //80'C
85:               3114,3160,  //81'C
86:               3138,3183,  //82'C
87:               3161,3207,  //83'C
88:               3184,3229,  //84'C
89:               3207,3251,  //85'C
90:               3229,3273,  //86'C
91:               3250,3294,  //87'C
92:               3271,3314,  //88'C
93:               3292,3335,  //89'C
94:               3312,3354,  //90'C
95:               3331,3373,  //91'C
96:               3350,3392,  //92'C
97:               3369,3410,  //93'C
98:               3387,3428,  //94'C
99:               3405,3445,  //95'C
100:              3422,3462,  //96'C
101:              3439,3478,  //97'C
102:              3455,3493,  //98'C
103:              3471,3509,  //99'C
104:              3486,3523,  //100'C
105:              3501,3538,  //101'C
106:              3516,3553,  //102'C
107:              3531,3567,  //103'C
108:              3545,3581,  //104'C
109:              3559,3594,  //105'C
110:              };
111:              
112:              /************************************************************
113:              函数名称：AD_Sample
114:              函数功能：AD采样函数
115:              入口参数：ADCH,AD通道
116:              出口参数：ADRESH,ADRESL
117:              备    注：采样成功返回1,超时返回0   
118:              ************************************************************/
119:              unsigned char AD_Sample(unsigned char adch)
120:              {
  092C    00DE    LD	0x5E,A
121:              	HOT_BOTTOM_ON();		//开启ADC检测电流开关
  092D    1407    SETB	0x7,0
122:              	//Bit7 ADFM：A/D转换结果格式选择位
123:              	//1=右对齐
124:              	//0=左对齐
125:              	//Bit6-0 未用，读为0
126:              	ADCON1 = 0;	//左对齐
  092E    1683    SETB	0x3,5
  092F    019F    CLR	0x1F
127:              	
128:              	//Bit7-6 ADCS<1:0>：A/D转换时钟选择位00=FOSC/8,01=FOSC/16,10=FOSC/32	
129:              	//Bit5-2 CHS<3:0>：模拟通道选择位
130:              	//0000=AN0,0001=AN1,0010=AN2,0011=AN3,0100=AN4,0101=AN5,0110=AN6,0111=AN7,1000=AN8,1001=AN9,1010=AN10
131:              	//1011=AN11,1100=AN12,1101=AN13,1110=CVREF,1111=固定参考电压（0.6V 固定参考电压）
132:              	//Bit1 GO/DONE：A/D转换状态位,1=A/D转换正在进行。将该位置1启动A/D转换。当A/D转换完成以后，该位由硬件自动清零。
133:              	//0=A/D 转换完成/或不在进行中,Bit0 ADON：ADC使能位
134:              	//1=使能ADC
135:              	//0=禁止ADC，不消耗工作电流				
136:              	ADCON0 = 0X041 | (adch << 2);	//16分频
  0930    1283    CLRB	0x3,5
  0931    085E    LD	A,0x5E
  0932    00DD    LD	0x5D,A
  0933    1003    CLRB	0x3,0
  0934    0DDD    RLCR	0x5D
  0935    1003    CLRB	0x3,0
  0936    0D5D    RLCA	0x5D
  0937    3841    ORIA	0x41
  0938    009F    LD	0x1F,A
  0939    0000    NOP
  093A    0000    NOP
137:              	
138:              	//AD 数据寄存器高位 ADRESH(1EH)，ADFM=0
139:              	//Bit7-0 ADRES<9:2>：ADC结果寄存器位12 位转换结果的高 8位
140:              	
141:              	//AD 数据寄存器低位 ADRESL(9EH)，ADFM=0
142:              	//Bit7-6 ADRES<1:0>：ADC结果寄存器位
143:              	//12 位转换结果的低 4位
144:              	//Bit5-0 未用
145:              	
146:              	asm("nop");
147:              	asm("nop");
148:              	//GODONE = 0;
149:              	GODONE = 1;						//开始转换
  093B    1283    CLRB	0x3,5
  093C    1303    CLRB	0x3,6
  093D    30FF    LDIA	0xFF
  093E    149F    SETB	0x1F,1
150:              	BreakTimeOut = 0xff;
  093F    00BC    LD	0x3C,A
151:              	while(GODONE)
  0940    1C9F    SNZB	0x1F,1
  0941    3401    RET	0x1
152:              	{
153:              		if(0 == (--BreakTimeOut))
  0942    0BBC    SZDECR	0x3C
  0943    2940    JP	0x140
154:              		{				//ad等待限时，防止拔插电后出现死循环
155:              			//asm("clrwdt");
156:              			return 0;
  0944    3400    RET	0x0
157:              		}
158:              	}
159:              	return 1;
160:              }	
161:              
162:              /************************************************************
163:              函数名称：NtcAD_Testing()
164:              函数功能：温度传感器采样函数
165:              入口参数：
166:              出口参数：Flag_Ntc_OneAd、AdResult_8bit、AdResult_10bit
167:              备    注：采样NTC的AD值,采样10次,去掉最大及最小求算术平均值 
168:              ************************************************************/
169:              void NtcAD_Testing(unsigned char i)
170:              {
  0814    1283    CLRB	0x3,5
  0815    00E8    LD	0x68,A
171:              	static volatile unsigned char  adtimes=0;	
172:              	static volatile unsigned short   admin,admax=0,adsum=0;
173:              	volatile unsigned short data;
174:                  static volatile signed char range=0;//离之前温度距离的搜索范围
175:              	static volatile signed char TAB_pos=0;//温度表索引
176:              	
177:              	//AD 数据寄存器高位 ADRESH(1EH)，ADFM=0
178:              	//Bit7-0 ADRES<9:2>：ADC结果寄存器位12 位转换结果的高 8位
179:              	
180:              	//AD 数据寄存器低位 ADRESL(9EH)，ADFM=0
181:              	//Bit7-6 ADRES<1:0>：ADC结果寄存器位
182:              	//12 位转换结果的低 4位
183:              	//Bit5-0 未用
184:                  if(AD_Sample(i))
  0816    212C    CALL	0x12C
  0817    120A    CLRB	0xA,4
  0818    158A    SETB	0xA,3
  0819    3A00    XORIA	0x0
  081A    1903    SZB	0x3,2
  081B    292A    JP	0x12A
185:              	{ 
186:              		
187:              		data = (ADRESH<<4);
  081C    081E    LD	A,0x1E
  081D    00E9    LD	0x69,A
  081E    30F0    LDIA	0xF0
  081F    01EA    CLR	0x6A
  0820    0EE9    SWAPR	0x69
  0821    0EEA    SWAPR	0x6A
  0822    05EA    ANDR	0x6A
  0823    0869    LD	A,0x69
  0824    390F    ANDIA	0xF
  0825    04EA    ORR	0x6A
  0826    30F0    LDIA	0xF0
  0827    05E9    ANDR	0x69
188:              		data |= (ADRESL>>4);         
  0828    1683    SETB	0x3,5
  0829    0E1E    SWAPA	0x1E
  082A    390F    ANDIA	0xF
  082B    1283    CLRB	0x3,5
  082C    04E9    ORR	0x69
189:               
190:              		if(0 == admax)
  082D    0829    LD	A,0x29
  082E    0428    ORA	0x28
  082F    1D03    SNZB	0x3,2
  0830    2836    JP	0x36
191:              		{
192:              			admax = data;
  0831    086A    LD	A,0x6A
  0832    00A9    LD	0x29,A
  0833    0869    LD	A,0x69
  0834    00A8    LD	0x28,A
  0835    284B    JP	0x4B
193:              			admin = data;	
194:              		}
195:              		else if(data > admax)
  0836    086A    LD	A,0x6A
  0837    0229    SUBA	0x29
  0838    1D03    SNZB	0x3,2
  0839    283C    JP	0x3C
  083A    0869    LD	A,0x69
  083B    0228    SUBA	0x28
  083C    1803    SZB	0x3,0
  083D    2843    JP	0x43
196:              		{
197:              			admax = data;  //AD采样最大值
  083E    086A    LD	A,0x6A
  083F    00A9    LD	0x29,A
  0840    0869    LD	A,0x69
  0841    00A8    LD	0x28,A
198:              		}
  0842    284F    JP	0x4F
199:              		else if(data < admin)
  0843    082B    LD	A,0x2B
  0844    026A    SUBA	0x6A
  0845    1D03    SNZB	0x3,2
  0846    2849    JP	0x49
  0847    082A    LD	A,0x2A
  0848    0269    SUBA	0x69
  0849    1803    SZB	0x3,0
  084A    284F    JP	0x4F
200:              		{
201:              			admin = data;  //AD采样最小值
  084B    086A    LD	A,0x6A
  084C    00AB    LD	0x2B,A
  084D    0869    LD	A,0x69
  084E    00AA    LD	0x2A,A
202:              		}
203:              		adsum += data;
  084F    0869    LD	A,0x69
  0850    1683    SETB	0x3,5
  0851    07A5    ADDR	0x25
  0852    1803    SZB	0x3,0
  0853    0AA6    INCR	0x26
  0854    1283    CLRB	0x3,5
  0855    086A    LD	A,0x6A
  0856    1683    SETB	0x3,5
  0857    07A6    ADDR	0x26
204:              		if(++adtimes >= 8)
  0858    3008    LDIA	0x8
  0859    1283    CLRB	0x3,5
  085A    0AB5    INCR	0x35
  085B    0235    SUBA	0x35
  085C    1C03    SNZB	0x3,0
  085D    0008    RET
205:              		{
206:              			adsum -= admax;
  085E    0828    LD	A,0x28
  085F    1683    SETB	0x3,5
  0860    02A5    SUBR	0x25
  0861    1283    CLRB	0x3,5
  0862    0829    LD	A,0x29
  0863    1683    SETB	0x3,5
  0864    1C03    SNZB	0x3,0
  0865    03A6    DECR	0x26
  0866    02A6    SUBR	0x26
207:              			adsum -= admin;			
  0867    1283    CLRB	0x3,5
  0868    082A    LD	A,0x2A
  0869    1683    SETB	0x3,5
  086A    02A5    SUBR	0x25
  086B    1283    CLRB	0x3,5
  086C    082B    LD	A,0x2B
  086D    1683    SETB	0x3,5
  086E    1C03    SNZB	0x3,0
  086F    03A6    DECR	0x26
  0870    02A6    SUBR	0x26
208:              			
209:              			AdResult_12bit=adsum/6;
  0871    3006    LDIA	0x6
  0872    1283    CLRB	0x3,5
  0873    00DD    LD	0x5D,A
  0874    01DE    CLR	0x5E
  0875    1683    SETB	0x3,5
  0876    0826    LD	A,0x26
  0877    1283    CLRB	0x3,5
  0878    00E0    LD	0x60,A
  0879    1683    SETB	0x3,5
  087A    0825    LD	A,0x25
  087B    1283    CLRB	0x3,5
  087C    00DF    LD	0x5F,A
  087D    2145    CALL	0x145
  087E    120A    CLRB	0xA,4
  087F    158A    SETB	0xA,3
  0880    085E    LD	A,0x5E
  0881    00AD    LD	0x2D,A
  0882    085D    LD	A,0x5D
  0883    00AC    LD	0x2C,A
210:              			range=0;
  0884    01B6    CLR	0x36
211:              			BreakTimeOut = 106;
  0885    306A    LDIA	0x6A
  0886    00BC    LD	0x3C,A
212:              			while(BreakTimeOut--)
  0887    03BC    DECR	0x3C
  0888    083C    LD	A,0x3C
  0889    3AFF    XORIA	0xFF
  088A    1903    SZB	0x3,2
  088B    2927    JP	0x127
213:              			{
214:              				//asm("clrwdt");
215:              				TAB_pos=Temperature_Dat+range;
  088C    0836    LD	A,0x36
  088D    076E    ADDA	0x6E
  088E    00B4    LD	0x34,A
216:              				if(TAB_pos<=105)
  088F    0834    LD	A,0x34
  0890    3A80    XORIA	0x80
  0891    3E16    ADDIA	0x16
  0892    1803    SZB	0x3,0
  0893    28CF    JP	0xCF
217:              				{
218:              					if((AdResult_12bit>=TempTab[TAB_pos][0])&&(AdResult_12bit<=TempTab[TAB_pos][1]))
  0894    0834    LD	A,0x34
  0895    00E4    LD	0x64,A
  0896    3090    LDIA	0x90
  0897    216F    CALL	0x16F
  0898    3012    LDIA	0x12
  0899    0764    ADDA	0x64
  089A    0084    LD	0x4,A
  089B    1803    SZB	0x3,0
  089C    0AFF    INCR	0x7F
  089D    160A    SETB	0xA,4
  089E    118A    CLRB	0xA,3
  089F    2000    CALL	0x0
  08A0    120A    CLRB	0xA,4
  08A1    158A    SETB	0xA,3
  08A2    00E6    LD	0x66,A
  08A3    160A    SETB	0xA,4
  08A4    118A    CLRB	0xA,3
  08A5    2000    CALL	0x0
  08A6    120A    CLRB	0xA,4
  08A7    158A    SETB	0xA,3
  08A8    00E7    LD	0x67,A
  08A9    022D    SUBA	0x2D
  08AA    1D03    SNZB	0x3,2
  08AB    28AE    JP	0xAE
  08AC    0866    LD	A,0x66
  08AD    022C    SUBA	0x2C
  08AE    1C03    SNZB	0x3,0
  08AF    28CF    JP	0xCF
  08B0    0834    LD	A,0x34
  08B1    00E4    LD	0x64,A
  08B2    3090    LDIA	0x90
  08B3    216F    CALL	0x16F
  08B4    3014    LDIA	0x14
  08B5    0764    ADDA	0x64
  08B6    0084    LD	0x4,A
  08B7    1803    SZB	0x3,0
  08B8    0AFF    INCR	0x7F
  08B9    160A    SETB	0xA,4
  08BA    118A    CLRB	0xA,3
  08BB    2000    CALL	0x0
  08BC    120A    CLRB	0xA,4
  08BD    158A    SETB	0xA,3
  08BE    00E6    LD	0x66,A
  08BF    160A    SETB	0xA,4
  08C0    118A    CLRB	0xA,3
  08C1    2000    CALL	0x0
  08C2    120A    CLRB	0xA,4
  08C3    158A    SETB	0xA,3
  08C4    00E7    LD	0x67,A
  08C5    082D    LD	A,0x2D
  08C6    0267    SUBA	0x67
  08C7    1D03    SNZB	0x3,2
  08C8    28CB    JP	0xCB
  08C9    082C    LD	A,0x2C
  08CA    0266    SUBA	0x66
  08CB    1C03    SNZB	0x3,0
  08CC    28CF    JP	0xCF
219:              					{	
220:              							Temperature_Dat=TAB_pos;
  08CD    0834    LD	A,0x34
  08CE    2926    JP	0x126
221:              							break;
222:              					}
223:              				}	
224:              				TAB_pos=Temperature_Dat-range;
  08CF    0836    LD	A,0x36
  08D0    026E    SUBA	0x6E
  08D1    00B4    LD	0x34,A
225:              				if(TAB_pos>=0)
  08D2    1BB4    SZB	0x34,7
  08D3    290D    JP	0x10D
226:              				{			
227:              					if(AdResult_12bit<=TempTab[TAB_pos][1]&&AdResult_12bit>=TempTab[TAB_pos][0])
  08D4    0834    LD	A,0x34
  08D5    00E4    LD	0x64,A
  08D6    3090    LDIA	0x90
  08D7    216F    CALL	0x16F
  08D8    3014    LDIA	0x14
  08D9    0764    ADDA	0x64
  08DA    0084    LD	0x4,A
  08DB    1803    SZB	0x3,0
  08DC    0AFF    INCR	0x7F
  08DD    160A    SETB	0xA,4
  08DE    118A    CLRB	0xA,3
  08DF    2000    CALL	0x0
  08E0    120A    CLRB	0xA,4
  08E1    158A    SETB	0xA,3
  08E2    00E6    LD	0x66,A
  08E3    160A    SETB	0xA,4
  08E4    118A    CLRB	0xA,3
  08E5    2000    CALL	0x0
  08E6    120A    CLRB	0xA,4
  08E7    158A    SETB	0xA,3
  08E8    00E7    LD	0x67,A
  08E9    082D    LD	A,0x2D
  08EA    0267    SUBA	0x67
  08EB    1D03    SNZB	0x3,2
  08EC    28EF    JP	0xEF
  08ED    082C    LD	A,0x2C
  08EE    0266    SUBA	0x66
  08EF    1C03    SNZB	0x3,0
  08F0    290D    JP	0x10D
  08F1    0834    LD	A,0x34
  08F2    00E4    LD	0x64,A
  08F3    3090    LDIA	0x90
  08F4    216F    CALL	0x16F
  08F5    3012    LDIA	0x12
  08F6    0764    ADDA	0x64
  08F7    0084    LD	0x4,A
  08F8    1803    SZB	0x3,0
  08F9    0AFF    INCR	0x7F
  08FA    160A    SETB	0xA,4
  08FB    118A    CLRB	0xA,3
  08FC    2000    CALL	0x0
  08FD    120A    CLRB	0xA,4
  08FE    158A    SETB	0xA,3
  08FF    00E6    LD	0x66,A
  0900    160A    SETB	0xA,4
  0901    118A    CLRB	0xA,3
  0902    2000    CALL	0x0
  0903    120A    CLRB	0xA,4
  0904    158A    SETB	0xA,3
  0905    00E7    LD	0x67,A
  0906    022D    SUBA	0x2D
  0907    1D03    SNZB	0x3,2
  0908    290B    JP	0x10B
  0909    0866    LD	A,0x66
  090A    022C    SUBA	0x2C
  090B    1803    SZB	0x3,0
  090C    28CD    JP	0xCD
228:              					{
229:              						Temperature_Dat=TAB_pos;
230:              						break;
231:              					}
232:              				}
233:              				range++;
  090D    0AB6    INCR	0x36
234:              				if(AdResult_12bit>=TempTab[105][1])
  090E    30B8    LDIA	0xB8
  090F    0084    LD	0x4,A
  0910    3091    LDIA	0x91
  0911    00FF    LD	0x7F,A
  0912    160A    SETB	0xA,4
  0913    118A    CLRB	0xA,3
  0914    2000    CALL	0x0
  0915    120A    CLRB	0xA,4
  0916    158A    SETB	0xA,3
  0917    00E4    LD	0x64,A
  0918    160A    SETB	0xA,4
  0919    118A    CLRB	0xA,3
  091A    2000    CALL	0x0
  091B    120A    CLRB	0xA,4
  091C    158A    SETB	0xA,3
  091D    00E5    LD	0x65,A
  091E    022D    SUBA	0x2D
  091F    1D03    SNZB	0x3,2
  0920    2923    JP	0x123
  0921    0864    LD	A,0x64
  0922    022C    SUBA	0x2C
  0923    1C03    SNZB	0x3,0
  0924    2887    JP	0x87
235:              				{
236:              					Temperature_Dat=105;
  0925    3069    LDIA	0x69
  0926    00EE    LD	0x6E,A
237:              					break;
238:              				}
239:              				
240:              			}
241:              			adsum = 0;
242:              			admin = 0;
243:              			admax = 0;
  0927    2179    CALL	0x179
244:              			adtimes = 0;		
  0928    01B5    CLR	0x35
  0929    0008    RET
245:              			
246:              		}
247:              	}
248:              	else
249:              	{
250:              		adsum = 0;
251:              		admin = 0;
252:              		admax = 0;
  092A    2179    CALL	0x179
  092B    0008    RET
253:              		//adtimes = 0;
254:              	}	
255:              }
256:              
257:              
258:              /************************************************************
259:              函数名称：DealTmpr
260:              函数功能：水温检测及处理函数
261:              入口参数：
262:              出口参数：
263:              备    注：检测并处理水温
264:              ************************************************************/
265:              void DealTmpr()
266:              {	
267:              	NtcAD_Testing(C_NTC_ADCH);
268:              
269:              }
270:              
271:              
---- E:\BBA'DATA\CMS_ID~1.32_\data\sources\lwdiv.c ----------------------------------------------------------------------
1:                // word unsigned division
2:                
3:                unsigned int
4:                __lwdiv(unsigned int divisor, unsigned int dividend)
5:                {
  0945    01E2    CLR	0x62
  0946    01E3    CLR	0x63
  0947    085E    LD	A,0x5E
  0948    045D    ORA	0x5D
  0949    1903    SZB	0x3,2
  094A    296A    JP	0x16A
  094B    01E1    CLR	0x61
  094C    0AE1    INCR	0x61
  094D    1BDE    SZB	0x5E,7
  094E    2953    JP	0x153
  094F    1003    CLRB	0x3,0
  0950    0DDD    RLCR	0x5D
  0951    0DDE    RLCR	0x5E
  0952    294C    JP	0x14C
  0953    1003    CLRB	0x3,0
  0954    0DE2    RLCR	0x62
  0955    0DE3    RLCR	0x63
  0956    085E    LD	A,0x5E
  0957    0260    SUBA	0x60
  0958    1D03    SNZB	0x3,2
  0959    295C    JP	0x15C
  095A    085D    LD	A,0x5D
  095B    025F    SUBA	0x5F
  095C    1C03    SNZB	0x3,0
  095D    2966    JP	0x166
  095E    085D    LD	A,0x5D
  095F    02DF    SUBR	0x5F
  0960    085E    LD	A,0x5E
  0961    1C03    SNZB	0x3,0
  0962    03E0    DECR	0x60
  0963    02E0    SUBR	0x60
  0964    1462    SETB	0x62,0
  0965    1003    CLRB	0x3,0
  0966    0CDE    RRCR	0x5E
  0967    0CDD    RRCR	0x5D
  0968    0BE1    SZDECR	0x61
  0969    2953    JP	0x153
  096A    0863    LD	A,0x63
  096B    00DE    LD	0x5E,A
  096C    0862    LD	A,0x62
  096D    00DD    LD	0x5D,A
  096E    0008    RET
6:                	unsigned int	quotient;
7:                	unsigned char	counter;
8:                
9:                	quotient = 0;
10:               	if(divisor != 0) {
11:               		counter = 1;
12:               		while((divisor & 0x8000) == 0) {
13:               			divisor <<= 1;
14:               			counter++;
15:               		}
16:               		do {
17:               			quotient <<= 1;
18:               			if(divisor <= dividend) {
19:               				dividend -= divisor;
20:               				quotient |= 1;
21:               			}
22:               			divisor >>= 1;
23:               		} while(--counter != 0);
24:               	}
25:               	return quotient;
26:               }
---- E:\BBA'DATA\美芯电子产品程序\咖啡机\V4.7\74HC595.c ----------------------------------------------------------------------
1:                #include "74HC595.h"
2:                
3:                
4:                
5:                void _74HC595_SET()
6:                {
7:                	signed char i,j;
8:                	for(i=0;i<3;i++)
  0AE9    01F5    CLR	0x75
  15AA    1303    CLRB	0x3,6
  15AB    01DE    CLR	0x5E
9:                		for(j=0;j<8;j++)
  0AEA    01F6    CLR	0x76
  15AC    01DF    CLR	0x5F
10:               		{
11:               			if(Temp_595[i]&(1<<j))
  0AEB    0875    LD	A,0x75
  0AEC    3E25    ADDIA	0x25
  0AED    0084    LD	0x4,A
  0AEE    3001    LDIA	0x1
  0AEF    00F4    LD	0x74,A
  0AF0    0A76    INCA	0x76
  0AF1    2AF4    JP	0x2F4
  0AF2    1003    CLRB	0x3,0
  0AF3    0DF4    RLCR	0x74
  0AF4    3EFF    ADDIA	0xFF
  0AF5    1D03    SNZB	0x3,2
  0AF6    2AF2    JP	0x2F2
  0AF7    0874    LD	A,0x74
  0AF8    1383    CLRB	0x3,7
  0AF9    0500    ANDA	0x0
  0AFA    1903    SZB	0x3,2
  0AFB    2AFE    JP	0x2FE
  15AD    085E    LD	A,0x5E
  15AE    3E25    ADDIA	0x25
  15AF    0084    LD	0x4,A
  15B0    3001    LDIA	0x1
  15B1    00DD    LD	0x5D,A
  15B2    0A5F    INCA	0x5F
  15B3    2DB6    JP	0x5B6
  15B4    1003    CLRB	0x3,0
  15B5    0DDD    RLCR	0x5D
  15B6    3EFF    ADDIA	0xFF
  15B7    1D03    SNZB	0x3,2
  15B8    2DB4    JP	0x5B4
  15B9    085D    LD	A,0x5D
  15BA    1383    CLRB	0x3,7
  15BB    0500    ANDA	0x0
  15BC    1903    SZB	0x3,2
  15BD    2DC0    JP	0x5C0
12:               			{
13:               				_74HC595_DS=1;
  0AFC    1589    SETB	0x9,3
  15BE    1589    SETB	0x9,3
14:               			}
  0AFD    2AFF    JP	0x2FF
  15BF    2DC1    JP	0x5C1
15:               			else
16:               			{
17:               				_74HC595_DS=0;
  0AFE    1189    CLRB	0x9,3
  15C0    1189    CLRB	0x9,3
18:               			}
19:               			_74HC595_SH_CP=1;
  0AFF    1487    SETB	0x7,1
  15C1    1487    SETB	0x7,1
20:               			_74HC595_SH_CP=0;
  0B00    1087    CLRB	0x7,1
  0B01    0AF6    INCR	0x76
  0B02    0876    LD	A,0x76
  0B03    3A80    XORIA	0x80
  0B04    3E78    ADDIA	0x78
  0B05    1C03    SNZB	0x3,0
  0B06    2AEB    JP	0x2EB
  0B07    0AF5    INCR	0x75
  0B08    0875    LD	A,0x75
  0B09    3A80    XORIA	0x80
  0B0A    3E7D    ADDIA	0x7D
  0B0B    1C03    SNZB	0x3,0
  0B0C    2AEA    JP	0x2EA
  15C2    1087    CLRB	0x7,1
  15C3    0ADF    INCR	0x5F
  15C4    085F    LD	A,0x5F
  15C5    3A80    XORIA	0x80
  15C6    3E78    ADDIA	0x78
  15C7    1C03    SNZB	0x3,0
  15C8    2DAD    JP	0x5AD
  15C9    0ADE    INCR	0x5E
  15CA    085E    LD	A,0x5E
  15CB    3A80    XORIA	0x80
  15CC    3E7D    ADDIA	0x7D
  15CD    1C03    SNZB	0x3,0
  15CE    2DAC    JP	0x5AC
21:               		}
22:               		
23:               	_74HC595_ST_CP=1;
  0B0D    1707    SETB	0x7,6
  15CF    1707    SETB	0x7,6
24:               	_74HC595_ST_CP=0;
  0B0E    1307    CLRB	0x7,6
  0B0F    0008    RET
  15D0    1307    CLRB	0x7,6
  15D1    0008    RET
25:               }
---- library_code ------------------------------------------------------------------
  0D22    1973    SZB	0x73,2
  0D23    2D2F    JP	0x52F
  0D24    2550    CALL	0x550
  0D25    120A    CLRB	0xA,4
  0D26    158A    SETB	0xA,3
  0D27    3008    LDIA	0x8
  0D28    0AC0    INCR	0x40
  0D29    0240    SUBA	0x40
  0D2A    1C03    SNZB	0x3,0
  0D2B    2D4F    JP	0x54F
  0D2C    01C0    CLR	0x40
  0D2D    1573    SETB	0x73,2
  0D2E    2D4F    JP	0x54F
  0D2F    19F3    SZB	0x73,3
  0D30    2D47    JP	0x547
  0D31    25BA    CALL	0x5BA
  0D32    120A    CLRB	0xA,4
  0D33    158A    SETB	0xA,3
  0D34    2768    CALL	0x768
  0D35    120A    CLRB	0xA,4
  0D36    158A    SETB	0xA,3
  0D37    15F3    SETB	0x73,3
  0D38    18F3    SZB	0x73,1
  0D39    2D3F    JP	0x53F
  0D3A    3002    LDIA	0x2
  0D3B    1283    CLRB	0x3,5
  0D3C    0240    SUBA	0x40
  0D3D    1C03    SNZB	0x3,0
  0D3E    2D45    JP	0x545
  0D3F    26DF    CALL	0x6DF
  0D40    120A    CLRB	0xA,4
  0D41    158A    SETB	0xA,3
  0D42    10F3    CLRB	0x73,1
  0D43    1173    CLRB	0x73,2
  0D44    11F3    CLRB	0x73,3
  0D45    01C0    CLR	0x40
  0D46    2D4F    JP	0x54F
  0D47    26F5    CALL	0x6F5
  0D48    120A    CLRB	0xA,4
  0D49    158A    SETB	0xA,3
  0D4A    2598    CALL	0x598
  0D4B    120A    CLRB	0xA,4
  0D4C    158A    SETB	0xA,3
  0D4D    1173    CLRB	0x73,2
  0D4E    11F3    CLRB	0x73,3
  0D4F    2FA0    JP	0x7A0
  0D50    1283    CLRB	0x3,5
  0D51    01DF    CLR	0x5F
  0D52    1703    SETB	0x3,6
  0D53    0193    CLR	0x13
  0D54    0194    CLR	0x14
  0D55    1303    CLRB	0x3,6
  0D56    085F    LD	A,0x5F
  0D57    3EC7    ADDIA	0xC7
  0D58    0084    LD	0x4,A
  0D59    3091    LDIA	0x91
  0D5A    1803    SZB	0x3,0
  0D5B    3E01    ADDIA	0x1
  0D5C    00FF    LD	0x7F,A
  0D5D    160A    SETB	0xA,4
  0D5E    118A    CLRB	0xA,3
  0D5F    2000    CALL	0x0
  0D60    120A    CLRB	0xA,4
  0D61    158A    SETB	0xA,3
  0D62    1703    SETB	0x3,6
  0D63    0093    LD	0x13,A
  0D64    1303    CLRB	0x3,6
  0D65    085F    LD	A,0x5F
  0D66    3ED3    ADDIA	0xD3
  0D67    0084    LD	0x4,A
  0D68    3091    LDIA	0x91
  0D69    1803    SZB	0x3,0
  0D6A    3E01    ADDIA	0x1
  0D6B    00FF    LD	0x7F,A
  0D6C    160A    SETB	0xA,4
  0D6D    118A    CLRB	0xA,3
  0D6E    2000    CALL	0x0
  0D6F    120A    CLRB	0xA,4
  0D70    158A    SETB	0xA,3
  0D71    1703    SETB	0x3,6
  0D72    0094    LD	0x14,A
  0D73    1413    SETB	0x13,0
  0D74    1303    CLRB	0x3,6
  0D75    01DE    CLR	0x5E
  0D76    1703    SETB	0x3,6
  0D77    1B93    SZB	0x13,7
  0D78    2D7F    JP	0x57F
  0D79    1303    CLRB	0x3,6
  0D7A    0BDE    SZDECR	0x5E
  0D7B    2D76    JP	0x576
  0D7C    30FF    LDIA	0xFF
  0D7D    00C0    LD	0x40,A
  0D7E    2D98    JP	0x598
  0D7F    1303    CLRB	0x3,6
  0D80    1003    CLRB	0x3,0
  0D81    0D5F    RLCA	0x5F
  0D82    3EC8    ADDIA	0xC8
  0D83    0084    LD	0x4,A
  0D84    1703    SETB	0x3,6
  0D85    0815    LD	A,0x15
  0D86    1783    SETB	0x3,7
  0D87    0780    ADDR	0x0
  0D88    0F84    SZINCR	0x4
  0D89    0800    LD	A,0x0
  0D8A    1803    SZB	0x3,0
  0D8B    0A00    INCA	0x0
  0D8C    00FF    LD	0x7F,A
  0D8D    0816    LD	A,0x16
  0D8E    077F    ADDA	0x7F
  0D8F    0080    LD	0x0,A
  0D90    300C    LDIA	0xC
  0D91    0384    DECR	0x4
  0D92    1303    CLRB	0x3,6
  0D93    0ADF    INCR	0x5F
  0D94    025F    SUBA	0x5F
  0D95    1803    SZB	0x3,0
  0D96    0008    RET
  0D97    2D52    JP	0x552
  0D98    1283    CLRB	0x3,5
  0D99    01DD    CLR	0x5D
  0D9A    1003    CLRB	0x3,0
  0D9B    0D5D    RLCA	0x5D
  0D9C    3EC8    ADDIA	0xC8
  0D9D    0084    LD	0x4,A
  0D9E    300C    LDIA	0xC
  0D9F    1783    SETB	0x3,7
  0DA0    0180    CLR	0x0
  0DA1    0A84    INCR	0x4
  0DA2    0180    CLR	0x0
  0DA3    0ADD    INCR	0x5D
  0DA4    025D    SUBA	0x5D
  0DA5    1803    SZB	0x3,0
  0DA6    0008    RET
  0DA7    2D9A    JP	0x59A
  0DA8    01DF    CLR	0x5F
  0DA9    085F    LD	A,0x5F
  0DAA    26AC    CALL	0x6AC
  0DAB    120A    CLRB	0xA,4
  0DAC    158A    SETB	0xA,3
  0DAD    3800    ORIA	0x0
  0DAE    1D03    SNZB	0x3,2
  0DAF    2DB4    JP	0x5B4
  0DB0    085F    LD	A,0x5F
  0DB1    26BC    CALL	0x6BC
  0DB2    120A    CLRB	0xA,4
  0DB3    158A    SETB	0xA,3
  0DB4    300C    LDIA	0xC
  0DB5    0ADF    INCR	0x5F
  0DB6    025F    SUBA	0x5F
  0DB7    1803    SZB	0x3,0
  0DB8    0008    RET
  0DB9    2DA9    JP	0x5A9
  0DBA    1283    CLRB	0x3,5
  0DBB    01EC    CLR	0x6C
  0DBC    01AE    CLR	0x2E
  0DBD    01AF    CLR	0x2F
  0DBE    1683    SETB	0x3,5
  0DBF    01D4    CLR	0x54
  0DC0    1283    CLRB	0x3,5
  0DC1    086C    LD	A,0x6C
  0DC2    27F1    CALL	0x7F1
  0DC3    160A    SETB	0xA,4
  0DC4    118A    CLRB	0xA,3
  0DC5    2000    CALL	0x0
  0DC6    120A    CLRB	0xA,4
  0DC7    158A    SETB	0xA,3
  0DC8    00E6    LD	0x66,A
  0DC9    1003    CLRB	0x3,0
  0DCA    0D6C    RLCA	0x6C
  0DCB    3EC8    ADDIA	0xC8
  0DCC    0084    LD	0x4,A
  0DCD    3003    LDIA	0x3
  0DCE    0A84    INCR	0x4
  0DCF    1003    CLRB	0x3,0
  0DD0    1783    SETB	0x3,7
  0DD1    0C80    RRCR	0x0
  0DD2    0384    DECR	0x4
  0DD3    0C80    RRCR	0x0
  0DD4    3EFF    ADDIA	0xFF
  0DD5    1D03    SNZB	0x3,2
  0DD6    2DCE    JP	0x5CE
  0DD7    1003    CLRB	0x3,0
  0DD8    0D6C    RLCA	0x6C
  0DD9    3EC8    ADDIA	0xC8
  0DDA    0084    LD	0x4,A
  0DDB    0800    LD	A,0x0
  0DDC    00EA    LD	0x6A,A
  0DDD    0A84    INCR	0x4
  0DDE    0800    LD	A,0x0
  0DDF    00EB    LD	0x6B,A
  0DE0    086C    LD	A,0x6C
  0DE1    3EDF    ADDIA	0xDF
  0DE2    0084    LD	0x4,A
  0DE3    3091    LDIA	0x91
  0DE4    1803    SZB	0x3,0
  0DE5    3E01    ADDIA	0x1
  0DE6    00FF    LD	0x7F,A
  0DE7    160A    SETB	0xA,4
  0DE8    118A    CLRB	0xA,3
  0DE9    2000    CALL	0x0
  0DEA    120A    CLRB	0xA,4
  0DEB    158A    SETB	0xA,3
  0DEC    00E9    LD	0x69,A
  0DED    00E7    LD	0x67,A
  0DEE    01E8    CLR	0x68
  0DEF    086A    LD	A,0x6A
  0DF0    07E7    ADDR	0x67
  0DF1    1803    SZB	0x3,0
  0DF2    0AE8    INCR	0x68
  0DF3    086B    LD	A,0x6B
  0DF4    07E8    ADDR	0x68
  0DF5    086C    LD	A,0x6C
  0DF6    26AC    CALL	0x6AC
  0DF7    120A    CLRB	0xA,4
  0DF8    158A    SETB	0xA,3
  0DF9    3800    ORIA	0x0
  0DFA    1003    CLRB	0x3,0
  0DFB    1D03    SNZB	0x3,2
  0DFC    2E60    JP	0x660
  0DFD    0D6C    RLCA	0x6C
  0DFE    3E38    ADDIA	0x38
  0DFF    0084    LD	0x4,A
  0E00    1783    SETB	0x3,7
  0E01    0800    LD	A,0x0
  0E02    00E4    LD	0x64,A
  0E03    0A84    INCR	0x4
  0E04    0800    LD	A,0x0
  0E05    00E5    LD	0x65,A
  0E06    1003    CLRB	0x3,0
  0E07    0D6C    RLCA	0x6C
  0E08    3EB0    ADDIA	0xB0
  0E09    27D7    CALL	0x7D7
  0E0A    120A    CLRB	0xA,4
  0E0B    158A    SETB	0xA,3
  0E0C    0268    SUBA	0x68
  0E0D    1D03    SNZB	0x3,2
  0E0E    2E11    JP	0x611
  0E0F    0860    LD	A,0x60
  0E10    0267    SUBA	0x67
  0E11    1803    SZB	0x3,0
  0E12    2E21    JP	0x621
  0E13    1003    CLRB	0x3,0
  0E14    0D6C    RLCA	0x6C
  0E15    3EB0    ADDIA	0xB0
  0E16    27D7    CALL	0x7D7
  0E17    120A    CLRB	0xA,4
  0E18    158A    SETB	0xA,3
  0E19    086A    LD	A,0x6A
  0E1A    0260    SUBA	0x60
  0E1B    00EA    LD	0x6A,A
  0E1C    086B    LD	A,0x6B
  0E1D    1C03    SNZB	0x3,0
  0E1E    0A6B    INCA	0x6B
  0E1F    0261    SUBA	0x61
  0E20    2E46    JP	0x646
  0E21    0865    LD	A,0x65
  0E22    0268    SUBA	0x68
  0E23    1D03    SNZB	0x3,2
  0E24    2E27    JP	0x627
  0E25    0864    LD	A,0x64
  0E26    0267    SUBA	0x67
  0E27    1803    SZB	0x3,0
  0E28    2EA6    JP	0x6A6
  0E29    1003    CLRB	0x3,0
  0E2A    0D6C    RLCA	0x6C
  0E2B    3E98    ADDIA	0x98
  0E2C    27D7    CALL	0x7D7
  0E2D    120A    CLRB	0xA,4
  0E2E    158A    SETB	0xA,3
  0E2F    0268    SUBA	0x68
  0E30    1D03    SNZB	0x3,2
  0E31    2E34    JP	0x634
  0E32    0860    LD	A,0x60
  0E33    0267    SUBA	0x67
  0E34    1803    SZB	0x3,0
  0E35    2EA6    JP	0x6A6
  0E36    1003    CLRB	0x3,0
  0E37    0D6C    RLCA	0x6C
  0E38    3EB0    ADDIA	0xB0
  0E39    0084    LD	0x4,A
  0E3A    0864    LD	A,0x64
  0E3B    0080    LD	0x0,A
  0E3C    0A84    INCR	0x4
  0E3D    0865    LD	A,0x65
  0E3E    0080    LD	0x0,A
  0E3F    086A    LD	A,0x6A
  0E40    0264    SUBA	0x64
  0E41    00EA    LD	0x6A,A
  0E42    086B    LD	A,0x6B
  0E43    1C03    SNZB	0x3,0
  0E44    0A6B    INCA	0x6B
  0E45    0265    SUBA	0x65
  0E46    00EB    LD	0x6B,A
  0E47    086C    LD	A,0x6C
  0E48    3E50    ADDIA	0x50
  0E49    0084    LD	0x4,A
  0E4A    0180    CLR	0x0
  0E4B    086B    LD	A,0x6B
  0E4C    3A00    XORIA	0x0
  0E4D    1903    SZB	0x3,2
  0E4E    2E51    JP	0x651
  0E4F    30FF    LDIA	0xFF
  0E50    2E52    JP	0x652
  0E51    086A    LD	A,0x6A
  0E52    00E9    LD	0x69,A
  0E53    1683    SETB	0x3,5
  0E54    0254    SUBA	0x54
  0E55    1803    SZB	0x3,0
  0E56    2E5D    JP	0x65D
  0E57    1283    CLRB	0x3,5
  0E58    0869    LD	A,0x69
  0E59    1683    SETB	0x3,5
  0E5A    00D4    LD	0x54,A
  0E5B    1283    CLRB	0x3,5
  0E5C    2E9F    JP	0x69F
  0E5D    1283    CLRB	0x3,5
  0E5E    0AC0    INCR	0x40
  0E5F    2EA6    JP	0x6A6
  0E60    0D6C    RLCA	0x6C
  0E61    3EB0    ADDIA	0xB0
  0E62    0084    LD	0x4,A
  0E63    1783    SETB	0x3,7
  0E64    0800    LD	A,0x0
  0E65    00E0    LD	0x60,A
  0E66    0A84    INCR	0x4
  0E67    0800    LD	A,0x0
  0E68    00E1    LD	0x61,A
  0E69    0860    LD	A,0x60
  0E6A    3E01    ADDIA	0x1
  0E6B    00E2    LD	0x62,A
  0E6C    0861    LD	A,0x61
  0E6D    1803    SZB	0x3,0
  0E6E    3E01    ADDIA	0x1
  0E6F    00E3    LD	0x63,A
  0E70    0868    LD	A,0x68
  0E71    0263    SUBA	0x63
  0E72    1D03    SNZB	0x3,2
  0E73    2E76    JP	0x676
  0E74    0867    LD	A,0x67
  0E75    0262    SUBA	0x62
  0E76    1C03    SNZB	0x3,0
  0E77    2EA6    JP	0x6A6
  0E78    1003    CLRB	0x3,0
  0E79    0D6C    RLCA	0x6C
  0E7A    3E38    ADDIA	0x38
  0E7B    0084    LD	0x4,A
  0E7C    27C4    CALL	0x7C4
  0E7D    120A    CLRB	0xA,4
  0E7E    158A    SETB	0xA,3
  0E7F    1C03    SNZB	0x3,0
  0E80    2E8A    JP	0x68A
  0E81    1003    CLRB	0x3,0
  0E82    0D6C    RLCA	0x6C
  0E83    3E98    ADDIA	0x98
  0E84    0084    LD	0x4,A
  0E85    27C4    CALL	0x7C4
  0E86    120A    CLRB	0xA,4
  0E87    158A    SETB	0xA,3
  0E88    1803    SZB	0x3,0
  0E89    2E97    JP	0x697
  0E8A    086C    LD	A,0x6C
  0E8B    3E50    ADDIA	0x50
  0E8C    0084    LD	0x4,A
  0E8D    3009    LDIA	0x9
  0E8E    0A80    INCR	0x0
  0E8F    0200    SUBA	0x0
  0E90    1C03    SNZB	0x3,0
  0E91    2E9B    JP	0x69B
  0E92    086C    LD	A,0x6C
  0E93    26BC    CALL	0x6BC
  0E94    120A    CLRB	0xA,4
  0E95    158A    SETB	0xA,3
  0E96    2EA6    JP	0x6A6
  0E97    086C    LD	A,0x6C
  0E98    3E50    ADDIA	0x50
  0E99    0084    LD	0x4,A
  0E9A    0180    CLR	0x0
  0E9B    082F    LD	A,0x2F
  0E9C    042E    ORA	0x2E
  0E9D    1D03    SNZB	0x3,2
  0E9E    2EA6    JP	0x6A6
  0E9F    0866    LD	A,0x66
  0EA0    00DD    LD	0x5D,A
  0EA1    01DE    CLR	0x5E
  0EA2    086C    LD	A,0x6C
  0EA3    26D3    CALL	0x6D3
  0EA4    120A    CLRB	0xA,4
  0EA5    158A    SETB	0xA,3
  0EA6    300C    LDIA	0xC
  0EA7    0AEC    INCR	0x6C
  0EA8    026C    SUBA	0x6C
  0EA9    1803    SZB	0x3,0
  0EAA    0008    RET
  0EAB    2DC0    JP	0x5C0
  0EAC    00DE    LD	0x5E,A
  0EAD    27F1    CALL	0x7F1
  0EAE    160A    SETB	0xA,4
  0EAF    118A    CLRB	0xA,3
  0EB0    2000    CALL	0x0
  0EB1    120A    CLRB	0xA,4
  0EB2    158A    SETB	0xA,3
  0EB3    00DD    LD	0x5D,A
  0EB4    1DDE    SNZB	0x5E,3
  0EB5    2EB8    JP	0x6B8
  0EB6    0831    LD	A,0x31
  0EB7    2EB9    JP	0x6B9
  0EB8    0830    LD	A,0x30
  0EB9    05DD    ANDR	0x5D
  0EBA    085D    LD	A,0x5D
  0EBB    0008    RET
  0EBC    00DD    LD	0x5D,A
  0EBD    1003    CLRB	0x3,0
  0EBE    0D5D    RLCA	0x5D
  0EBF    3E20    ADDIA	0x20
  0EC0    0084    LD	0x4,A
  0EC1    1783    SETB	0x3,7
  0EC2    0180    CLR	0x0
  0EC3    0A84    INCR	0x4
  0EC4    0180    CLR	0x0
  0EC5    1003    CLRB	0x3,0
  0EC6    0D5D    RLCA	0x5D
  0EC7    3E98    ADDIA	0x98
  0EC8    27F9    CALL	0x7F9
  0EC9    120A    CLRB	0xA,4
  0ECA    158A    SETB	0xA,3
  0ECB    3E38    ADDIA	0x38
  0ECC    27F9    CALL	0x7F9
  0ECD    3EB0    ADDIA	0xB0
  0ECE    0084    LD	0x4,A
  0ECF    0180    CLR	0x0
  0ED0    0A84    INCR	0x4
  0ED1    0180    CLR	0x0
  0ED2    0008    RET
  0ED3    00DF    LD	0x5F,A
  0ED4    0AC0    INCR	0x40
  0ED5    01AE    CLR	0x2E
  0ED6    01AF    CLR	0x2F
  0ED7    1DDF    SNZB	0x5F,3
  0ED8    2EDC    JP	0x6DC
  0ED9    085D    LD	A,0x5D
  0EDA    00AF    LD	0x2F,A
  0EDB    0008    RET
  0EDC    085D    LD	A,0x5D
  0EDD    00AE    LD	0x2E,A
  0EDE    0008    RET
  0EDF    1283    CLRB	0x3,5
  0EE0    01B0    CLR	0x30
  0EE1    01B1    CLR	0x31
  0EE2    01DE    CLR	0x5E
  0EE3    1003    CLRB	0x3,0
  0EE4    0D5E    RLCA	0x5E
  0EE5    3EC8    ADDIA	0xC8
  0EE6    0084    LD	0x4,A
  0EE7    1783    SETB	0x3,7
  0EE8    0180    CLR	0x0
  0EE9    0A84    INCR	0x4
  0EEA    0180    CLR	0x0
  0EEB    085E    LD	A,0x5E
  0EEC    26BC    CALL	0x6BC
  0EED    120A    CLRB	0xA,4
  0EEE    158A    SETB	0xA,3
  0EEF    300C    LDIA	0xC
  0EF0    0ADE    INCR	0x5E
  0EF1    025E    SUBA	0x5E
  0EF2    1803    SZB	0x3,0
  0EF3    0008    RET
  0EF4    2EE3    JP	0x6E3
  0EF5    1283    CLRB	0x3,5
  0EF6    3004    LDIA	0x4
  0EF7    01E5    CLR	0x65
  0EF8    1683    SETB	0x3,5
  0EF9    0ACF    INCR	0x4F
  0EFA    024F    SUBA	0x4F
  0EFB    1C03    SNZB	0x3,0
  0EFC    0008    RET
  0EFD    01CF    CLR	0x4F
  0EFE    1283    CLRB	0x3,5
  0EFF    1003    CLRB	0x3,0
  0F00    0D65    RLCA	0x65
  0F01    3EC8    ADDIA	0xC8
  0F02    0084    LD	0x4,A
  0F03    1783    SETB	0x3,7
  0F04    0800    LD	A,0x0
  0F05    00E1    LD	0x61,A
  0F06    0A84    INCR	0x4
  0F07    0800    LD	A,0x0
  0F08    00E2    LD	0x62,A
  0F09    0865    LD	A,0x65
  0F0A    26AC    CALL	0x6AC
  0F0B    120A    CLRB	0xA,4
  0F0C    158A    SETB	0xA,3
  0F0D    3800    ORIA	0x0
  0F0E    1003    CLRB	0x3,0
  0F0F    1D03    SNZB	0x3,2
  0F10    2F4B    JP	0x74B
  0F11    0D65    RLCA	0x65
  0F12    3E20    ADDIA	0x20
  0F13    0084    LD	0x4,A
  0F14    1783    SETB	0x3,7
  0F15    27B6    CALL	0x7B6
  0F16    120A    CLRB	0xA,4
  0F17    158A    SETB	0xA,3
  0F18    1903    SZB	0x3,2
  0F19    0263    SUBA	0x63
  0F1A    1C03    SNZB	0x3,0
  0F1B    2F22    JP	0x722
  0F1C    0A63    INCA	0x63
  0F1D    1903    SZB	0x3,2
  0F1E    0A64    INCA	0x64
  0F1F    1003    CLRB	0x3,0
  0F20    1D03    SNZB	0x3,2
  0F21    2F4B    JP	0x74B
  0F22    0D65    RLCA	0x65
  0F23    3E98    ADDIA	0x98
  0F24    0084    LD	0x4,A
  0F25    27B6    CALL	0x7B6
  0F26    120A    CLRB	0xA,4
  0F27    158A    SETB	0xA,3
  0F28    1903    SZB	0x3,2
  0F29    0263    SUBA	0x63
  0F2A    1C03    SNZB	0x3,0
  0F2B    2F32    JP	0x732
  0F2C    0A63    INCA	0x63
  0F2D    1903    SZB	0x3,2
  0F2E    0A64    INCA	0x64
  0F2F    1003    CLRB	0x3,0
  0F30    1D03    SNZB	0x3,2
  0F31    2F4B    JP	0x74B
  0F32    0D65    RLCA	0x65
  0F33    3E38    ADDIA	0x38
  0F34    0084    LD	0x4,A
  0F35    27B6    CALL	0x7B6
  0F36    120A    CLRB	0xA,4
  0F37    158A    SETB	0xA,3
  0F38    1903    SZB	0x3,2
  0F39    0263    SUBA	0x63
  0F3A    1C03    SNZB	0x3,0
  0F3B    2F42    JP	0x742
  0F3C    0A63    INCA	0x63
  0F3D    1903    SZB	0x3,2
  0F3E    0A64    INCA	0x64
  0F3F    1003    CLRB	0x3,0
  0F40    1D03    SNZB	0x3,2
  0F41    2F4B    JP	0x74B
  0F42    0D65    RLCA	0x65
  0F43    3EB0    ADDIA	0xB0
  0F44    0084    LD	0x4,A
  0F45    0861    LD	A,0x61
  0F46    0080    LD	0x0,A
  0F47    0A84    INCR	0x4
  0F48    0862    LD	A,0x62
  0F49    0080    LD	0x0,A
  0F4A    1003    CLRB	0x3,0
  0F4B    0D65    RLCA	0x65
  0F4C    3E98    ADDIA	0x98
  0F4D    0084    LD	0x4,A
  0F4E    1783    SETB	0x3,7
  0F4F    27E9    CALL	0x7E9
  0F50    120A    CLRB	0xA,4
  0F51    158A    SETB	0xA,3
  0F52    3E38    ADDIA	0x38
  0F53    27DE    CALL	0x7DE
  0F54    120A    CLRB	0xA,4
  0F55    158A    SETB	0xA,3
  0F56    27E9    CALL	0x7E9
  0F57    120A    CLRB	0xA,4
  0F58    158A    SETB	0xA,3
  0F59    3E98    ADDIA	0x98
  0F5A    27DE    CALL	0x7DE
  0F5B    120A    CLRB	0xA,4
  0F5C    158A    SETB	0xA,3
  0F5D    0861    LD	A,0x61
  0F5E    0080    LD	0x0,A
  0F5F    0A84    INCR	0x4
  0F60    0862    LD	A,0x62
  0F61    0080    LD	0x0,A
  0F62    300C    LDIA	0xC
  0F63    0AE5    INCR	0x65
  0F64    0265    SUBA	0x65
  0F65    1803    SZB	0x3,0
  0F66    0008    RET
  0F67    2EFE    JP	0x6FE
  0F68    082F    LD	A,0x2F
  0F69    042E    ORA	0x2E
  0F6A    1903    SZB	0x3,2
  0F6B    2F8F    JP	0x78F
  0F6C    1683    SETB	0x3,5
  0F6D    01D1    CLR	0x51
  0F6E    1283    CLRB	0x3,5
  0F6F    082E    LD	A,0x2E
  0F70    0632    XORA	0x32
  0F71    1D03    SNZB	0x3,2
  0F72    2F87    JP	0x787
  0F73    082F    LD	A,0x2F
  0F74    0633    XORA	0x33
  0F75    1D03    SNZB	0x3,2
  0F76    2F87    JP	0x787
  0F77    3002    LDIA	0x2
  0F78    1683    SETB	0x3,5
  0F79    0AD0    INCR	0x50
  0F7A    0250    SUBA	0x50
  0F7B    1C03    SNZB	0x3,0
  0F7C    0008    RET
  0F7D    01D0    CLR	0x50
  0F7E    1283    CLRB	0x3,5
  0F7F    082E    LD	A,0x2E
  0F80    00B0    LD	0x30,A
  0F81    082F    LD	A,0x2F
  0F82    00B1    LD	0x31,A
  0F83    1873    SZB	0x73,0
  0F84    0008    RET
  0F85    1473    SETB	0x73,0
  0F86    2DA8    JP	0x5A8
  0F87    1073    CLRB	0x73,0
  0F88    082E    LD	A,0x2E
  0F89    00B2    LD	0x32,A
  0F8A    082F    LD	A,0x2F
  0F8B    00B3    LD	0x33,A
  0F8C    1683    SETB	0x3,5
  0F8D    01D0    CLR	0x50
  0F8E    0008    RET
  0F8F    1683    SETB	0x3,5
  0F90    01D0    CLR	0x50
  0F91    1283    CLRB	0x3,5
  0F92    01B2    CLR	0x32
  0F93    01B3    CLR	0x33
  0F94    3002    LDIA	0x2
  0F95    1683    SETB	0x3,5
  0F96    0AD1    INCR	0x51
  0F97    0251    SUBA	0x51
  0F98    1C03    SNZB	0x3,0
  0F99    0008    RET
  0F9A    01D1    CLR	0x51
  0F9B    1283    CLRB	0x3,5
  0F9C    01B0    CLR	0x30
  0F9D    01B1    CLR	0x31
  0F9E    1073    CLRB	0x73,0
  0F9F    0008    RET
  0FA0    0831    LD	A,0x31
  0FA1    0430    ORA	0x30
  0FA2    1903    SZB	0x3,2
  0FA3    2FB1    JP	0x7B1
  0FA4    1683    SETB	0x3,5
  0FA5    1703    SETB	0x3,6
  0FA6    0AE0    INCR	0x60
  0FA7    1903    SZB	0x3,2
  0FA8    0AE1    INCR	0x61
  0FA9    303A    LDIA	0x3A
  0FAA    0261    SUBA	0x61
  0FAB    3098    LDIA	0x98
  0FAC    1903    SZB	0x3,2
  0FAD    0260    SUBA	0x60
  0FAE    1C03    SNZB	0x3,0
  0FAF    0008    RET
  0FB0    14F3    SETB	0x73,1
  0FB1    1683    SETB	0x3,5
  0FB2    1703    SETB	0x3,6
  0FB3    01E0    CLR	0x60
  0FB4    01E1    CLR	0x61
  0FB5    0008    RET
---- stringtab ------------------------------------------------------------------
  1000    1BFF    SZB	0x7F,7
  1001    280A    JP	0xA
  1002    1383    CLRB	0x3,7
  1003    187F    SZB	0x7F,0
  1004    1783    SETB	0x3,7
  1005    0800    LD	A,0x0
  1006    0A84    INCR	0x4
  1007    1903    SZB	0x3,2
  1008    0AFF    INCR	0x7F
  1009    0008    RET
  100A    087F    LD	A,0x7F
  100B    397F    ANDIA	0x7F
  100C    008A    LD	0xA,A
  100D    0804    LD	A,0x4
  100E    0A84    INCR	0x4
  100F    1903    SZB	0x3,2
  1010    0AFF    INCR	0x7F
  1011    0082    LD	0x2,A
  1012    34AB    RET	0xAB
  1013    3401    RET	0x1
  1014    34BF    RET	0xBF
  1015    3401    RET	0x1
  1016    34BF    RET	0xBF
  1017    3401    RET	0x1
  1018    34D7    RET	0xD7
  1019    3401    RET	0x1
  101A    34D7    RET	0xD7
  101B    3401    RET	0x1
  101C    34F0    RET	0xF0
  101D    3401    RET	0x1
  101E    34F0    RET	0xF0
  101F    3401    RET	0x1
  1020    340A    RET	0xA
  1021    3402    RET	0x2
  1022    340A    RET	0xA
  1023    3402    RET	0x2
  1024    3424    RET	0x24
  1025    3402    RET	0x2
  1026    3425    RET	0x25
  1027    3402    RET	0x2
  1028    343C    RET	0x3C
  1029    3402    RET	0x2
  102A    343D    RET	0x3D
  102B    3402    RET	0x2
  102C    3451    RET	0x51
  102D    3402    RET	0x2
  102E    3452    RET	0x52
  102F    3402    RET	0x2
  1030    3466    RET	0x66
  1031    3402    RET	0x2
  1032    3467    RET	0x67
  1033    3402    RET	0x2
  1034    347C    RET	0x7C
  1035    3402    RET	0x2
  1036    347D    RET	0x7D
  1037    3402    RET	0x2
  1038    3493    RET	0x93
  1039    3402    RET	0x2
  103A    3493    RET	0x93
  103B    3402    RET	0x2
  103C    34AC    RET	0xAC
  103D    3402    RET	0x2
  103E    34AC    RET	0xAC
  103F    3402    RET	0x2
  1040    34C7    RET	0xC7
  1041    3402    RET	0x2
  1042    34C8    RET	0xC8
  1043    3402    RET	0x2
  1044    34E3    RET	0xE3
  1045    3402    RET	0x2
  1046    34E4    RET	0xE4
  1047    3402    RET	0x2
  1048    3400    RET	0x0
  1049    3403    RET	0x3
  104A    3400    RET	0x0
  104B    3403    RET	0x3
  104C    341D    RET	0x1D
  104D    3403    RET	0x3
  104E    341E    RET	0x1E
  104F    3403    RET	0x3
  1050    343C    RET	0x3C
  1051    3403    RET	0x3
  1052    343C    RET	0x3C
  1053    3403    RET	0x3
  1054    345B    RET	0x5B
  1055    3403    RET	0x3
  1056    345C    RET	0x5C
  1057    3403    RET	0x3
  1058    347B    RET	0x7B
  1059    3403    RET	0x3
  105A    347B    RET	0x7B
  105B    3403    RET	0x3
  105C    349B    RET	0x9B
  105D    3403    RET	0x3
  105E    349B    RET	0x9B
  105F    3403    RET	0x3
  1060    34BC    RET	0xBC
  1061    3403    RET	0x3
  1062    34BD    RET	0xBD
  1063    3403    RET	0x3
  1064    34DE    RET	0xDE
  1065    3403    RET	0x3
  1066    34DE    RET	0xDE
  1067    3403    RET	0x3
  1068    3400    RET	0x0
  1069    3404    RET	0x4
  106A    3401    RET	0x1
  106B    3404    RET	0x4
  106C    3423    RET	0x23
  106D    3404    RET	0x4
  106E    3423    RET	0x23
  106F    3404    RET	0x4
  1070    3446    RET	0x46
  1071    3404    RET	0x4
  1072    3447    RET	0x47
  1073    3404    RET	0x4
  1074    346B    RET	0x6B
  1075    3404    RET	0x4
  1076    346B    RET	0x6B
  1077    3404    RET	0x4
  1078    348E    RET	0x8E
  1079    3404    RET	0x4
  107A    348F    RET	0x8F
  107B    3404    RET	0x4
  107C    34B3    RET	0xB3
  107D    3404    RET	0x4
  107E    34B4    RET	0xB4
  107F    3404    RET	0x4
  1080    34D9    RET	0xD9
  1081    3404    RET	0x4
  1082    34D9    RET	0xD9
  1083    3404    RET	0x4
  1084    34FE    RET	0xFE
  1085    3404    RET	0x4
  1086    34FE    RET	0xFE
  1087    3404    RET	0x4
  1088    3424    RET	0x24
  1089    3405    RET	0x5
  108A    3424    RET	0x24
  108B    3405    RET	0x5
  108C    344A    RET	0x4A
  108D    3405    RET	0x5
  108E    344B    RET	0x4B
  108F    3405    RET	0x5
  1090    3472    RET	0x72
  1091    3405    RET	0x5
  1092    3472    RET	0x72
  1093    3405    RET	0x5
  1094    3499    RET	0x99
  1095    3405    RET	0x5
  1096    349A    RET	0x9A
  1097    3405    RET	0x5
  1098    34C1    RET	0xC1
  1099    3405    RET	0x5
  109A    34C1    RET	0xC1
  109B    3405    RET	0x5
  109C    34E9    RET	0xE9
  109D    3405    RET	0x5
  109E    34E9    RET	0xE9
  109F    3405    RET	0x5
  10A0    3411    RET	0x11
  10A1    3406    RET	0x6
  10A2    3411    RET	0x11
  10A3    3406    RET	0x6
  10A4    3438    RET	0x38
  10A5    3406    RET	0x6
  10A6    3439    RET	0x39
  10A7    3406    RET	0x6
  10A8    3461    RET	0x61
  10A9    3406    RET	0x6
  10AA    3461    RET	0x61
  10AB    3406    RET	0x6
  10AC    3488    RET	0x88
  10AD    3406    RET	0x6
  10AE    3489    RET	0x89
  10AF    3406    RET	0x6
  10B0    34B1    RET	0xB1
  10B1    3406    RET	0x6
  10B2    34B1    RET	0xB1
  10B3    3406    RET	0x6
  10B4    34D9    RET	0xD9
  10B5    3406    RET	0x6
  10B6    34DA    RET	0xDA
  10B7    3406    RET	0x6
  10B8    3402    RET	0x2
  10B9    3407    RET	0x7
  10BA    3402    RET	0x2
  10BB    3407    RET	0x7
  10BC    342B    RET	0x2B
  10BD    3407    RET	0x7
  10BE    342B    RET	0x2B
  10BF    3407    RET	0x7
  10C0    3453    RET	0x53
  10C1    3407    RET	0x7
  10C2    3454    RET	0x54
  10C3    3407    RET	0x7
  10C4    347C    RET	0x7C
  10C5    3407    RET	0x7
  10C6    347C    RET	0x7C
  10C7    3407    RET	0x7
  10C8    34A4    RET	0xA4
  10C9    3407    RET	0x7
  10CA    34A5    RET	0xA5
  10CB    3407    RET	0x7
  10CC    34CD    RET	0xCD
  10CD    3407    RET	0x7
  10CE    34CD    RET	0xCD
  10CF    3407    RET	0x7
  10D0    34F5    RET	0xF5
  10D1    3407    RET	0x7
  10D2    34F6    RET	0xF6
  10D3    3407    RET	0x7
  10D4    341E    RET	0x1E
  10D5    3408    RET	0x8
  10D6    341E    RET	0x1E
  10D7    3408    RET	0x8
  10D8    3447    RET	0x47
  10D9    3408    RET	0x8
  10DA    3445    RET	0x45
  10DB    3408    RET	0x8
  10DC    346F    RET	0x6F
  10DD    3408    RET	0x8
  10DE    346C    RET	0x6C
  10DF    3408    RET	0x8
  10E0    3496    RET	0x96
  10E1    3408    RET	0x8
  10E2    3493    RET	0x93
  10E3    3408    RET	0x8
  10E4    34BE    RET	0xBE
  10E5    3408    RET	0x8
  10E6    34B9    RET	0xB9
  10E7    3408    RET	0x8
  10E8    34E5    RET	0xE5
  10E9    3408    RET	0x8
  10EA    34DF    RET	0xDF
  10EB    3408    RET	0x8
  10EC    340B    RET	0xB
  10ED    3409    RET	0x9
  10EE    3405    RET	0x5
  10EF    3409    RET	0x9
  10F0    3432    RET	0x32
  10F1    3409    RET	0x9
  10F2    342A    RET	0x2A
  10F3    3409    RET	0x9
  10F4    3457    RET	0x57
  10F5    3409    RET	0x9
  10F6    344F    RET	0x4F
  10F7    3409    RET	0x9
  10F8    347D    RET	0x7D
  10F9    3409    RET	0x9
  10FA    3473    RET	0x73
  10FB    3409    RET	0x9
  10FC    34A1    RET	0xA1
  10FD    3409    RET	0x9
  10FE    3497    RET	0x97
  10FF    3409    RET	0x9
  1100    34C6    RET	0xC6
  1101    3409    RET	0x9
  1102    34BB    RET	0xBB
  1103    3409    RET	0x9
  1104    34E9    RET	0xE9
  1105    3409    RET	0x9
  1106    34DD    RET	0xDD
  1107    3409    RET	0x9
  1108    340C    RET	0xC
  1109    340A    RET	0xA
  110A    34FF    RET	0xFF
  110B    3409    RET	0x9
  110C    342E    RET	0x2E
  110D    340A    RET	0xA
  110E    3421    RET	0x21
  110F    340A    RET	0xA
  1110    3450    RET	0x50
  1111    340A    RET	0xA
  1112    3442    RET	0x42
  1113    340A    RET	0xA
  1114    3471    RET	0x71
  1115    340A    RET	0xA
  1116    3462    RET	0x62
  1117    340A    RET	0xA
  1118    3492    RET	0x92
  1119    340A    RET	0xA
  111A    3483    RET	0x83
  111B    340A    RET	0xA
  111C    34B3    RET	0xB3
  111D    340A    RET	0xA
  111E    34A3    RET	0xA3
  111F    340A    RET	0xA
  1120    34D3    RET	0xD3
  1121    340A    RET	0xA
  1122    34C2    RET	0xC2
  1123    340A    RET	0xA
  1124    34F2    RET	0xF2
  1125    340A    RET	0xA
  1126    34E1    RET	0xE1
  1127    340A    RET	0xA
  1128    3411    RET	0x11
  1129    340B    RET	0xB
  112A    34FF    RET	0xFF
  112B    340A    RET	0xA
  112C    342F    RET	0x2F
  112D    340B    RET	0xB
  112E    341C    RET	0x1C
  112F    340B    RET	0xB
  1130    344C    RET	0x4C
  1131    340B    RET	0xB
  1132    3439    RET	0x39
  1133    340B    RET	0xB
  1134    3469    RET	0x69
  1135    340B    RET	0xB
  1136    3455    RET	0x55
  1137    340B    RET	0xB
  1138    3485    RET	0x85
  1139    340B    RET	0xB
  113A    3471    RET	0x71
  113B    340B    RET	0xB
  113C    34A0    RET	0xA0
  113D    340B    RET	0xB
  113E    348C    RET	0x8C
  113F    340B    RET	0xB
  1140    34BB    RET	0xBB
  1141    340B    RET	0xB
  1142    34A8    RET	0xA8
  1143    340B    RET	0xB
  1144    34D7    RET	0xD7
  1145    340B    RET	0xB
  1146    34C3    RET	0xC3
  1147    340B    RET	0xB
  1148    34F2    RET	0xF2
  1149    340B    RET	0xB
  114A    34DE    RET	0xDE
  114B    340B    RET	0xB
  114C    340C    RET	0xC
  114D    340C    RET	0xC
  114E    34F8    RET	0xF8
  114F    340B    RET	0xB
  1150    3426    RET	0x26
  1151    340C    RET	0xC
  1152    3411    RET	0x11
  1153    340C    RET	0xC
  1154    343F    RET	0x3F
  1155    340C    RET	0xC
  1156    342A    RET	0x2A
  1157    340C    RET	0xC
  1158    3458    RET	0x58
  1159    340C    RET	0xC
  115A    3442    RET	0x42
  115B    340C    RET	0xC
  115C    346F    RET	0x6F
  115D    340C    RET	0xC
  115E    3459    RET	0x59
  115F    340C    RET	0xC
  1160    3487    RET	0x87
  1161    340C    RET	0xC
  1162    3470    RET	0x70
  1163    340C    RET	0xC
  1164    349D    RET	0x9D
  1165    340C    RET	0xC
  1166    3487    RET	0x87
  1167    340C    RET	0xC
  1168    34B3    RET	0xB3
  1169    340C    RET	0xC
  116A    349D    RET	0x9D
  116B    340C    RET	0xC
  116C    34C9    RET	0xC9
  116D    340C    RET	0xC
  116E    34B2    RET	0xB2
  116F    340C    RET	0xC
  1170    34DE    RET	0xDE
  1171    340C    RET	0xC
  1172    34C7    RET	0xC7
  1173    340C    RET	0xC
  1174    34F2    RET	0xF2
  1175    340C    RET	0xC
  1176    34DC    RET	0xDC
  1177    340C    RET	0xC
  1178    3407    RET	0x7
  1179    340D    RET	0xD
  117A    34F0    RET	0xF0
  117B    340C    RET	0xC
  117C    341A    RET	0x1A
  117D    340D    RET	0xD
  117E    3403    RET	0x3
  117F    340D    RET	0xD
  1180    342D    RET	0x2D
  1181    340D    RET	0xD
  1182    3416    RET	0x16
  1183    340D    RET	0xD
  1184    3440    RET	0x40
  1185    340D    RET	0xD
  1186    3429    RET	0x29
  1187    340D    RET	0xD
  1188    3452    RET	0x52
  1189    340D    RET	0xD
  118A    343B    RET	0x3B
  118B    340D    RET	0xD
  118C    3464    RET	0x64
  118D    340D    RET	0xD
  118E    344D    RET	0x4D
  118F    340D    RET	0xD
  1190    3475    RET	0x75
  1191    340D    RET	0xD
  1192    345E    RET	0x5E
  1193    340D    RET	0xD
  1194    3486    RET	0x86
  1195    340D    RET	0xD
  1196    346F    RET	0x6F
  1197    340D    RET	0xD
  1198    3496    RET	0x96
  1199    340D    RET	0xD
  119A    347F    RET	0x7F
  119B    340D    RET	0xD
  119C    34A5    RET	0xA5
  119D    340D    RET	0xD
  119E    348F    RET	0x8F
  119F    340D    RET	0xD
  11A0    34B5    RET	0xB5
  11A1    340D    RET	0xD
  11A2    349E    RET	0x9E
  11A3    340D    RET	0xD
  11A4    34C3    RET	0xC3
  11A5    340D    RET	0xD
  11A6    34AD    RET	0xAD
  11A7    340D    RET	0xD
  11A8    34D2    RET	0xD2
  11A9    340D    RET	0xD
  11AA    34BC    RET	0xBC
  11AB    340D    RET	0xD
  11AC    34E1    RET	0xE1
  11AD    340D    RET	0xD
  11AE    34CB    RET	0xCB
  11AF    340D    RET	0xD
  11B0    34EF    RET	0xEF
  11B1    340D    RET	0xD
  11B2    34D9    RET	0xD9
  11B3    340D    RET	0xD
  11B4    34FD    RET	0xFD
  11B5    340D    RET	0xD
  11B6    34E7    RET	0xE7
  11B7    340D    RET	0xD
  11B8    340A    RET	0xA
  11B9    340E    RET	0xE
  11BA    343F    RET	0x3F
  11BB    3406    RET	0x6
  11BC    345B    RET	0x5B
  11BD    344F    RET	0x4F
  11BE    3466    RET	0x66
  11BF    346D    RET	0x6D
  11C0    347D    RET	0x7D
  11C1    3407    RET	0x7
  11C2    347F    RET	0x7F
  11C3    346F    RET	0x6F
  11C4    3400    RET	0x0
  11C5    3479    RET	0x79
  11C6    3439    RET	0x39
  11C7    3412    RET	0x12
  11C8    3412    RET	0x12
  11C9    3412    RET	0x12
  11CA    3412    RET	0x12
  11CB    3412    RET	0x12
  11CC    3412    RET	0x12
  11CD    3412    RET	0x12
  11CE    3412    RET	0x12
  11CF    3412    RET	0x12
  11D0    3412    RET	0x12
  11D1    3412    RET	0x12
  11D2    3412    RET	0x12
  11D3    345A    RET	0x5A
  11D4    345B    RET	0x5B
  11D5    345C    RET	0x5C
  11D6    345E    RET	0x5E
  11D7    345D    RET	0x5D
  11D8    345F    RET	0x5F
  11D9    3451    RET	0x51
  11DA    3454    RET	0x54
  11DB    3453    RET	0x53
  11DC    3455    RET	0x55
  11DD    3452    RET	0x52
  11DE    3450    RET	0x50
  11DF    3405    RET	0x5
  11E0    3405    RET	0x5
  11E1    3405    RET	0x5
  11E2    3405    RET	0x5
  11E3    3405    RET	0x5
  11E4    3405    RET	0x5
  11E5    3405    RET	0x5
  11E6    3405    RET	0x5
  11E7    3405    RET	0x5
  11E8    3405    RET	0x5
  11E9    3405    RET	0x5
  11EA    3405    RET	0x5
  11EB    3401    RET	0x1
  11EC    3402    RET	0x2
  11ED    3404    RET	0x4
  11EE    3408    RET	0x8
  11EF    3410    RET	0x10
  11F0    3420    RET	0x20
  11F1    3440    RET	0x40
  11F2    3480    RET	0x80
---- reset_enter ------------------------------------------------------------------
  0000    120A    CLRB	0xA,4
  0001    118A    CLRB	0xA,3
  0002    280E    JP	0xE
  000E    160A    SETB	0xA,4
  000F    118A    CLRB	0xA,3
  0010    2C0F    JP	0x40F
---- start_initialization ------------------------------------------------------------------
  07F4    0064    CLRWDT
  07F5    0180    CLR	0x0
  07F6    0A84    INCR	0x4
  07F7    0604    XORA	0x4
  07F8    1903    SZB	0x3,2
  07F9    3400    RET	0x0
  07FA    0604    XORA	0x4
  07FB    2FF5    JP	0x7F5
  140F    3020    LDIA	0x20
  1410    01F0    CLR	0x70
  1411    01F1    CLR	0x71
  1412    01F2    CLR	0x72
  1413    01F3    CLR	0x73
  1414    01FA    CLR	0x7A
  1415    01FB    CLR	0x7B
  1416    01FC    CLR	0x7C
  1417    1383    CLRB	0x3,7
  1418    0084    LD	0x4,A
  1419    305D    LDIA	0x5D
  141A    120A    CLRB	0xA,4
  141B    118A    CLRB	0xA,3
  141C    27F4    CALL	0x7F4
  141D    160A    SETB	0xA,4
  141E    118A    CLRB	0xA,3
  141F    30A0    LDIA	0xA0
  1420    0084    LD	0x4,A
  1421    30EF    LDIA	0xEF
  1422    120A    CLRB	0xA,4
  1423    118A    CLRB	0xA,3
  1424    27F4    CALL	0x7F4
  1425    160A    SETB	0xA,4
  1426    118A    CLRB	0xA,3
  1427    3098    LDIA	0x98
  1428    1783    SETB	0x3,7
  1429    0084    LD	0x4,A
  142A    30E6    LDIA	0xE6
  142B    120A    CLRB	0xA,4
  142C    118A    CLRB	0xA,3
  142D    27F4    CALL	0x7F4
  142E    160A    SETB	0xA,4
  142F    118A    CLRB	0xA,3
  1430    3020    LDIA	0x20
  1431    0084    LD	0x4,A
  1432    305C    LDIA	0x5C
  1433    120A    CLRB	0xA,4
  1434    118A    CLRB	0xA,3
  1435    27F4    CALL	0x7F4
  1436    3028    LDIA	0x28
  1437    00ED    LD	0x6D,A
  1438    3032    LDIA	0x32
  1439    00EE    LD	0x6E,A
  143A    305F    LDIA	0x5F
  143B    00EF    LD	0x6F,A
  143C    0183    CLR	0x3
  143D    160A    SETB	0xA,4
  143E    118A    CLRB	0xA,3
  143F    2CD2    JP	0x4D2
---- interrupt_function_enter ----------------------------------------------------------
  0004    00FE    LD	0x7E,A
  0005    0E03    SWAPA	0x3
  0006    00F7    LD	0x77,A
  0007    0804    LD	A,0x4
  0008    00F8    LD	0x78,A
  0009    080A    LD	A,0xA
  000A    00F9    LD	0x79,A
  000B    120A    CLRB	0xA,4
  000C    158A    SETB	0xA,3
  000D    2982    JP	0x182
---- common_function ------------------------------------------------------------------
  06A8    3EBA    ADDIA	0xBA
  06A9    0084    LD	0x4,A
  06AA    3091    LDIA	0x91
  06AB    1803    SZB	0x3,0
  06AC    3E01    ADDIA	0x1
  06AD    00FF    LD	0x7F,A
  06AE    0008    RET
  06AF    00DC    LD	0x5C,A
  06B0    30FF    LDIA	0xFF
  06B1    01DB    CLR	0x5B
  06B2    00D8    LD	0x58,A
  06B3    00D9    LD	0x59,A
  06B4    00D6    LD	0x56,A
  06B5    1283    CLRB	0x3,5
  06B6    10A4    CLRB	0x24,1
  06B7    11A4    CLRB	0x24,3
  06B8    300A    LDIA	0xA
  06B9    00DD    LD	0x5D,A
  06BA    01DE    CLR	0x5E
  06BB    086F    LD	A,0x6F
  06BC    00DF    LD	0x5F,A
  06BD    01E0    CLR	0x60
  06BE    0008    RET
  06BF    0ACB    INCR	0x4B
  06C0    1903    SZB	0x3,2
  06C1    0ACC    INCR	0x4C
  06C2    3004    LDIA	0x4
  06C3    024C    SUBA	0x4C
  06C4    30E3    LDIA	0xE3
  06C5    1903    SZB	0x3,2
  06C6    024B    SUBA	0x4B
  06C7    1C03    SNZB	0x3,0
  06C8    0008    RET
  06C9    3080    LDIA	0x80
  06CA    06F2    XORR	0x72
  06CB    01CB    CLR	0x4B
  06CC    01CC    CLR	0x4C
  06CD    0008    RET
  06CE    1683    SETB	0x3,5
  06CF    300A    LDIA	0xA
  06D0    01CD    CLR	0x4D
  06D1    01CE    CLR	0x4E
  06D2    1171    CLRB	0x71,2
  06D3    13F1    CLRB	0x71,7
  06D4    1283    CLRB	0x3,5
  06D5    00DD    LD	0x5D,A
  06D6    01DE    CLR	0x5E
  06D7    0008    RET
  06D8    00A0    LD	0x20,A
  06D9    300A    LDIA	0xA
  06DA    00DD    LD	0x5D,A
  06DB    01DE    CLR	0x5E
  06DC    083E    LD	A,0x3E
  06DD    00DF    LD	0x5F,A
  06DE    01E0    CLR	0x60
  06DF    0008    RET
  06E0    00A2    LD	0x22,A
  06E1    300A    LDIA	0xA
  06E2    00DD    LD	0x5D,A
  06E3    01DE    CLR	0x5E
  06E4    084E    LD	A,0x4E
  06E5    00DF    LD	0x5F,A
  06E6    01E0    CLR	0x60
  06E7    0008    RET
  06E8    1683    SETB	0x3,5
  06E9    00C9    LD	0x49,A
  06EA    3005    LDIA	0x5
  06EB    01CA    CLR	0x4A
  06EC    00C7    LD	0x47,A
  06ED    01C8    CLR	0x48
  06EE    1283    CLRB	0x3,5
  06EF    0852    LD	A,0x52
  06F0    0008    RET
  06F1    10F2    CLRB	0x72,1
  06F2    1271    CLRB	0x71,4
  06F3    12F1    CLRB	0x71,5
  06F4    11F2    CLRB	0x72,3
  06F5    15F1    SETB	0x71,3
  06F6    1472    SETB	0x72,0
  06F7    10F1    CLRB	0x71,1
  06F8    1370    CLRB	0x70,6
  06F9    13F0    CLRB	0x70,7
  06FA    1071    CLRB	0x71,0
  06FB    0008    RET
  06FC    00A0    LD	0x20,A
  06FD    300A    LDIA	0xA
  06FE    00DD    LD	0x5D,A
  06FF    01DE    CLR	0x5E
  0700    086F    LD	A,0x6F
  0701    00DF    LD	0x5F,A
  0702    01E0    CLR	0x60
  0703    0008    RET
  0704    0ACD    INCR	0x4D
  0705    1903    SZB	0x3,2
  0706    0ACE    INCR	0x4E
  0707    3000    LDIA	0x0
  0708    024E    SUBA	0x4E
  0709    3433    RET	0x33
  070A    1283    CLRB	0x3,5
  070B    00DD    LD	0x5D,A
  070C    01DE    CLR	0x5E
  070D    084E    LD	A,0x4E
  070E    00DF    LD	0x5F,A
  070F    01E0    CLR	0x60
  0710    0008    RET
  0711    300A    LDIA	0xA
  0712    00DD    LD	0x5D,A
  0713    01DE    CLR	0x5E
  0714    083E    LD	A,0x3E
  0715    00DF    LD	0x5F,A
  0716    01E0    CLR	0x60
  0717    0008    RET
  0718    00A1    LD	0x21,A
  0719    300A    LDIA	0xA
  071A    00DD    LD	0x5D,A
  071B    01DE    CLR	0x5E
  071C    084E    LD	A,0x4E
  071D    00DF    LD	0x5F,A
  071E    01E0    CLR	0x60
  071F    0008    RET
  0720    1683    SETB	0x3,5
  0721    00A0    LD	0x20,A
  0722    300A    LDIA	0xA
  0723    1283    CLRB	0x3,5
  0724    00DD    LD	0x5D,A
  0725    01DE    CLR	0x5E
  0726    0008    RET
  0727    086E    LD	A,0x6E
  0728    3A80    XORIA	0x80
  0729    00E8    LD	0x68,A
  072A    086F    LD	A,0x6F
  072B    3A80    XORIA	0x80
  072C    02E8    SUBR	0x68
  072D    0008    RET
  072E    30BA    LDIA	0xBA
  072F    0084    LD	0x4,A
  0730    3091    LDIA	0x91
  0731    1283    CLRB	0x3,5
  0732    00FF    LD	0x7F,A
  0733    0008    RET
  0734    00A1    LD	0x21,A
  0735    30C6    LDIA	0xC6
  0736    0084    LD	0x4,A
  0737    3091    LDIA	0x91
  0738    00FF    LD	0x7F,A
  0739    0008    RET
  096F    01E5    CLR	0x65
  0970    1003    CLRB	0x3,0
  0971    0DE4    RLCR	0x64
  0972    0DE5    RLCR	0x65
  0973    1003    CLRB	0x3,0
  0974    0DE4    RLCR	0x64
  0975    0DE5    RLCR	0x65
  0976    0765    ADDA	0x65
  0977    00FF    LD	0x7F,A
  0978    0008    RET
  0979    1683    SETB	0x3,5
  097A    01A5    CLR	0x25
  097B    01A6    CLR	0x26
  097C    1283    CLRB	0x3,5
  097D    01AA    CLR	0x2A
  097E    01AB    CLR	0x2B
  097F    01A8    CLR	0x28
  0980    01A9    CLR	0x29
  0981    0008    RET
  0B10    3038    LDIA	0x38
  0B11    1683    SETB	0x3,5
  0B12    1703    SETB	0x3,6
  0B13    0097    LD	0x17,A
  0B14    1283    CLRB	0x3,5
  0B15    1303    CLRB	0x3,6
  0B16    34B8    RET	0xB8
  0B17    3034    LDIA	0x34
  0B18    1683    SETB	0x3,5
  0B19    1703    SETB	0x3,6
  0B1A    0097    LD	0x17,A
  0B1B    1283    CLRB	0x3,5
  0B1C    1303    CLRB	0x3,6
  0B1D    34B4    RET	0xB4
  0B1E    301C    LDIA	0x1C
  0B1F    1683    SETB	0x3,5
  0B20    1703    SETB	0x3,6
  0B21    0097    LD	0x17,A
  0B22    1283    CLRB	0x3,5
  0B23    1303    CLRB	0x3,6
  0B24    349C    RET	0x9C
  0B25    302C    LDIA	0x2C
  0B26    1683    SETB	0x3,5
  0B27    1703    SETB	0x3,6
  0B28    0097    LD	0x17,A
  0B29    1283    CLRB	0x3,5
  0B2A    1303    CLRB	0x3,6
  0B2B    34AC    RET	0xAC
  0B2C    1283    CLRB	0x3,5
  0B2D    1303    CLRB	0x3,6
  0B2E    0008    RET
  0FB6    0800    LD	A,0x0
  0FB7    00E3    LD	0x63,A
  0FB8    0A84    INCR	0x4
  0FB9    0800    LD	A,0x0
  0FBA    00E4    LD	0x64,A
  0FBB    0861    LD	A,0x61
  0FBC    02E3    SUBR	0x63
  0FBD    0862    LD	A,0x62
  0FBE    1C03    SNZB	0x3,0
  0FBF    03E4    DECR	0x64
  0FC0    02E4    SUBR	0x64
  0FC1    3000    LDIA	0x0
  0FC2    0264    SUBA	0x64
  0FC3    3402    RET	0x2
  0FC4    0800    LD	A,0x0
  0FC5    00E0    LD	0x60,A
  0FC6    0A84    INCR	0x4
  0FC7    0800    LD	A,0x0
  0FC8    00E1    LD	0x61,A
  0FC9    0869    LD	A,0x69
  0FCA    0760    ADDA	0x60
  0FCB    00E2    LD	0x62,A
  0FCC    0861    LD	A,0x61
  0FCD    1803    SZB	0x3,0
  0FCE    0A61    INCA	0x61
  0FCF    00E3    LD	0x63,A
  0FD0    086B    LD	A,0x6B
  0FD1    0263    SUBA	0x63
  0FD2    1D03    SNZB	0x3,2
  0FD3    0008    RET
  0FD4    086A    LD	A,0x6A
  0FD5    0262    SUBA	0x62
  0FD6    0008    RET
  0FD7    0084    LD	0x4,A
  0FD8    0800    LD	A,0x0
  0FD9    00E0    LD	0x60,A
  0FDA    0A84    INCR	0x4
  0FDB    0800    LD	A,0x0
  0FDC    00E1    LD	0x61,A
  0FDD    0008    RET
  0FDE    0084    LD	0x4,A
  0FDF    085F    LD	A,0x5F
  0FE0    0080    LD	0x0,A
  0FE1    0A84    INCR	0x4
  0FE2    0860    LD	A,0x60
  0FE3    0080    LD	0x0,A
  0FE4    1003    CLRB	0x3,0
  0FE5    0D65    RLCA	0x65
  0FE6    3E20    ADDIA	0x20
  0FE7    0084    LD	0x4,A
  0FE8    0008    RET
  0FE9    0800    LD	A,0x0
  0FEA    00DF    LD	0x5F,A
  0FEB    0A84    INCR	0x4
  0FEC    0800    LD	A,0x0
  0FED    00E0    LD	0x60,A
  0FEE    1003    CLRB	0x3,0
  0FEF    0D65    RLCA	0x65
  0FF0    0008    RET
  0FF1    3907    ANDIA	0x7
  0FF2    3EEB    ADDIA	0xEB
  0FF3    0084    LD	0x4,A
  0FF4    3091    LDIA	0x91
  0FF5    1803    SZB	0x3,0
  0FF6    3E01    ADDIA	0x1
  0FF7    00FF    LD	0x7F,A
  0FF8    0008    RET
  0FF9    0084    LD	0x4,A
  0FFA    0180    CLR	0x0
  0FFB    0A84    INCR	0x4
  0FFC    0180    CLR	0x0
  0FFD    1003    CLRB	0x3,0
  0FFE    0D5D    RLCA	0x5D
  0FFF    0008    RET
  15E1    0089    LD	0x9,A
  15E2    30FF    LDIA	0xFF
  15E3    0086    LD	0x6,A
  15E4    30BC    LDIA	0xBC
  15E5    0087    LD	0x7,A
  15E6    303F    LDIA	0x3F
  15E7    0085    LD	0x5,A
  15E8    0008    RET
  16E4    01C5    CLR	0x45
  16E5    01C6    CLR	0x46
  16E6    01C7    CLR	0x47
  16E7    01C8    CLR	0x48
  16E8    01C9    CLR	0x49
  16E9    01CA    CLR	0x4A
  16EA    01CB    CLR	0x4B
  16EB    01CC    CLR	0x4C
  16EC    01C1    CLR	0x41
  16ED    01C2    CLR	0x42
  16EE    1683    SETB	0x3,5
  16EF    0008    RET
  17F7    0AB1    INCR	0x31
  17F8    1903    SZB	0x3,2
  17F9    0AB2    INCR	0x32
  17FA    3002    LDIA	0x2
  17FB    0232    SUBA	0x32
  17FC    34F0    RET	0xF0
  17FD    1283    CLRB	0x3,5
  17FE    1303    CLRB	0x3,6
  17FF    0008    RET
